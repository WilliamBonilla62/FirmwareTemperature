
CSP_Temperature.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000442c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800453c  0800453c  0001453c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004584  08004584  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08004584  08004584  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004584  08004584  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004584  08004584  00014584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004588  08004588  00014588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800458c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  20000074  08004600  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  08004600  00020260  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e5b0  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002297  00000000  00000000  0002e64d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007b8  00000000  00000000  000308e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006a0  00000000  00000000  000310a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018692  00000000  00000000  00031740  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000093a4  00000000  00000000  00049dd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00087384  00000000  00000000  00053176  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000da4fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fd4  00000000  00000000  000da578  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08004524 	.word	0x08004524

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08004524 	.word	0x08004524

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <__aeabi_d2f>:
 800092c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000930:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000934:	bf24      	itt	cs
 8000936:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800093a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800093e:	d90d      	bls.n	800095c <__aeabi_d2f+0x30>
 8000940:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000944:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000948:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800094c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000950:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000954:	bf08      	it	eq
 8000956:	f020 0001 	biceq.w	r0, r0, #1
 800095a:	4770      	bx	lr
 800095c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000960:	d121      	bne.n	80009a6 <__aeabi_d2f+0x7a>
 8000962:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000966:	bfbc      	itt	lt
 8000968:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800096c:	4770      	bxlt	lr
 800096e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000972:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000976:	f1c2 0218 	rsb	r2, r2, #24
 800097a:	f1c2 0c20 	rsb	ip, r2, #32
 800097e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000982:	fa20 f002 	lsr.w	r0, r0, r2
 8000986:	bf18      	it	ne
 8000988:	f040 0001 	orrne.w	r0, r0, #1
 800098c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000990:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000994:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000998:	ea40 000c 	orr.w	r0, r0, ip
 800099c:	fa23 f302 	lsr.w	r3, r3, r2
 80009a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009a4:	e7cc      	b.n	8000940 <__aeabi_d2f+0x14>
 80009a6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009aa:	d107      	bne.n	80009bc <__aeabi_d2f+0x90>
 80009ac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009b0:	bf1e      	ittt	ne
 80009b2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009b6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009ba:	4770      	bxne	lr
 80009bc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <__aeabi_frsub>:
 80009cc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009d0:	e002      	b.n	80009d8 <__addsf3>
 80009d2:	bf00      	nop

080009d4 <__aeabi_fsub>:
 80009d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009d8 <__addsf3>:
 80009d8:	0042      	lsls	r2, r0, #1
 80009da:	bf1f      	itttt	ne
 80009dc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009e0:	ea92 0f03 	teqne	r2, r3
 80009e4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009e8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ec:	d06a      	beq.n	8000ac4 <__addsf3+0xec>
 80009ee:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009f2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009f6:	bfc1      	itttt	gt
 80009f8:	18d2      	addgt	r2, r2, r3
 80009fa:	4041      	eorgt	r1, r0
 80009fc:	4048      	eorgt	r0, r1
 80009fe:	4041      	eorgt	r1, r0
 8000a00:	bfb8      	it	lt
 8000a02:	425b      	neglt	r3, r3
 8000a04:	2b19      	cmp	r3, #25
 8000a06:	bf88      	it	hi
 8000a08:	4770      	bxhi	lr
 8000a0a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a12:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a16:	bf18      	it	ne
 8000a18:	4240      	negne	r0, r0
 8000a1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a1e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a22:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a26:	bf18      	it	ne
 8000a28:	4249      	negne	r1, r1
 8000a2a:	ea92 0f03 	teq	r2, r3
 8000a2e:	d03f      	beq.n	8000ab0 <__addsf3+0xd8>
 8000a30:	f1a2 0201 	sub.w	r2, r2, #1
 8000a34:	fa41 fc03 	asr.w	ip, r1, r3
 8000a38:	eb10 000c 	adds.w	r0, r0, ip
 8000a3c:	f1c3 0320 	rsb	r3, r3, #32
 8000a40:	fa01 f103 	lsl.w	r1, r1, r3
 8000a44:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a48:	d502      	bpl.n	8000a50 <__addsf3+0x78>
 8000a4a:	4249      	negs	r1, r1
 8000a4c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a50:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a54:	d313      	bcc.n	8000a7e <__addsf3+0xa6>
 8000a56:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a5a:	d306      	bcc.n	8000a6a <__addsf3+0x92>
 8000a5c:	0840      	lsrs	r0, r0, #1
 8000a5e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a62:	f102 0201 	add.w	r2, r2, #1
 8000a66:	2afe      	cmp	r2, #254	; 0xfe
 8000a68:	d251      	bcs.n	8000b0e <__addsf3+0x136>
 8000a6a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a6e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a72:	bf08      	it	eq
 8000a74:	f020 0001 	biceq.w	r0, r0, #1
 8000a78:	ea40 0003 	orr.w	r0, r0, r3
 8000a7c:	4770      	bx	lr
 8000a7e:	0049      	lsls	r1, r1, #1
 8000a80:	eb40 0000 	adc.w	r0, r0, r0
 8000a84:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a88:	f1a2 0201 	sub.w	r2, r2, #1
 8000a8c:	d1ed      	bne.n	8000a6a <__addsf3+0x92>
 8000a8e:	fab0 fc80 	clz	ip, r0
 8000a92:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a96:	ebb2 020c 	subs.w	r2, r2, ip
 8000a9a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a9e:	bfaa      	itet	ge
 8000aa0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000aa4:	4252      	neglt	r2, r2
 8000aa6:	4318      	orrge	r0, r3
 8000aa8:	bfbc      	itt	lt
 8000aaa:	40d0      	lsrlt	r0, r2
 8000aac:	4318      	orrlt	r0, r3
 8000aae:	4770      	bx	lr
 8000ab0:	f092 0f00 	teq	r2, #0
 8000ab4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ab8:	bf06      	itte	eq
 8000aba:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000abe:	3201      	addeq	r2, #1
 8000ac0:	3b01      	subne	r3, #1
 8000ac2:	e7b5      	b.n	8000a30 <__addsf3+0x58>
 8000ac4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ac8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000acc:	bf18      	it	ne
 8000ace:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ad2:	d021      	beq.n	8000b18 <__addsf3+0x140>
 8000ad4:	ea92 0f03 	teq	r2, r3
 8000ad8:	d004      	beq.n	8000ae4 <__addsf3+0x10c>
 8000ada:	f092 0f00 	teq	r2, #0
 8000ade:	bf08      	it	eq
 8000ae0:	4608      	moveq	r0, r1
 8000ae2:	4770      	bx	lr
 8000ae4:	ea90 0f01 	teq	r0, r1
 8000ae8:	bf1c      	itt	ne
 8000aea:	2000      	movne	r0, #0
 8000aec:	4770      	bxne	lr
 8000aee:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000af2:	d104      	bne.n	8000afe <__addsf3+0x126>
 8000af4:	0040      	lsls	r0, r0, #1
 8000af6:	bf28      	it	cs
 8000af8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000afc:	4770      	bx	lr
 8000afe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b02:	bf3c      	itt	cc
 8000b04:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bxcc	lr
 8000b0a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b0e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b12:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b16:	4770      	bx	lr
 8000b18:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b1c:	bf16      	itet	ne
 8000b1e:	4608      	movne	r0, r1
 8000b20:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b24:	4601      	movne	r1, r0
 8000b26:	0242      	lsls	r2, r0, #9
 8000b28:	bf06      	itte	eq
 8000b2a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b2e:	ea90 0f01 	teqeq	r0, r1
 8000b32:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b36:	4770      	bx	lr

08000b38 <__aeabi_ui2f>:
 8000b38:	f04f 0300 	mov.w	r3, #0
 8000b3c:	e004      	b.n	8000b48 <__aeabi_i2f+0x8>
 8000b3e:	bf00      	nop

08000b40 <__aeabi_i2f>:
 8000b40:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	bf48      	it	mi
 8000b46:	4240      	negmi	r0, r0
 8000b48:	ea5f 0c00 	movs.w	ip, r0
 8000b4c:	bf08      	it	eq
 8000b4e:	4770      	bxeq	lr
 8000b50:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b54:	4601      	mov	r1, r0
 8000b56:	f04f 0000 	mov.w	r0, #0
 8000b5a:	e01c      	b.n	8000b96 <__aeabi_l2f+0x2a>

08000b5c <__aeabi_ul2f>:
 8000b5c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b60:	bf08      	it	eq
 8000b62:	4770      	bxeq	lr
 8000b64:	f04f 0300 	mov.w	r3, #0
 8000b68:	e00a      	b.n	8000b80 <__aeabi_l2f+0x14>
 8000b6a:	bf00      	nop

08000b6c <__aeabi_l2f>:
 8000b6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b70:	bf08      	it	eq
 8000b72:	4770      	bxeq	lr
 8000b74:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b78:	d502      	bpl.n	8000b80 <__aeabi_l2f+0x14>
 8000b7a:	4240      	negs	r0, r0
 8000b7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b80:	ea5f 0c01 	movs.w	ip, r1
 8000b84:	bf02      	ittt	eq
 8000b86:	4684      	moveq	ip, r0
 8000b88:	4601      	moveq	r1, r0
 8000b8a:	2000      	moveq	r0, #0
 8000b8c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b90:	bf08      	it	eq
 8000b92:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b96:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b9a:	fabc f28c 	clz	r2, ip
 8000b9e:	3a08      	subs	r2, #8
 8000ba0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ba4:	db10      	blt.n	8000bc8 <__aeabi_l2f+0x5c>
 8000ba6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000baa:	4463      	add	r3, ip
 8000bac:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bb0:	f1c2 0220 	rsb	r2, r2, #32
 8000bb4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bbc:	eb43 0002 	adc.w	r0, r3, r2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f102 0220 	add.w	r2, r2, #32
 8000bcc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bd0:	f1c2 0220 	rsb	r2, r2, #32
 8000bd4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bd8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bdc:	eb43 0002 	adc.w	r0, r3, r2
 8000be0:	bf08      	it	eq
 8000be2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_fmul>:
 8000be8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bf0:	bf1e      	ittt	ne
 8000bf2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bf6:	ea92 0f0c 	teqne	r2, ip
 8000bfa:	ea93 0f0c 	teqne	r3, ip
 8000bfe:	d06f      	beq.n	8000ce0 <__aeabi_fmul+0xf8>
 8000c00:	441a      	add	r2, r3
 8000c02:	ea80 0c01 	eor.w	ip, r0, r1
 8000c06:	0240      	lsls	r0, r0, #9
 8000c08:	bf18      	it	ne
 8000c0a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c0e:	d01e      	beq.n	8000c4e <__aeabi_fmul+0x66>
 8000c10:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c14:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c18:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c1c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c24:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c28:	bf3e      	ittt	cc
 8000c2a:	0049      	lslcc	r1, r1, #1
 8000c2c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c30:	005b      	lslcc	r3, r3, #1
 8000c32:	ea40 0001 	orr.w	r0, r0, r1
 8000c36:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c3a:	2afd      	cmp	r2, #253	; 0xfd
 8000c3c:	d81d      	bhi.n	8000c7a <__aeabi_fmul+0x92>
 8000c3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c46:	bf08      	it	eq
 8000c48:	f020 0001 	biceq.w	r0, r0, #1
 8000c4c:	4770      	bx	lr
 8000c4e:	f090 0f00 	teq	r0, #0
 8000c52:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c56:	bf08      	it	eq
 8000c58:	0249      	lsleq	r1, r1, #9
 8000c5a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c5e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c62:	3a7f      	subs	r2, #127	; 0x7f
 8000c64:	bfc2      	ittt	gt
 8000c66:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c6a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c6e:	4770      	bxgt	lr
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	f04f 0300 	mov.w	r3, #0
 8000c78:	3a01      	subs	r2, #1
 8000c7a:	dc5d      	bgt.n	8000d38 <__aeabi_fmul+0x150>
 8000c7c:	f112 0f19 	cmn.w	r2, #25
 8000c80:	bfdc      	itt	le
 8000c82:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c86:	4770      	bxle	lr
 8000c88:	f1c2 0200 	rsb	r2, r2, #0
 8000c8c:	0041      	lsls	r1, r0, #1
 8000c8e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c92:	f1c2 0220 	rsb	r2, r2, #32
 8000c96:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c9a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c9e:	f140 0000 	adc.w	r0, r0, #0
 8000ca2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ca6:	bf08      	it	eq
 8000ca8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cac:	4770      	bx	lr
 8000cae:	f092 0f00 	teq	r2, #0
 8000cb2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000cb6:	bf02      	ittt	eq
 8000cb8:	0040      	lsleq	r0, r0, #1
 8000cba:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000cbe:	3a01      	subeq	r2, #1
 8000cc0:	d0f9      	beq.n	8000cb6 <__aeabi_fmul+0xce>
 8000cc2:	ea40 000c 	orr.w	r0, r0, ip
 8000cc6:	f093 0f00 	teq	r3, #0
 8000cca:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cce:	bf02      	ittt	eq
 8000cd0:	0049      	lsleq	r1, r1, #1
 8000cd2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000cd6:	3b01      	subeq	r3, #1
 8000cd8:	d0f9      	beq.n	8000cce <__aeabi_fmul+0xe6>
 8000cda:	ea41 010c 	orr.w	r1, r1, ip
 8000cde:	e78f      	b.n	8000c00 <__aeabi_fmul+0x18>
 8000ce0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ce4:	ea92 0f0c 	teq	r2, ip
 8000ce8:	bf18      	it	ne
 8000cea:	ea93 0f0c 	teqne	r3, ip
 8000cee:	d00a      	beq.n	8000d06 <__aeabi_fmul+0x11e>
 8000cf0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cf4:	bf18      	it	ne
 8000cf6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cfa:	d1d8      	bne.n	8000cae <__aeabi_fmul+0xc6>
 8000cfc:	ea80 0001 	eor.w	r0, r0, r1
 8000d00:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d04:	4770      	bx	lr
 8000d06:	f090 0f00 	teq	r0, #0
 8000d0a:	bf17      	itett	ne
 8000d0c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d10:	4608      	moveq	r0, r1
 8000d12:	f091 0f00 	teqne	r1, #0
 8000d16:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d1a:	d014      	beq.n	8000d46 <__aeabi_fmul+0x15e>
 8000d1c:	ea92 0f0c 	teq	r2, ip
 8000d20:	d101      	bne.n	8000d26 <__aeabi_fmul+0x13e>
 8000d22:	0242      	lsls	r2, r0, #9
 8000d24:	d10f      	bne.n	8000d46 <__aeabi_fmul+0x15e>
 8000d26:	ea93 0f0c 	teq	r3, ip
 8000d2a:	d103      	bne.n	8000d34 <__aeabi_fmul+0x14c>
 8000d2c:	024b      	lsls	r3, r1, #9
 8000d2e:	bf18      	it	ne
 8000d30:	4608      	movne	r0, r1
 8000d32:	d108      	bne.n	8000d46 <__aeabi_fmul+0x15e>
 8000d34:	ea80 0001 	eor.w	r0, r0, r1
 8000d38:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d44:	4770      	bx	lr
 8000d46:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d4a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d4e:	4770      	bx	lr

08000d50 <__aeabi_fdiv>:
 8000d50:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d54:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d58:	bf1e      	ittt	ne
 8000d5a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d5e:	ea92 0f0c 	teqne	r2, ip
 8000d62:	ea93 0f0c 	teqne	r3, ip
 8000d66:	d069      	beq.n	8000e3c <__aeabi_fdiv+0xec>
 8000d68:	eba2 0203 	sub.w	r2, r2, r3
 8000d6c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d70:	0249      	lsls	r1, r1, #9
 8000d72:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d76:	d037      	beq.n	8000de8 <__aeabi_fdiv+0x98>
 8000d78:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d7c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d80:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d84:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	bf38      	it	cc
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d92:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d96:	428b      	cmp	r3, r1
 8000d98:	bf24      	itt	cs
 8000d9a:	1a5b      	subcs	r3, r3, r1
 8000d9c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000da0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000da4:	bf24      	itt	cs
 8000da6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000daa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dae:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000db2:	bf24      	itt	cs
 8000db4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000db8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000dbc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000dc0:	bf24      	itt	cs
 8000dc2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000dc6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dca:	011b      	lsls	r3, r3, #4
 8000dcc:	bf18      	it	ne
 8000dce:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000dd2:	d1e0      	bne.n	8000d96 <__aeabi_fdiv+0x46>
 8000dd4:	2afd      	cmp	r2, #253	; 0xfd
 8000dd6:	f63f af50 	bhi.w	8000c7a <__aeabi_fmul+0x92>
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de0:	bf08      	it	eq
 8000de2:	f020 0001 	biceq.w	r0, r0, #1
 8000de6:	4770      	bx	lr
 8000de8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dec:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000df0:	327f      	adds	r2, #127	; 0x7f
 8000df2:	bfc2      	ittt	gt
 8000df4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000df8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dfc:	4770      	bxgt	lr
 8000dfe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e02:	f04f 0300 	mov.w	r3, #0
 8000e06:	3a01      	subs	r2, #1
 8000e08:	e737      	b.n	8000c7a <__aeabi_fmul+0x92>
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fdiv+0xc2>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fdiv+0xda>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e795      	b.n	8000d68 <__aeabi_fdiv+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	d108      	bne.n	8000e58 <__aeabi_fdiv+0x108>
 8000e46:	0242      	lsls	r2, r0, #9
 8000e48:	f47f af7d 	bne.w	8000d46 <__aeabi_fmul+0x15e>
 8000e4c:	ea93 0f0c 	teq	r3, ip
 8000e50:	f47f af70 	bne.w	8000d34 <__aeabi_fmul+0x14c>
 8000e54:	4608      	mov	r0, r1
 8000e56:	e776      	b.n	8000d46 <__aeabi_fmul+0x15e>
 8000e58:	ea93 0f0c 	teq	r3, ip
 8000e5c:	d104      	bne.n	8000e68 <__aeabi_fdiv+0x118>
 8000e5e:	024b      	lsls	r3, r1, #9
 8000e60:	f43f af4c 	beq.w	8000cfc <__aeabi_fmul+0x114>
 8000e64:	4608      	mov	r0, r1
 8000e66:	e76e      	b.n	8000d46 <__aeabi_fmul+0x15e>
 8000e68:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e6c:	bf18      	it	ne
 8000e6e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e72:	d1ca      	bne.n	8000e0a <__aeabi_fdiv+0xba>
 8000e74:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e78:	f47f af5c 	bne.w	8000d34 <__aeabi_fmul+0x14c>
 8000e7c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e80:	f47f af3c 	bne.w	8000cfc <__aeabi_fmul+0x114>
 8000e84:	e75f      	b.n	8000d46 <__aeabi_fmul+0x15e>
 8000e86:	bf00      	nop

08000e88 <__gesf2>:
 8000e88:	f04f 3cff 	mov.w	ip, #4294967295
 8000e8c:	e006      	b.n	8000e9c <__cmpsf2+0x4>
 8000e8e:	bf00      	nop

08000e90 <__lesf2>:
 8000e90:	f04f 0c01 	mov.w	ip, #1
 8000e94:	e002      	b.n	8000e9c <__cmpsf2+0x4>
 8000e96:	bf00      	nop

08000e98 <__cmpsf2>:
 8000e98:	f04f 0c01 	mov.w	ip, #1
 8000e9c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ea0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ea4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ea8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000eac:	bf18      	it	ne
 8000eae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000eb2:	d011      	beq.n	8000ed8 <__cmpsf2+0x40>
 8000eb4:	b001      	add	sp, #4
 8000eb6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000eba:	bf18      	it	ne
 8000ebc:	ea90 0f01 	teqne	r0, r1
 8000ec0:	bf58      	it	pl
 8000ec2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ec6:	bf88      	it	hi
 8000ec8:	17c8      	asrhi	r0, r1, #31
 8000eca:	bf38      	it	cc
 8000ecc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ed0:	bf18      	it	ne
 8000ed2:	f040 0001 	orrne.w	r0, r0, #1
 8000ed6:	4770      	bx	lr
 8000ed8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000edc:	d102      	bne.n	8000ee4 <__cmpsf2+0x4c>
 8000ede:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ee2:	d105      	bne.n	8000ef0 <__cmpsf2+0x58>
 8000ee4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ee8:	d1e4      	bne.n	8000eb4 <__cmpsf2+0x1c>
 8000eea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eee:	d0e1      	beq.n	8000eb4 <__cmpsf2+0x1c>
 8000ef0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_cfrcmple>:
 8000ef8:	4684      	mov	ip, r0
 8000efa:	4608      	mov	r0, r1
 8000efc:	4661      	mov	r1, ip
 8000efe:	e7ff      	b.n	8000f00 <__aeabi_cfcmpeq>

08000f00 <__aeabi_cfcmpeq>:
 8000f00:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f02:	f7ff ffc9 	bl	8000e98 <__cmpsf2>
 8000f06:	2800      	cmp	r0, #0
 8000f08:	bf48      	it	mi
 8000f0a:	f110 0f00 	cmnmi.w	r0, #0
 8000f0e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f10 <__aeabi_fcmpeq>:
 8000f10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f14:	f7ff fff4 	bl	8000f00 <__aeabi_cfcmpeq>
 8000f18:	bf0c      	ite	eq
 8000f1a:	2001      	moveq	r0, #1
 8000f1c:	2000      	movne	r0, #0
 8000f1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f22:	bf00      	nop

08000f24 <__aeabi_fcmplt>:
 8000f24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f28:	f7ff ffea 	bl	8000f00 <__aeabi_cfcmpeq>
 8000f2c:	bf34      	ite	cc
 8000f2e:	2001      	movcc	r0, #1
 8000f30:	2000      	movcs	r0, #0
 8000f32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f36:	bf00      	nop

08000f38 <__aeabi_fcmple>:
 8000f38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f3c:	f7ff ffe0 	bl	8000f00 <__aeabi_cfcmpeq>
 8000f40:	bf94      	ite	ls
 8000f42:	2001      	movls	r0, #1
 8000f44:	2000      	movhi	r0, #0
 8000f46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f4a:	bf00      	nop

08000f4c <__aeabi_fcmpge>:
 8000f4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f50:	f7ff ffd2 	bl	8000ef8 <__aeabi_cfrcmple>
 8000f54:	bf94      	ite	ls
 8000f56:	2001      	movls	r0, #1
 8000f58:	2000      	movhi	r0, #0
 8000f5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f5e:	bf00      	nop

08000f60 <__aeabi_fcmpgt>:
 8000f60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f64:	f7ff ffc8 	bl	8000ef8 <__aeabi_cfrcmple>
 8000f68:	bf34      	ite	cc
 8000f6a:	2001      	movcc	r0, #1
 8000f6c:	2000      	movcs	r0, #0
 8000f6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f72:	bf00      	nop

08000f74 <__aeabi_fcmpun>:
 8000f74:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f78:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f7c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f80:	d102      	bne.n	8000f88 <__aeabi_fcmpun+0x14>
 8000f82:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f86:	d108      	bne.n	8000f9a <__aeabi_fcmpun+0x26>
 8000f88:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f8c:	d102      	bne.n	8000f94 <__aeabi_fcmpun+0x20>
 8000f8e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f92:	d102      	bne.n	8000f9a <__aeabi_fcmpun+0x26>
 8000f94:	f04f 0000 	mov.w	r0, #0
 8000f98:	4770      	bx	lr
 8000f9a:	f04f 0001 	mov.w	r0, #1
 8000f9e:	4770      	bx	lr

08000fa0 <__aeabi_f2uiz>:
 8000fa0:	0042      	lsls	r2, r0, #1
 8000fa2:	d20e      	bcs.n	8000fc2 <__aeabi_f2uiz+0x22>
 8000fa4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fa8:	d30b      	bcc.n	8000fc2 <__aeabi_f2uiz+0x22>
 8000faa:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fae:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fb2:	d409      	bmi.n	8000fc8 <__aeabi_f2uiz+0x28>
 8000fb4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fb8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fbc:	fa23 f002 	lsr.w	r0, r3, r2
 8000fc0:	4770      	bx	lr
 8000fc2:	f04f 0000 	mov.w	r0, #0
 8000fc6:	4770      	bx	lr
 8000fc8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fcc:	d101      	bne.n	8000fd2 <__aeabi_f2uiz+0x32>
 8000fce:	0242      	lsls	r2, r0, #9
 8000fd0:	d102      	bne.n	8000fd8 <__aeabi_f2uiz+0x38>
 8000fd2:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd6:	4770      	bx	lr
 8000fd8:	f04f 0000 	mov.w	r0, #0
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop

08000fe0 <BP_Initialisation>:
} BatteryPack;


BatteryPack batteryPack;

void BP_Initialisation(){
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0

	for(uint8_t i=0;i<NbCells;i++)
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	71fb      	strb	r3, [r7, #7]
 8000fea:	e008      	b.n	8000ffe <BP_Initialisation+0x1e>
	{
	    batteryPack.Temperature[i]=0;
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	4a19      	ldr	r2, [pc, #100]	; (8001054 <BP_Initialisation+0x74>)
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	4413      	add	r3, r2
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	805a      	strh	r2, [r3, #2]
	for(uint8_t i=0;i<NbCells;i++)
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	71fb      	strb	r3, [r7, #7]
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	2b8f      	cmp	r3, #143	; 0x8f
 8001002:	d9f3      	bls.n	8000fec <BP_Initialisation+0xc>
	}

	batteryPack.id=1;
 8001004:	4b13      	ldr	r3, [pc, #76]	; (8001054 <BP_Initialisation+0x74>)
 8001006:	2201      	movs	r2, #1
 8001008:	701a      	strb	r2, [r3, #0]
	batteryPack.State = INIT;
 800100a:	4b12      	ldr	r3, [pc, #72]	; (8001054 <BP_Initialisation+0x74>)
 800100c:	2203      	movs	r2, #3
 800100e:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
	batteryPack.MaxTemp=0;
 8001012:	4b10      	ldr	r3, [pc, #64]	; (8001054 <BP_Initialisation+0x74>)
 8001014:	2200      	movs	r2, #0
 8001016:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
	batteryPack.SecondMaxTemp=0;
 800101a:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <BP_Initialisation+0x74>)
 800101c:	2200      	movs	r2, #0
 800101e:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
	batteryPack.ThirdMaxTemp=0;
 8001022:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <BP_Initialisation+0x74>)
 8001024:	2200      	movs	r2, #0
 8001026:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
	batteryPack.LowTemp=100;
 800102a:	4b0a      	ldr	r3, [pc, #40]	; (8001054 <BP_Initialisation+0x74>)
 800102c:	2264      	movs	r2, #100	; 0x64
 800102e:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
	batteryPack.MaxTempPtc=0;
 8001032:	4b08      	ldr	r3, [pc, #32]	; (8001054 <BP_Initialisation+0x74>)
 8001034:	2200      	movs	r2, #0
 8001036:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127
	batteryPack.AverageMatrixTemp=0;
 800103a:	4b06      	ldr	r3, [pc, #24]	; (8001054 <BP_Initialisation+0x74>)
 800103c:	2200      	movs	r2, #0
 800103e:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
	batteryPack.AveragePtcTemp=0;
 8001042:	4b04      	ldr	r3, [pc, #16]	; (8001054 <BP_Initialisation+0x74>)
 8001044:	2200      	movs	r2, #0
 8001046:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr
 8001054:	20000128 	.word	0x20000128

08001058 <BP_Reset>:

void BP_Reset(){
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
	batteryPack.State = INIT;
 800105c:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <BP_Reset+0x4c>)
 800105e:	2203      	movs	r2, #3
 8001060:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
	batteryPack.MaxTemp=0;
 8001064:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <BP_Reset+0x4c>)
 8001066:	2200      	movs	r2, #0
 8001068:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
	batteryPack.SecondMaxTemp=0;
 800106c:	4b0d      	ldr	r3, [pc, #52]	; (80010a4 <BP_Reset+0x4c>)
 800106e:	2200      	movs	r2, #0
 8001070:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
	batteryPack.ThirdMaxTemp=0;
 8001074:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <BP_Reset+0x4c>)
 8001076:	2200      	movs	r2, #0
 8001078:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
	batteryPack.LowTemp=100;
 800107c:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <BP_Reset+0x4c>)
 800107e:	2264      	movs	r2, #100	; 0x64
 8001080:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
	batteryPack.MaxTempPtc=0;
 8001084:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <BP_Reset+0x4c>)
 8001086:	2200      	movs	r2, #0
 8001088:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127
	batteryPack.AverageMatrixTemp=0;
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <BP_Reset+0x4c>)
 800108e:	2200      	movs	r2, #0
 8001090:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
	batteryPack.AveragePtcTemp=0;
 8001094:	4b03      	ldr	r3, [pc, #12]	; (80010a4 <BP_Reset+0x4c>)
 8001096:	2200      	movs	r2, #0
 8001098:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	bc80      	pop	{r7}
 80010a2:	4770      	bx	lr
 80010a4:	20000128 	.word	0x20000128

080010a8 <BP_ReadMatrix>:

void BP_ReadMatrix()
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
	// Change the adc channel
	ChangeChannel(&hadc1,MATRIXCHANNEL);
 80010ae:	210f      	movs	r1, #15
 80010b0:	48b2      	ldr	r0, [pc, #712]	; (800137c <BP_ReadMatrix+0x2d4>)
 80010b2:	f000 fe43 	bl	8001d3c <ChangeChannel>
	uint16_t SumTemp=0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	80fb      	strh	r3, [r7, #6]
	for (uint8_t j=0;j<NbColonne;j++)
 80010ba:	2300      	movs	r3, #0
 80010bc:	717b      	strb	r3, [r7, #5]
 80010be:	e155      	b.n	800136c <BP_ReadMatrix+0x2c4>
	{
		// Change the multiplexer to read every temp on the matrix
		MUXCONTROL2(j);
 80010c0:	797b      	ldrb	r3, [r7, #5]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f000 fc3e 	bl	8001944 <MUXCONTROL2>
		for (uint8_t i=0;i<NbDecode;i++)
 80010c8:	2300      	movs	r3, #0
 80010ca:	713b      	strb	r3, [r7, #4]
 80010cc:	e13d      	b.n	800134a <BP_ReadMatrix+0x2a2>
		{
			// Change the decoder to read every temp on the matrix
			DECCONTROL(i);
 80010ce:	793b      	ldrb	r3, [r7, #4]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f000 fcaf 	bl	8001a34 <DECCONTROL>

			//Read each temp on the matrix
			HAL_ADC_Start(&hadc1);
 80010d6:	48a9      	ldr	r0, [pc, #676]	; (800137c <BP_ReadMatrix+0x2d4>)
 80010d8:	f001 fa1a 	bl	8002510 <HAL_ADC_Start>
			if (HAL_ADC_PollForConversion(&hadc1,10)==HAL_OK)
 80010dc:	210a      	movs	r1, #10
 80010de:	48a7      	ldr	r0, [pc, #668]	; (800137c <BP_ReadMatrix+0x2d4>)
 80010e0:	f001 fac4 	bl	800266c <HAL_ADC_PollForConversion>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d115      	bne.n	8001116 <BP_ReadMatrix+0x6e>
					batteryPack.Temperature[i+(NbDecode*j)]=TempConvNTC(HAL_ADC_GetValue(&hadc1));
 80010ea:	48a4      	ldr	r0, [pc, #656]	; (800137c <BP_ReadMatrix+0x2d4>)
 80010ec:	f001 fbb8 	bl	8002860 <HAL_ADC_GetValue>
 80010f0:	4603      	mov	r3, r0
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 fa1c 	bl	8001530 <TempConvNTC>
 80010f8:	4603      	mov	r3, r0
 80010fa:	4618      	mov	r0, r3
 80010fc:	7939      	ldrb	r1, [r7, #4]
 80010fe:	797a      	ldrb	r2, [r7, #5]
 8001100:	4613      	mov	r3, r2
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	4413      	add	r3, r2
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	440b      	add	r3, r1
 800110a:	b281      	uxth	r1, r0
 800110c:	4a9c      	ldr	r2, [pc, #624]	; (8001380 <BP_ReadMatrix+0x2d8>)
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	4413      	add	r3, r2
 8001112:	460a      	mov	r2, r1
 8001114:	805a      	strh	r2, [r3, #2]

			//Sum of matrix temperature to make the average
			SumTemp=SumTemp+batteryPack.Temperature[i+(NbDecode*j)];
 8001116:	7939      	ldrb	r1, [r7, #4]
 8001118:	797a      	ldrb	r2, [r7, #5]
 800111a:	4613      	mov	r3, r2
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	4413      	add	r3, r2
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	440b      	add	r3, r1
 8001124:	4a96      	ldr	r2, [pc, #600]	; (8001380 <BP_ReadMatrix+0x2d8>)
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	4413      	add	r3, r2
 800112a:	885a      	ldrh	r2, [r3, #2]
 800112c:	88fb      	ldrh	r3, [r7, #6]
 800112e:	4413      	add	r3, r2
 8001130:	80fb      	strh	r3, [r7, #6]

			//Check the state of each matrix temperature
			if (batteryPack.Temperature[i+(NbDecode*j)]>=DangerTemp)
 8001132:	7939      	ldrb	r1, [r7, #4]
 8001134:	797a      	ldrb	r2, [r7, #5]
 8001136:	4613      	mov	r3, r2
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	4413      	add	r3, r2
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	440b      	add	r3, r1
 8001140:	4a8f      	ldr	r2, [pc, #572]	; (8001380 <BP_ReadMatrix+0x2d8>)
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	4413      	add	r3, r2
 8001146:	885b      	ldrh	r3, [r3, #2]
 8001148:	2b39      	cmp	r3, #57	; 0x39
 800114a:	d904      	bls.n	8001156 <BP_ReadMatrix+0xae>
				batteryPack.State = DANGER;
 800114c:	4b8c      	ldr	r3, [pc, #560]	; (8001380 <BP_ReadMatrix+0x2d8>)
 800114e:	2200      	movs	r2, #0
 8001150:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
 8001154:	e024      	b.n	80011a0 <BP_ReadMatrix+0xf8>
			else if(batteryPack.Temperature[i+(NbDecode*j)]>=WarningTemp && batteryPack.State != DANGER)
 8001156:	7939      	ldrb	r1, [r7, #4]
 8001158:	797a      	ldrb	r2, [r7, #5]
 800115a:	4613      	mov	r3, r2
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	4413      	add	r3, r2
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	440b      	add	r3, r1
 8001164:	4a86      	ldr	r2, [pc, #536]	; (8001380 <BP_ReadMatrix+0x2d8>)
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	4413      	add	r3, r2
 800116a:	885b      	ldrh	r3, [r3, #2]
 800116c:	2b31      	cmp	r3, #49	; 0x31
 800116e:	d909      	bls.n	8001184 <BP_ReadMatrix+0xdc>
 8001170:	4b83      	ldr	r3, [pc, #524]	; (8001380 <BP_ReadMatrix+0x2d8>)
 8001172:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 8001176:	2b00      	cmp	r3, #0
 8001178:	d004      	beq.n	8001184 <BP_ReadMatrix+0xdc>
				batteryPack.State = WARNING;
 800117a:	4b81      	ldr	r3, [pc, #516]	; (8001380 <BP_ReadMatrix+0x2d8>)
 800117c:	2201      	movs	r2, #1
 800117e:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
 8001182:	e00d      	b.n	80011a0 <BP_ReadMatrix+0xf8>
			else if (batteryPack.State != DANGER || batteryPack.State != WARNING)
 8001184:	4b7e      	ldr	r3, [pc, #504]	; (8001380 <BP_ReadMatrix+0x2d8>)
 8001186:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 800118a:	2b00      	cmp	r3, #0
 800118c:	d104      	bne.n	8001198 <BP_ReadMatrix+0xf0>
 800118e:	4b7c      	ldr	r3, [pc, #496]	; (8001380 <BP_ReadMatrix+0x2d8>)
 8001190:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 8001194:	2b01      	cmp	r3, #1
 8001196:	d003      	beq.n	80011a0 <BP_ReadMatrix+0xf8>
				batteryPack.State = NORMAL;
 8001198:	4b79      	ldr	r3, [pc, #484]	; (8001380 <BP_ReadMatrix+0x2d8>)
 800119a:	2202      	movs	r2, #2
 800119c:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122

			//Check the third maximum temperature of matrix
			if (batteryPack.Temperature[i+(NbDecode*j)]>batteryPack.SecondMaxTemp || batteryPack.Temperature[i+(NbDecode*j)]>batteryPack.ThirdMaxTemp)
 80011a0:	7939      	ldrb	r1, [r7, #4]
 80011a2:	797a      	ldrb	r2, [r7, #5]
 80011a4:	4613      	mov	r3, r2
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	4413      	add	r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	440b      	add	r3, r1
 80011ae:	4a74      	ldr	r2, [pc, #464]	; (8001380 <BP_ReadMatrix+0x2d8>)
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	4413      	add	r3, r2
 80011b4:	885a      	ldrh	r2, [r3, #2]
 80011b6:	4b72      	ldr	r3, [pc, #456]	; (8001380 <BP_ReadMatrix+0x2d8>)
 80011b8:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 80011bc:	b29b      	uxth	r3, r3
 80011be:	429a      	cmp	r2, r3
 80011c0:	d810      	bhi.n	80011e4 <BP_ReadMatrix+0x13c>
 80011c2:	7939      	ldrb	r1, [r7, #4]
 80011c4:	797a      	ldrb	r2, [r7, #5]
 80011c6:	4613      	mov	r3, r2
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	4413      	add	r3, r2
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	440b      	add	r3, r1
 80011d0:	4a6b      	ldr	r2, [pc, #428]	; (8001380 <BP_ReadMatrix+0x2d8>)
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	4413      	add	r3, r2
 80011d6:	885a      	ldrh	r2, [r3, #2]
 80011d8:	4b69      	ldr	r3, [pc, #420]	; (8001380 <BP_ReadMatrix+0x2d8>)
 80011da:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
 80011de:	b29b      	uxth	r3, r3
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d926      	bls.n	8001232 <BP_ReadMatrix+0x18a>
			{
				if(batteryPack.Temperature[i+(NbDecode*j)]>batteryPack.SecondMaxTemp)
 80011e4:	7939      	ldrb	r1, [r7, #4]
 80011e6:	797a      	ldrb	r2, [r7, #5]
 80011e8:	4613      	mov	r3, r2
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	4413      	add	r3, r2
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	440b      	add	r3, r1
 80011f2:	4a63      	ldr	r2, [pc, #396]	; (8001380 <BP_ReadMatrix+0x2d8>)
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	4413      	add	r3, r2
 80011f8:	885a      	ldrh	r2, [r3, #2]
 80011fa:	4b61      	ldr	r3, [pc, #388]	; (8001380 <BP_ReadMatrix+0x2d8>)
 80011fc:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8001200:	b29b      	uxth	r3, r3
 8001202:	429a      	cmp	r2, r3
 8001204:	d906      	bls.n	8001214 <BP_ReadMatrix+0x16c>
					batteryPack.ThirdMaxTemp=batteryPack.SecondMaxTemp;
 8001206:	4b5e      	ldr	r3, [pc, #376]	; (8001380 <BP_ReadMatrix+0x2d8>)
 8001208:	f893 2124 	ldrb.w	r2, [r3, #292]	; 0x124
 800120c:	4b5c      	ldr	r3, [pc, #368]	; (8001380 <BP_ReadMatrix+0x2d8>)
 800120e:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
 8001212:	e00e      	b.n	8001232 <BP_ReadMatrix+0x18a>
				else
					batteryPack.ThirdMaxTemp=batteryPack.Temperature[i+(NbDecode*j)];
 8001214:	7939      	ldrb	r1, [r7, #4]
 8001216:	797a      	ldrb	r2, [r7, #5]
 8001218:	4613      	mov	r3, r2
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	4413      	add	r3, r2
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	440b      	add	r3, r1
 8001222:	4a57      	ldr	r2, [pc, #348]	; (8001380 <BP_ReadMatrix+0x2d8>)
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	4413      	add	r3, r2
 8001228:	885b      	ldrh	r3, [r3, #2]
 800122a:	b2da      	uxtb	r2, r3
 800122c:	4b54      	ldr	r3, [pc, #336]	; (8001380 <BP_ReadMatrix+0x2d8>)
 800122e:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
			}
			//Check the second maximum temperature of matrix
			if (batteryPack.Temperature[i+(NbDecode*j)]>batteryPack.MaxTemp || batteryPack.Temperature[i+(NbDecode*j)]>batteryPack.SecondMaxTemp)
 8001232:	7939      	ldrb	r1, [r7, #4]
 8001234:	797a      	ldrb	r2, [r7, #5]
 8001236:	4613      	mov	r3, r2
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	4413      	add	r3, r2
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	440b      	add	r3, r1
 8001240:	4a4f      	ldr	r2, [pc, #316]	; (8001380 <BP_ReadMatrix+0x2d8>)
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	4413      	add	r3, r2
 8001246:	885a      	ldrh	r2, [r3, #2]
 8001248:	4b4d      	ldr	r3, [pc, #308]	; (8001380 <BP_ReadMatrix+0x2d8>)
 800124a:	f893 3123 	ldrb.w	r3, [r3, #291]	; 0x123
 800124e:	b29b      	uxth	r3, r3
 8001250:	429a      	cmp	r2, r3
 8001252:	d810      	bhi.n	8001276 <BP_ReadMatrix+0x1ce>
 8001254:	7939      	ldrb	r1, [r7, #4]
 8001256:	797a      	ldrb	r2, [r7, #5]
 8001258:	4613      	mov	r3, r2
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	4413      	add	r3, r2
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	440b      	add	r3, r1
 8001262:	4a47      	ldr	r2, [pc, #284]	; (8001380 <BP_ReadMatrix+0x2d8>)
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	4413      	add	r3, r2
 8001268:	885a      	ldrh	r2, [r3, #2]
 800126a:	4b45      	ldr	r3, [pc, #276]	; (8001380 <BP_ReadMatrix+0x2d8>)
 800126c:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8001270:	b29b      	uxth	r3, r3
 8001272:	429a      	cmp	r2, r3
 8001274:	d926      	bls.n	80012c4 <BP_ReadMatrix+0x21c>
			{
				if(batteryPack.Temperature[i+(NbDecode*j)]>batteryPack.MaxTemp)
 8001276:	7939      	ldrb	r1, [r7, #4]
 8001278:	797a      	ldrb	r2, [r7, #5]
 800127a:	4613      	mov	r3, r2
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	4413      	add	r3, r2
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	440b      	add	r3, r1
 8001284:	4a3e      	ldr	r2, [pc, #248]	; (8001380 <BP_ReadMatrix+0x2d8>)
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	4413      	add	r3, r2
 800128a:	885a      	ldrh	r2, [r3, #2]
 800128c:	4b3c      	ldr	r3, [pc, #240]	; (8001380 <BP_ReadMatrix+0x2d8>)
 800128e:	f893 3123 	ldrb.w	r3, [r3, #291]	; 0x123
 8001292:	b29b      	uxth	r3, r3
 8001294:	429a      	cmp	r2, r3
 8001296:	d906      	bls.n	80012a6 <BP_ReadMatrix+0x1fe>
				batteryPack.SecondMaxTemp=batteryPack.MaxTemp;
 8001298:	4b39      	ldr	r3, [pc, #228]	; (8001380 <BP_ReadMatrix+0x2d8>)
 800129a:	f893 2123 	ldrb.w	r2, [r3, #291]	; 0x123
 800129e:	4b38      	ldr	r3, [pc, #224]	; (8001380 <BP_ReadMatrix+0x2d8>)
 80012a0:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
 80012a4:	e00e      	b.n	80012c4 <BP_ReadMatrix+0x21c>
				else
				batteryPack.SecondMaxTemp=batteryPack.Temperature[i+(NbDecode*j)];
 80012a6:	7939      	ldrb	r1, [r7, #4]
 80012a8:	797a      	ldrb	r2, [r7, #5]
 80012aa:	4613      	mov	r3, r2
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	4413      	add	r3, r2
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	440b      	add	r3, r1
 80012b4:	4a32      	ldr	r2, [pc, #200]	; (8001380 <BP_ReadMatrix+0x2d8>)
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	4413      	add	r3, r2
 80012ba:	885b      	ldrh	r3, [r3, #2]
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	4b30      	ldr	r3, [pc, #192]	; (8001380 <BP_ReadMatrix+0x2d8>)
 80012c0:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
			}
			//Check the maximum temperature of matrix
			if (batteryPack.Temperature[i+(NbDecode*j)]>batteryPack.MaxTemp)
 80012c4:	7939      	ldrb	r1, [r7, #4]
 80012c6:	797a      	ldrb	r2, [r7, #5]
 80012c8:	4613      	mov	r3, r2
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	4413      	add	r3, r2
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	440b      	add	r3, r1
 80012d2:	4a2b      	ldr	r2, [pc, #172]	; (8001380 <BP_ReadMatrix+0x2d8>)
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	4413      	add	r3, r2
 80012d8:	885a      	ldrh	r2, [r3, #2]
 80012da:	4b29      	ldr	r3, [pc, #164]	; (8001380 <BP_ReadMatrix+0x2d8>)
 80012dc:	f893 3123 	ldrb.w	r3, [r3, #291]	; 0x123
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d90e      	bls.n	8001304 <BP_ReadMatrix+0x25c>
				batteryPack.MaxTemp=batteryPack.Temperature[i+(NbDecode*j)];
 80012e6:	7939      	ldrb	r1, [r7, #4]
 80012e8:	797a      	ldrb	r2, [r7, #5]
 80012ea:	4613      	mov	r3, r2
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	4413      	add	r3, r2
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	440b      	add	r3, r1
 80012f4:	4a22      	ldr	r2, [pc, #136]	; (8001380 <BP_ReadMatrix+0x2d8>)
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	4413      	add	r3, r2
 80012fa:	885b      	ldrh	r3, [r3, #2]
 80012fc:	b2da      	uxtb	r2, r3
 80012fe:	4b20      	ldr	r3, [pc, #128]	; (8001380 <BP_ReadMatrix+0x2d8>)
 8001300:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
			//Check the lowest temperature of the matrix
			if(batteryPack.Temperature[i+(NbDecode*j)]<batteryPack.LowTemp)
 8001304:	7939      	ldrb	r1, [r7, #4]
 8001306:	797a      	ldrb	r2, [r7, #5]
 8001308:	4613      	mov	r3, r2
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	4413      	add	r3, r2
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	440b      	add	r3, r1
 8001312:	4a1b      	ldr	r2, [pc, #108]	; (8001380 <BP_ReadMatrix+0x2d8>)
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	4413      	add	r3, r2
 8001318:	885a      	ldrh	r2, [r3, #2]
 800131a:	4b19      	ldr	r3, [pc, #100]	; (8001380 <BP_ReadMatrix+0x2d8>)
 800131c:	f893 3126 	ldrb.w	r3, [r3, #294]	; 0x126
 8001320:	b29b      	uxth	r3, r3
 8001322:	429a      	cmp	r2, r3
 8001324:	d20e      	bcs.n	8001344 <BP_ReadMatrix+0x29c>
				batteryPack.LowTemp=batteryPack.Temperature[i+(NbDecode*j)];
 8001326:	7939      	ldrb	r1, [r7, #4]
 8001328:	797a      	ldrb	r2, [r7, #5]
 800132a:	4613      	mov	r3, r2
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	4413      	add	r3, r2
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	440b      	add	r3, r1
 8001334:	4a12      	ldr	r2, [pc, #72]	; (8001380 <BP_ReadMatrix+0x2d8>)
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	4413      	add	r3, r2
 800133a:	885b      	ldrh	r3, [r3, #2]
 800133c:	b2da      	uxtb	r2, r3
 800133e:	4b10      	ldr	r3, [pc, #64]	; (8001380 <BP_ReadMatrix+0x2d8>)
 8001340:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
		for (uint8_t i=0;i<NbDecode;i++)
 8001344:	793b      	ldrb	r3, [r7, #4]
 8001346:	3301      	adds	r3, #1
 8001348:	713b      	strb	r3, [r7, #4]
 800134a:	793b      	ldrb	r3, [r7, #4]
 800134c:	2b0b      	cmp	r3, #11
 800134e:	f67f aebe 	bls.w	80010ce <BP_ReadMatrix+0x26>
		}
		//Average of temperature for the matrix
		batteryPack.AverageMatrixTemp=SumTemp/(NbCells-NbPTC);
 8001352:	88fb      	ldrh	r3, [r7, #6]
 8001354:	4a0b      	ldr	r2, [pc, #44]	; (8001384 <BP_ReadMatrix+0x2dc>)
 8001356:	fba2 2303 	umull	r2, r3, r2, r3
 800135a:	095b      	lsrs	r3, r3, #5
 800135c:	b29b      	uxth	r3, r3
 800135e:	b2da      	uxtb	r2, r3
 8001360:	4b07      	ldr	r3, [pc, #28]	; (8001380 <BP_ReadMatrix+0x2d8>)
 8001362:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
	for (uint8_t j=0;j<NbColonne;j++)
 8001366:	797b      	ldrb	r3, [r7, #5]
 8001368:	3301      	adds	r3, #1
 800136a:	717b      	strb	r3, [r7, #5]
 800136c:	797b      	ldrb	r3, [r7, #5]
 800136e:	2b0a      	cmp	r3, #10
 8001370:	f67f aea6 	bls.w	80010c0 <BP_ReadMatrix+0x18>
	}
}
 8001374:	bf00      	nop
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	200000c4 	.word	0x200000c4
 8001380:	20000128 	.word	0x20000128
 8001384:	3e0f83e1 	.word	0x3e0f83e1

08001388 <BP_ReadPTC>:
void BP_ReadPTC()
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
	uint16_t SumTemp=0;
 800138e:	2300      	movs	r3, #0
 8001390:	80fb      	strh	r3, [r7, #6]
	// Change the adc channel
	ChangeChannel(&hadc1,PTCCHANNEL);
 8001392:	2100      	movs	r1, #0
 8001394:	4842      	ldr	r0, [pc, #264]	; (80014a0 <BP_ReadPTC+0x118>)
 8001396:	f000 fcd1 	bl	8001d3c <ChangeChannel>
	for (uint8_t i=0;i<NbPTC;i++)
 800139a:	2300      	movs	r3, #0
 800139c:	717b      	strb	r3, [r7, #5]
 800139e:	e06d      	b.n	800147c <BP_ReadPTC+0xf4>
	{
		// Change the multiplexer to read every ptc
		MUXCONTROL1(i);
 80013a0:	797b      	ldrb	r3, [r7, #5]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f000 fa76 	bl	8001894 <MUXCONTROL1>

		//Read each ptc
		HAL_ADC_Start(&hadc1);
 80013a8:	483d      	ldr	r0, [pc, #244]	; (80014a0 <BP_ReadPTC+0x118>)
 80013aa:	f001 f8b1 	bl	8002510 <HAL_ADC_Start>
			if ( HAL_ADC_PollForConversion(&hadc1,10)==HAL_OK)
 80013ae:	210a      	movs	r1, #10
 80013b0:	483b      	ldr	r0, [pc, #236]	; (80014a0 <BP_ReadPTC+0x118>)
 80013b2:	f001 f95b 	bl	800266c <HAL_ADC_PollForConversion>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d110      	bne.n	80013de <BP_ReadPTC+0x56>
				batteryPack.Temperature[(NbCells-NbPTC)+i]=TempConvPTC((HAL_ADC_GetValue(&hadc1)));
 80013bc:	4838      	ldr	r0, [pc, #224]	; (80014a0 <BP_ReadPTC+0x118>)
 80013be:	f001 fa4f 	bl	8002860 <HAL_ADC_GetValue>
 80013c2:	4603      	mov	r3, r0
 80013c4:	4618      	mov	r0, r3
 80013c6:	f000 f947 	bl	8001658 <TempConvPTC>
 80013ca:	4603      	mov	r3, r0
 80013cc:	461a      	mov	r2, r3
 80013ce:	797b      	ldrb	r3, [r7, #5]
 80013d0:	3384      	adds	r3, #132	; 0x84
 80013d2:	b291      	uxth	r1, r2
 80013d4:	4a33      	ldr	r2, [pc, #204]	; (80014a4 <BP_ReadPTC+0x11c>)
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	4413      	add	r3, r2
 80013da:	460a      	mov	r2, r1
 80013dc:	805a      	strh	r2, [r3, #2]

			//Sum of ptc temperature to make the average
			SumTemp=SumTemp+batteryPack.Temperature[(NbCells-NbPTC)+i];
 80013de:	797b      	ldrb	r3, [r7, #5]
 80013e0:	3384      	adds	r3, #132	; 0x84
 80013e2:	4a30      	ldr	r2, [pc, #192]	; (80014a4 <BP_ReadPTC+0x11c>)
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	4413      	add	r3, r2
 80013e8:	885a      	ldrh	r2, [r3, #2]
 80013ea:	88fb      	ldrh	r3, [r7, #6]
 80013ec:	4413      	add	r3, r2
 80013ee:	80fb      	strh	r3, [r7, #6]

			//Check the state of each ptc temperature
			if (batteryPack.Temperature[(NbCells-NbPTC)+i]>=DangerTemp)
 80013f0:	797b      	ldrb	r3, [r7, #5]
 80013f2:	3384      	adds	r3, #132	; 0x84
 80013f4:	4a2b      	ldr	r2, [pc, #172]	; (80014a4 <BP_ReadPTC+0x11c>)
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	4413      	add	r3, r2
 80013fa:	885b      	ldrh	r3, [r3, #2]
 80013fc:	2b39      	cmp	r3, #57	; 0x39
 80013fe:	d904      	bls.n	800140a <BP_ReadPTC+0x82>
				batteryPack.State = DANGER;
 8001400:	4b28      	ldr	r3, [pc, #160]	; (80014a4 <BP_ReadPTC+0x11c>)
 8001402:	2200      	movs	r2, #0
 8001404:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
 8001408:	e01f      	b.n	800144a <BP_ReadPTC+0xc2>
			else if(batteryPack.Temperature[(NbCells-NbPTC)+i]>=WarningTemp && batteryPack.State != DANGER)
 800140a:	797b      	ldrb	r3, [r7, #5]
 800140c:	3384      	adds	r3, #132	; 0x84
 800140e:	4a25      	ldr	r2, [pc, #148]	; (80014a4 <BP_ReadPTC+0x11c>)
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	4413      	add	r3, r2
 8001414:	885b      	ldrh	r3, [r3, #2]
 8001416:	2b31      	cmp	r3, #49	; 0x31
 8001418:	d909      	bls.n	800142e <BP_ReadPTC+0xa6>
 800141a:	4b22      	ldr	r3, [pc, #136]	; (80014a4 <BP_ReadPTC+0x11c>)
 800141c:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 8001420:	2b00      	cmp	r3, #0
 8001422:	d004      	beq.n	800142e <BP_ReadPTC+0xa6>
				batteryPack.State = WARNING;
 8001424:	4b1f      	ldr	r3, [pc, #124]	; (80014a4 <BP_ReadPTC+0x11c>)
 8001426:	2201      	movs	r2, #1
 8001428:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
 800142c:	e00d      	b.n	800144a <BP_ReadPTC+0xc2>
			else if (batteryPack.State != DANGER || batteryPack.State != WARNING)
 800142e:	4b1d      	ldr	r3, [pc, #116]	; (80014a4 <BP_ReadPTC+0x11c>)
 8001430:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 8001434:	2b00      	cmp	r3, #0
 8001436:	d104      	bne.n	8001442 <BP_ReadPTC+0xba>
 8001438:	4b1a      	ldr	r3, [pc, #104]	; (80014a4 <BP_ReadPTC+0x11c>)
 800143a:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 800143e:	2b01      	cmp	r3, #1
 8001440:	d003      	beq.n	800144a <BP_ReadPTC+0xc2>
				batteryPack.State = NORMAL;
 8001442:	4b18      	ldr	r3, [pc, #96]	; (80014a4 <BP_ReadPTC+0x11c>)
 8001444:	2202      	movs	r2, #2
 8001446:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122

			//Check the maximum temperature of ptc
			if (batteryPack.Temperature[(NbCells-NbPTC)+i]>batteryPack.MaxTempPtc)
 800144a:	797b      	ldrb	r3, [r7, #5]
 800144c:	3384      	adds	r3, #132	; 0x84
 800144e:	4a15      	ldr	r2, [pc, #84]	; (80014a4 <BP_ReadPTC+0x11c>)
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	4413      	add	r3, r2
 8001454:	885a      	ldrh	r2, [r3, #2]
 8001456:	4b13      	ldr	r3, [pc, #76]	; (80014a4 <BP_ReadPTC+0x11c>)
 8001458:	f893 3127 	ldrb.w	r3, [r3, #295]	; 0x127
 800145c:	b29b      	uxth	r3, r3
 800145e:	429a      	cmp	r2, r3
 8001460:	d909      	bls.n	8001476 <BP_ReadPTC+0xee>
			batteryPack.MaxTempPtc=batteryPack.Temperature[(NbCells-NbPTC)+i];
 8001462:	797b      	ldrb	r3, [r7, #5]
 8001464:	3384      	adds	r3, #132	; 0x84
 8001466:	4a0f      	ldr	r2, [pc, #60]	; (80014a4 <BP_ReadPTC+0x11c>)
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	4413      	add	r3, r2
 800146c:	885b      	ldrh	r3, [r3, #2]
 800146e:	b2da      	uxtb	r2, r3
 8001470:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <BP_ReadPTC+0x11c>)
 8001472:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127
	for (uint8_t i=0;i<NbPTC;i++)
 8001476:	797b      	ldrb	r3, [r7, #5]
 8001478:	3301      	adds	r3, #1
 800147a:	717b      	strb	r3, [r7, #5]
 800147c:	797b      	ldrb	r3, [r7, #5]
 800147e:	2b0b      	cmp	r3, #11
 8001480:	d98e      	bls.n	80013a0 <BP_ReadPTC+0x18>

	}
	//Average of temperature for the ptc
	batteryPack.AveragePtcTemp=SumTemp/(NbPTC);
 8001482:	88fb      	ldrh	r3, [r7, #6]
 8001484:	4a08      	ldr	r2, [pc, #32]	; (80014a8 <BP_ReadPTC+0x120>)
 8001486:	fba2 2303 	umull	r2, r3, r2, r3
 800148a:	08db      	lsrs	r3, r3, #3
 800148c:	b29b      	uxth	r3, r3
 800148e:	b2da      	uxtb	r2, r3
 8001490:	4b04      	ldr	r3, [pc, #16]	; (80014a4 <BP_ReadPTC+0x11c>)
 8001492:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	200000c4 	.word	0x200000c4
 80014a4:	20000128 	.word	0x20000128
 80014a8:	aaaaaaab 	.word	0xaaaaaaab

080014ac <BP_ReadAll>:
void BP_ReadAll()
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
	BP_ReadMatrix();
 80014b0:	f7ff fdfa 	bl	80010a8 <BP_ReadMatrix>
	BP_ReadPTC();
 80014b4:	f7ff ff68 	bl	8001388 <BP_ReadPTC>
}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}

080014bc <BP_canFormat>:

void BP_canFormat(){
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0

	  uint16_t mask = CanAdressRange | batteryPack.id << 4;
 80014c2:	4b19      	ldr	r3, [pc, #100]	; (8001528 <BP_canFormat+0x6c>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	011b      	lsls	r3, r3, #4
 80014c8:	b21b      	sxth	r3, r3
 80014ca:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80014ce:	b21b      	sxth	r3, r3
 80014d0:	81fb      	strh	r3, [r7, #14]
	  uint8_t status[8];
			  status[0] = batteryPack.State;
 80014d2:	4b15      	ldr	r3, [pc, #84]	; (8001528 <BP_canFormat+0x6c>)
 80014d4:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 80014d8:	713b      	strb	r3, [r7, #4]
			  status[1] = batteryPack.MaxTemp;
 80014da:	4b13      	ldr	r3, [pc, #76]	; (8001528 <BP_canFormat+0x6c>)
 80014dc:	f893 3123 	ldrb.w	r3, [r3, #291]	; 0x123
 80014e0:	717b      	strb	r3, [r7, #5]
			  status[2] = batteryPack.SecondMaxTemp;
 80014e2:	4b11      	ldr	r3, [pc, #68]	; (8001528 <BP_canFormat+0x6c>)
 80014e4:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 80014e8:	71bb      	strb	r3, [r7, #6]
			  status[3] = batteryPack.ThirdMaxTemp;
 80014ea:	4b0f      	ldr	r3, [pc, #60]	; (8001528 <BP_canFormat+0x6c>)
 80014ec:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
 80014f0:	71fb      	strb	r3, [r7, #7]
			  status[4] = batteryPack.LowTemp;
 80014f2:	4b0d      	ldr	r3, [pc, #52]	; (8001528 <BP_canFormat+0x6c>)
 80014f4:	f893 3126 	ldrb.w	r3, [r3, #294]	; 0x126
 80014f8:	723b      	strb	r3, [r7, #8]
			  status[5] = batteryPack.MaxTempPtc;
 80014fa:	4b0b      	ldr	r3, [pc, #44]	; (8001528 <BP_canFormat+0x6c>)
 80014fc:	f893 3127 	ldrb.w	r3, [r3, #295]	; 0x127
 8001500:	727b      	strb	r3, [r7, #9]
			  status[6] = batteryPack.AverageMatrixTemp;
 8001502:	4b09      	ldr	r3, [pc, #36]	; (8001528 <BP_canFormat+0x6c>)
 8001504:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 8001508:	72bb      	strb	r3, [r7, #10]
			  status[7] = batteryPack.AveragePtcTemp;
 800150a:	4b07      	ldr	r3, [pc, #28]	; (8001528 <BP_canFormat+0x6c>)
 800150c:	f893 3129 	ldrb.w	r3, [r3, #297]	; 0x129
 8001510:	72fb      	strb	r3, [r7, #11]
			  canTransmit(mask, 8, status);
 8001512:	1d3a      	adds	r2, r7, #4
 8001514:	89fb      	ldrh	r3, [r7, #14]
 8001516:	2108      	movs	r1, #8
 8001518:	4618      	mov	r0, r3
 800151a:	f000 fc89 	bl	8001e30 <canTransmit>
}
 800151e:	bf00      	nop
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20000128 	.word	0x20000128
 800152c:	00000000 	.word	0x00000000

08001530 <TempConvNTC>:

uint8_t TempConvNTC(uint32_t Voltage)
{
 8001530:	b5b0      	push	{r4, r5, r7, lr}
 8001532:	b08a      	sub	sp, #40	; 0x28
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
	uint32_t TemperatureNTC=0;
 8001538:	2300      	movs	r3, #0
 800153a:	627b      	str	r3, [r7, #36]	; 0x24
	float ScalingVoltage=(3.3/4096)*Voltage;
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f7fe ff49 	bl	80003d4 <__aeabi_ui2d>
 8001542:	a33d      	add	r3, pc, #244	; (adr r3, 8001638 <TempConvNTC+0x108>)
 8001544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001548:	f7fe ffbe 	bl	80004c8 <__aeabi_dmul>
 800154c:	4603      	mov	r3, r0
 800154e:	460c      	mov	r4, r1
 8001550:	4618      	mov	r0, r3
 8001552:	4621      	mov	r1, r4
 8001554:	f7ff f9ea 	bl	800092c <__aeabi_d2f>
 8001558:	4603      	mov	r3, r0
 800155a:	623b      	str	r3, [r7, #32]
	float R1=10.0f;
 800155c:	4b3c      	ldr	r3, [pc, #240]	; (8001650 <TempConvNTC+0x120>)
 800155e:	61fb      	str	r3, [r7, #28]
	float R2=(ScalingVoltage*R1)/(3.3-ScalingVoltage);
 8001560:	69f9      	ldr	r1, [r7, #28]
 8001562:	6a38      	ldr	r0, [r7, #32]
 8001564:	f7ff fb40 	bl	8000be8 <__aeabi_fmul>
 8001568:	4603      	mov	r3, r0
 800156a:	4618      	mov	r0, r3
 800156c:	f7fe ff54 	bl	8000418 <__aeabi_f2d>
 8001570:	4604      	mov	r4, r0
 8001572:	460d      	mov	r5, r1
 8001574:	6a38      	ldr	r0, [r7, #32]
 8001576:	f7fe ff4f 	bl	8000418 <__aeabi_f2d>
 800157a:	4602      	mov	r2, r0
 800157c:	460b      	mov	r3, r1
 800157e:	a130      	add	r1, pc, #192	; (adr r1, 8001640 <TempConvNTC+0x110>)
 8001580:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001584:	f7fe fde8 	bl	8000158 <__aeabi_dsub>
 8001588:	4602      	mov	r2, r0
 800158a:	460b      	mov	r3, r1
 800158c:	4620      	mov	r0, r4
 800158e:	4629      	mov	r1, r5
 8001590:	f7ff f8c4 	bl	800071c <__aeabi_ddiv>
 8001594:	4603      	mov	r3, r0
 8001596:	460c      	mov	r4, r1
 8001598:	4618      	mov	r0, r3
 800159a:	4621      	mov	r1, r4
 800159c:	f7ff f9c6 	bl	800092c <__aeabi_d2f>
 80015a0:	4603      	mov	r3, r0
 80015a2:	61bb      	str	r3, [r7, #24]
	uint16_t B=3435;
 80015a4:	f640 536b 	movw	r3, #3435	; 0xd6b
 80015a8:	82fb      	strh	r3, [r7, #22]
	float T0=25+273.15;
 80015aa:	4b2a      	ldr	r3, [pc, #168]	; (8001654 <TempConvNTC+0x124>)
 80015ac:	613b      	str	r3, [r7, #16]
	float Tampon=0;
 80015ae:	f04f 0300 	mov.w	r3, #0
 80015b2:	60fb      	str	r3, [r7, #12]
	Tampon=(1/((logf(R2/R1)/B)+(1/T0)))-273.15;
 80015b4:	69f9      	ldr	r1, [r7, #28]
 80015b6:	69b8      	ldr	r0, [r7, #24]
 80015b8:	f7ff fbca 	bl	8000d50 <__aeabi_fdiv>
 80015bc:	4603      	mov	r3, r0
 80015be:	4618      	mov	r0, r3
 80015c0:	f002 fe12 	bl	80041e8 <logf>
 80015c4:	4604      	mov	r4, r0
 80015c6:	8afb      	ldrh	r3, [r7, #22]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff fab9 	bl	8000b40 <__aeabi_i2f>
 80015ce:	4603      	mov	r3, r0
 80015d0:	4619      	mov	r1, r3
 80015d2:	4620      	mov	r0, r4
 80015d4:	f7ff fbbc 	bl	8000d50 <__aeabi_fdiv>
 80015d8:	4603      	mov	r3, r0
 80015da:	461c      	mov	r4, r3
 80015dc:	6939      	ldr	r1, [r7, #16]
 80015de:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80015e2:	f7ff fbb5 	bl	8000d50 <__aeabi_fdiv>
 80015e6:	4603      	mov	r3, r0
 80015e8:	4619      	mov	r1, r3
 80015ea:	4620      	mov	r0, r4
 80015ec:	f7ff f9f4 	bl	80009d8 <__addsf3>
 80015f0:	4603      	mov	r3, r0
 80015f2:	4619      	mov	r1, r3
 80015f4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80015f8:	f7ff fbaa 	bl	8000d50 <__aeabi_fdiv>
 80015fc:	4603      	mov	r3, r0
 80015fe:	4618      	mov	r0, r3
 8001600:	f7fe ff0a 	bl	8000418 <__aeabi_f2d>
 8001604:	a310      	add	r3, pc, #64	; (adr r3, 8001648 <TempConvNTC+0x118>)
 8001606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160a:	f7fe fda5 	bl	8000158 <__aeabi_dsub>
 800160e:	4603      	mov	r3, r0
 8001610:	460c      	mov	r4, r1
 8001612:	4618      	mov	r0, r3
 8001614:	4621      	mov	r1, r4
 8001616:	f7ff f989 	bl	800092c <__aeabi_d2f>
 800161a:	4603      	mov	r3, r0
 800161c:	60fb      	str	r3, [r7, #12]
	TemperatureNTC=(uint8_t)Tampon;
 800161e:	68f8      	ldr	r0, [r7, #12]
 8001620:	f7ff fcbe 	bl	8000fa0 <__aeabi_f2uiz>
 8001624:	4603      	mov	r3, r0
 8001626:	b2db      	uxtb	r3, r3
 8001628:	627b      	str	r3, [r7, #36]	; 0x24
	return TemperatureNTC;
 800162a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162c:	b2db      	uxtb	r3, r3
}
 800162e:	4618      	mov	r0, r3
 8001630:	3728      	adds	r7, #40	; 0x28
 8001632:	46bd      	mov	sp, r7
 8001634:	bdb0      	pop	{r4, r5, r7, pc}
 8001636:	bf00      	nop
 8001638:	66666666 	.word	0x66666666
 800163c:	3f4a6666 	.word	0x3f4a6666
 8001640:	66666666 	.word	0x66666666
 8001644:	400a6666 	.word	0x400a6666
 8001648:	66666666 	.word	0x66666666
 800164c:	40711266 	.word	0x40711266
 8001650:	41200000 	.word	0x41200000
 8001654:	43951333 	.word	0x43951333

08001658 <TempConvPTC>:

uint8_t TempConvPTC(uint32_t Voltage){
 8001658:	b5b0      	push	{r4, r5, r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
	float Voltage2=(Voltage*(3.3/4096));
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f7fe feb7 	bl	80003d4 <__aeabi_ui2d>
 8001666:	a32e      	add	r3, pc, #184	; (adr r3, 8001720 <TempConvPTC+0xc8>)
 8001668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166c:	f7fe ff2c 	bl	80004c8 <__aeabi_dmul>
 8001670:	4603      	mov	r3, r0
 8001672:	460c      	mov	r4, r1
 8001674:	4618      	mov	r0, r3
 8001676:	4621      	mov	r1, r4
 8001678:	f7ff f958 	bl	800092c <__aeabi_d2f>
 800167c:	4603      	mov	r3, r0
 800167e:	60fb      	str	r3, [r7, #12]
	return (Voltage2*Voltage2*Voltage2*PTCCONSTANT1+Voltage2*Voltage2*PTCCONSTANT2 + Voltage2*PTCCONSTANT3+PTCCONSTANT4);
 8001680:	68f9      	ldr	r1, [r7, #12]
 8001682:	68f8      	ldr	r0, [r7, #12]
 8001684:	f7ff fab0 	bl	8000be8 <__aeabi_fmul>
 8001688:	4603      	mov	r3, r0
 800168a:	68f9      	ldr	r1, [r7, #12]
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff faab 	bl	8000be8 <__aeabi_fmul>
 8001692:	4603      	mov	r3, r0
 8001694:	4618      	mov	r0, r3
 8001696:	f7fe febf 	bl	8000418 <__aeabi_f2d>
 800169a:	a323      	add	r3, pc, #140	; (adr r3, 8001728 <TempConvPTC+0xd0>)
 800169c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a0:	f7fe ff12 	bl	80004c8 <__aeabi_dmul>
 80016a4:	4603      	mov	r3, r0
 80016a6:	460c      	mov	r4, r1
 80016a8:	4625      	mov	r5, r4
 80016aa:	461c      	mov	r4, r3
 80016ac:	68f9      	ldr	r1, [r7, #12]
 80016ae:	68f8      	ldr	r0, [r7, #12]
 80016b0:	f7ff fa9a 	bl	8000be8 <__aeabi_fmul>
 80016b4:	4603      	mov	r3, r0
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7fe feae 	bl	8000418 <__aeabi_f2d>
 80016bc:	a31c      	add	r3, pc, #112	; (adr r3, 8001730 <TempConvPTC+0xd8>)
 80016be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c2:	f7fe ff01 	bl	80004c8 <__aeabi_dmul>
 80016c6:	4602      	mov	r2, r0
 80016c8:	460b      	mov	r3, r1
 80016ca:	4620      	mov	r0, r4
 80016cc:	4629      	mov	r1, r5
 80016ce:	f7fe fd45 	bl	800015c <__adddf3>
 80016d2:	4603      	mov	r3, r0
 80016d4:	460c      	mov	r4, r1
 80016d6:	4625      	mov	r5, r4
 80016d8:	461c      	mov	r4, r3
 80016da:	68f8      	ldr	r0, [r7, #12]
 80016dc:	f7fe fe9c 	bl	8000418 <__aeabi_f2d>
 80016e0:	a315      	add	r3, pc, #84	; (adr r3, 8001738 <TempConvPTC+0xe0>)
 80016e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e6:	f7fe feef 	bl	80004c8 <__aeabi_dmul>
 80016ea:	4602      	mov	r2, r0
 80016ec:	460b      	mov	r3, r1
 80016ee:	4620      	mov	r0, r4
 80016f0:	4629      	mov	r1, r5
 80016f2:	f7fe fd33 	bl	800015c <__adddf3>
 80016f6:	4603      	mov	r3, r0
 80016f8:	460c      	mov	r4, r1
 80016fa:	4618      	mov	r0, r3
 80016fc:	4621      	mov	r1, r4
 80016fe:	a310      	add	r3, pc, #64	; (adr r3, 8001740 <TempConvPTC+0xe8>)
 8001700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001704:	f7fe fd2a 	bl	800015c <__adddf3>
 8001708:	4603      	mov	r3, r0
 800170a:	460c      	mov	r4, r1
 800170c:	4618      	mov	r0, r3
 800170e:	4621      	mov	r1, r4
 8001710:	f7ff f8ec 	bl	80008ec <__aeabi_d2uiz>
 8001714:	4603      	mov	r3, r0
 8001716:	b2db      	uxtb	r3, r3
}
 8001718:	4618      	mov	r0, r3
 800171a:	3710      	adds	r7, #16
 800171c:	46bd      	mov	sp, r7
 800171e:	bdb0      	pop	{r4, r5, r7, pc}
 8001720:	66666666 	.word	0x66666666
 8001724:	3f4a6666 	.word	0x3f4a6666
 8001728:	89374bc7 	.word	0x89374bc7
 800172c:	c0242041 	.word	0xc0242041
 8001730:	c083126f 	.word	0xc083126f
 8001734:	404bb1ca 	.word	0x404bb1ca
 8001738:	d70a3d71 	.word	0xd70a3d71
 800173c:	c06020a3 	.word	0xc06020a3
 8001740:	eb851eb8 	.word	0xeb851eb8
 8001744:	40607051 	.word	0x40607051

08001748 <FrameWorkInit>:
#define MATRIXREAD_INTERVAL	10
uint32_t TimestampWatchdog;
uint32_t TimestampReadMatrix;

void FrameWorkInit(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
	TimestampWatchdog=0;
 800174c:	4b04      	ldr	r3, [pc, #16]	; (8001760 <FrameWorkInit+0x18>)
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
	TimestampReadMatrix=0;
 8001752:	4b04      	ldr	r3, [pc, #16]	; (8001764 <FrameWorkInit+0x1c>)
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
}
 8001758:	bf00      	nop
 800175a:	46bd      	mov	sp, r7
 800175c:	bc80      	pop	{r7}
 800175e:	4770      	bx	lr
 8001760:	20000258 	.word	0x20000258
 8001764:	20000254 	.word	0x20000254

08001768 <FrameWorkTask>:
void FrameWorkTask(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
	// HAL_IWDG_Refresh(&hiwdg);
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr

08001774 <MX_GPIO_Init>:
#include "Gpio.h"
#include "MCUMap.h"

void MX_GPIO_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b088      	sub	sp, #32
 8001778:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800177a:	f107 0310 	add.w	r3, r7, #16
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	605a      	str	r2, [r3, #4]
 8001784:	609a      	str	r2, [r3, #8]
 8001786:	60da      	str	r2, [r3, #12]

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001788:	4b3e      	ldr	r3, [pc, #248]	; (8001884 <MX_GPIO_Init+0x110>)
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	4a3d      	ldr	r2, [pc, #244]	; (8001884 <MX_GPIO_Init+0x110>)
 800178e:	f043 0310 	orr.w	r3, r3, #16
 8001792:	6193      	str	r3, [r2, #24]
 8001794:	4b3b      	ldr	r3, [pc, #236]	; (8001884 <MX_GPIO_Init+0x110>)
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	f003 0310 	and.w	r3, r3, #16
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017a0:	4b38      	ldr	r3, [pc, #224]	; (8001884 <MX_GPIO_Init+0x110>)
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	4a37      	ldr	r2, [pc, #220]	; (8001884 <MX_GPIO_Init+0x110>)
 80017a6:	f043 0320 	orr.w	r3, r3, #32
 80017aa:	6193      	str	r3, [r2, #24]
 80017ac:	4b35      	ldr	r3, [pc, #212]	; (8001884 <MX_GPIO_Init+0x110>)
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	f003 0320 	and.w	r3, r3, #32
 80017b4:	60bb      	str	r3, [r7, #8]
 80017b6:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b8:	4b32      	ldr	r3, [pc, #200]	; (8001884 <MX_GPIO_Init+0x110>)
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	4a31      	ldr	r2, [pc, #196]	; (8001884 <MX_GPIO_Init+0x110>)
 80017be:	f043 0304 	orr.w	r3, r3, #4
 80017c2:	6193      	str	r3, [r2, #24]
 80017c4:	4b2f      	ldr	r3, [pc, #188]	; (8001884 <MX_GPIO_Init+0x110>)
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	f003 0304 	and.w	r3, r3, #4
 80017cc:	607b      	str	r3, [r7, #4]
 80017ce:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d0:	4b2c      	ldr	r3, [pc, #176]	; (8001884 <MX_GPIO_Init+0x110>)
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	4a2b      	ldr	r2, [pc, #172]	; (8001884 <MX_GPIO_Init+0x110>)
 80017d6:	f043 0308 	orr.w	r3, r3, #8
 80017da:	6193      	str	r3, [r2, #24]
 80017dc:	4b29      	ldr	r3, [pc, #164]	; (8001884 <MX_GPIO_Init+0x110>)
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	f003 0308 	and.w	r3, r3, #8
 80017e4:	603b      	str	r3, [r7, #0]
 80017e6:	683b      	ldr	r3, [r7, #0]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOA, Strobe_Pin|CMDDEC0_Pin|CMDDEC1_Pin|CMDDEC3_Pin|CMDDEC2_Pin, GPIO_PIN_RESET);
 80017e8:	2200      	movs	r2, #0
 80017ea:	21f0      	movs	r1, #240	; 0xf0
 80017ec:	4826      	ldr	r0, [pc, #152]	; (8001888 <MX_GPIO_Init+0x114>)
 80017ee:	f001 ff37 	bl	8003660 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOB, CMDC3_Pin|CMDC2_Pin|CMDC1_Pin|CMDC0_Pin, GPIO_PIN_RESET);
 80017f2:	2200      	movs	r2, #0
 80017f4:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80017f8:	4824      	ldr	r0, [pc, #144]	; (800188c <MX_GPIO_Init+0x118>)
 80017fa:	f001 ff31 	bl	8003660 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOC, CMDPTC0_Pin|CMDPTC1_Pin|CMDPTC2_Pin|CMDPTC3_Pin, GPIO_PIN_RESET);
 80017fe:	2200      	movs	r2, #0
 8001800:	210f      	movs	r1, #15
 8001802:	4823      	ldr	r0, [pc, #140]	; (8001890 <MX_GPIO_Init+0x11c>)
 8001804:	f001 ff2c 	bl	8003660 <HAL_GPIO_WritePin>

	  /*Configure GPIO pins : Strobe_Pin CMDDEC0_Pin CMDDEC1_Pin CMDDEC3_Pin CMDDEC2_Pin */
	  GPIO_InitStruct.Pin = Strobe_Pin|CMDDEC0_Pin|CMDDEC1_Pin|CMDDEC3_Pin;
 8001808:	23f0      	movs	r3, #240	; 0xf0
 800180a:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800180c:	2301      	movs	r3, #1
 800180e:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001810:	2300      	movs	r3, #0
 8001812:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001814:	2302      	movs	r3, #2
 8001816:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001818:	f107 0310 	add.w	r3, r7, #16
 800181c:	4619      	mov	r1, r3
 800181e:	481a      	ldr	r0, [pc, #104]	; (8001888 <MX_GPIO_Init+0x114>)
 8001820:	f001 fdc4 	bl	80033ac <HAL_GPIO_Init>

	  /*Configure GPIO pins : CMDC3_Pin CMDC2_Pin CMDC0_Pin CMDC1_Pin */
	  GPIO_InitStruct.Pin = CMDC3_Pin|CMDC2_Pin|CMDC0_Pin|CMDC1_Pin;
 8001824:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001828:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800182a:	2301      	movs	r3, #1
 800182c:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001832:	2302      	movs	r3, #2
 8001834:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001836:	f107 0310 	add.w	r3, r7, #16
 800183a:	4619      	mov	r1, r3
 800183c:	4813      	ldr	r0, [pc, #76]	; (800188c <MX_GPIO_Init+0x118>)
 800183e:	f001 fdb5 	bl	80033ac <HAL_GPIO_Init>

	  /*Configure GPIO pins : Strobe_Pin CMDPTC0_Pin CMDPTC1_Pin CMDPTC3_Pin CMDPTC2_Pin*/
	  GPIO_InitStruct.Pin = CMDPTC0_Pin|CMDPTC1_Pin|CMDPTC2_Pin|CMDPTC3_Pin|CMDDEC2_Pin;
 8001842:	231f      	movs	r3, #31
 8001844:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001846:	2301      	movs	r3, #1
 8001848:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184a:	2300      	movs	r3, #0
 800184c:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184e:	2302      	movs	r3, #2
 8001850:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001852:	f107 0310 	add.w	r3, r7, #16
 8001856:	4619      	mov	r1, r3
 8001858:	480d      	ldr	r0, [pc, #52]	; (8001890 <MX_GPIO_Init+0x11c>)
 800185a:	f001 fda7 	bl	80033ac <HAL_GPIO_Init>

	  /*Configure GPIO in: Vrefmux0 */
	  GPIO_InitStruct.Pin = VREFMUX0;
 800185e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001862:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001864:	2301      	movs	r3, #1
 8001866:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186c:	2302      	movs	r3, #2
 800186e:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001870:	f107 0310 	add.w	r3, r7, #16
 8001874:	4619      	mov	r1, r3
 8001876:	4805      	ldr	r0, [pc, #20]	; (800188c <MX_GPIO_Init+0x118>)
 8001878:	f001 fd98 	bl	80033ac <HAL_GPIO_Init>
}
 800187c:	bf00      	nop
 800187e:	3720      	adds	r7, #32
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40021000 	.word	0x40021000
 8001888:	40010800 	.word	0x40010800
 800188c:	40010c00 	.word	0x40010c00
 8001890:	40011000 	.word	0x40011000

08001894 <MUXCONTROL1>:
#include "MuxControl.h"

GPIO_InitTypeDef GPIO_InitStruct = {0};

void MUXCONTROL1(uint8_t pinValue)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	71fb      	strb	r3, [r7, #7]
	uint8_t pinValueT;
	// This function Translate the desire value from the user to the hardware one.
	pinValueT=TransSoft2HardMux1(pinValue);
 800189e:	79fb      	ldrb	r3, [r7, #7]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f000 f925 	bl	8001af0 <TransSoft2HardMux1>
 80018a6:	4603      	mov	r3, r0
 80018a8:	73fb      	strb	r3, [r7, #15]
	// This function controls the U3 PTC MUX
	if(pinValueT&1)
 80018aa:	7bfb      	ldrb	r3, [r7, #15]
 80018ac:	f003 0301 	and.w	r3, r3, #1
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d005      	beq.n	80018c0 <MUXCONTROL1+0x2c>
		HAL_GPIO_WritePin(GPIOC,CMDPTC0_Pin,GPIO_PIN_SET);
 80018b4:	2201      	movs	r2, #1
 80018b6:	2108      	movs	r1, #8
 80018b8:	4821      	ldr	r0, [pc, #132]	; (8001940 <MUXCONTROL1+0xac>)
 80018ba:	f001 fed1 	bl	8003660 <HAL_GPIO_WritePin>
 80018be:	e004      	b.n	80018ca <MUXCONTROL1+0x36>
	else
		HAL_GPIO_WritePin(GPIOC,CMDPTC0_Pin,GPIO_PIN_RESET);
 80018c0:	2200      	movs	r2, #0
 80018c2:	2108      	movs	r1, #8
 80018c4:	481e      	ldr	r0, [pc, #120]	; (8001940 <MUXCONTROL1+0xac>)
 80018c6:	f001 fecb 	bl	8003660 <HAL_GPIO_WritePin>

	if((pinValueT>>1)&1)
 80018ca:	7bfb      	ldrb	r3, [r7, #15]
 80018cc:	085b      	lsrs	r3, r3, #1
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	f003 0301 	and.w	r3, r3, #1
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d005      	beq.n	80018e4 <MUXCONTROL1+0x50>
		HAL_GPIO_WritePin(GPIOC,CMDPTC1_Pin,GPIO_PIN_SET);
 80018d8:	2201      	movs	r2, #1
 80018da:	2104      	movs	r1, #4
 80018dc:	4818      	ldr	r0, [pc, #96]	; (8001940 <MUXCONTROL1+0xac>)
 80018de:	f001 febf 	bl	8003660 <HAL_GPIO_WritePin>
 80018e2:	e004      	b.n	80018ee <MUXCONTROL1+0x5a>
	else
		HAL_GPIO_WritePin(GPIOC,CMDPTC1_Pin,GPIO_PIN_RESET);
 80018e4:	2200      	movs	r2, #0
 80018e6:	2104      	movs	r1, #4
 80018e8:	4815      	ldr	r0, [pc, #84]	; (8001940 <MUXCONTROL1+0xac>)
 80018ea:	f001 feb9 	bl	8003660 <HAL_GPIO_WritePin>

	if((pinValueT>>2)&1)
 80018ee:	7bfb      	ldrb	r3, [r7, #15]
 80018f0:	089b      	lsrs	r3, r3, #2
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	f003 0301 	and.w	r3, r3, #1
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d005      	beq.n	8001908 <MUXCONTROL1+0x74>
		HAL_GPIO_WritePin(GPIOC,CMDPTC2_Pin,GPIO_PIN_SET);
 80018fc:	2201      	movs	r2, #1
 80018fe:	2102      	movs	r1, #2
 8001900:	480f      	ldr	r0, [pc, #60]	; (8001940 <MUXCONTROL1+0xac>)
 8001902:	f001 fead 	bl	8003660 <HAL_GPIO_WritePin>
 8001906:	e004      	b.n	8001912 <MUXCONTROL1+0x7e>
	else
		HAL_GPIO_WritePin(GPIOC,CMDPTC2_Pin,GPIO_PIN_RESET);
 8001908:	2200      	movs	r2, #0
 800190a:	2102      	movs	r1, #2
 800190c:	480c      	ldr	r0, [pc, #48]	; (8001940 <MUXCONTROL1+0xac>)
 800190e:	f001 fea7 	bl	8003660 <HAL_GPIO_WritePin>

	if((pinValueT>>3)&1)
 8001912:	7bfb      	ldrb	r3, [r7, #15]
 8001914:	08db      	lsrs	r3, r3, #3
 8001916:	b2db      	uxtb	r3, r3
 8001918:	f003 0301 	and.w	r3, r3, #1
 800191c:	2b00      	cmp	r3, #0
 800191e:	d005      	beq.n	800192c <MUXCONTROL1+0x98>
		HAL_GPIO_WritePin(GPIOC,CMDPTC3_Pin,GPIO_PIN_SET);
 8001920:	2201      	movs	r2, #1
 8001922:	2101      	movs	r1, #1
 8001924:	4806      	ldr	r0, [pc, #24]	; (8001940 <MUXCONTROL1+0xac>)
 8001926:	f001 fe9b 	bl	8003660 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(GPIOC,CMDPTC3_Pin,GPIO_PIN_RESET);
}
 800192a:	e004      	b.n	8001936 <MUXCONTROL1+0xa2>
		HAL_GPIO_WritePin(GPIOC,CMDPTC3_Pin,GPIO_PIN_RESET);
 800192c:	2200      	movs	r2, #0
 800192e:	2101      	movs	r1, #1
 8001930:	4803      	ldr	r0, [pc, #12]	; (8001940 <MUXCONTROL1+0xac>)
 8001932:	f001 fe95 	bl	8003660 <HAL_GPIO_WritePin>
}
 8001936:	bf00      	nop
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40011000 	.word	0x40011000

08001944 <MUXCONTROL2>:
void MUXCONTROL2(uint8_t pinValue)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	71fb      	strb	r3, [r7, #7]
	uint8_t pinValueT;
	pinValueT=TransSoft2HardMux2(pinValue);
 800194e:	79fb      	ldrb	r3, [r7, #7]
 8001950:	4618      	mov	r0, r3
 8001952:	f000 f914 	bl	8001b7e <TransSoft2HardMux2>
 8001956:	4603      	mov	r3, r0
 8001958:	73fb      	strb	r3, [r7, #15]
	// This function controls the U4 Column MUX
	if(pinValueT&1)
 800195a:	7bfb      	ldrb	r3, [r7, #15]
 800195c:	f003 0301 	and.w	r3, r3, #1
 8001960:	2b00      	cmp	r3, #0
 8001962:	d006      	beq.n	8001972 <MUXCONTROL2+0x2e>
		HAL_GPIO_WritePin(GPIOB,CMDC0_Pin,GPIO_PIN_SET);
 8001964:	2201      	movs	r2, #1
 8001966:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800196a:	4825      	ldr	r0, [pc, #148]	; (8001a00 <MUXCONTROL2+0xbc>)
 800196c:	f001 fe78 	bl	8003660 <HAL_GPIO_WritePin>
 8001970:	e005      	b.n	800197e <MUXCONTROL2+0x3a>
	else
		HAL_GPIO_WritePin(GPIOB,CMDC0_Pin,GPIO_PIN_RESET);
 8001972:	2200      	movs	r2, #0
 8001974:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001978:	4821      	ldr	r0, [pc, #132]	; (8001a00 <MUXCONTROL2+0xbc>)
 800197a:	f001 fe71 	bl	8003660 <HAL_GPIO_WritePin>

	if((pinValueT>>1)&1)
 800197e:	7bfb      	ldrb	r3, [r7, #15]
 8001980:	085b      	lsrs	r3, r3, #1
 8001982:	b2db      	uxtb	r3, r3
 8001984:	f003 0301 	and.w	r3, r3, #1
 8001988:	2b00      	cmp	r3, #0
 800198a:	d006      	beq.n	800199a <MUXCONTROL2+0x56>
		HAL_GPIO_WritePin(GPIOB,CMDC1_Pin,GPIO_PIN_SET);
 800198c:	2201      	movs	r2, #1
 800198e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001992:	481b      	ldr	r0, [pc, #108]	; (8001a00 <MUXCONTROL2+0xbc>)
 8001994:	f001 fe64 	bl	8003660 <HAL_GPIO_WritePin>
 8001998:	e005      	b.n	80019a6 <MUXCONTROL2+0x62>
	else
		HAL_GPIO_WritePin(GPIOB,CMDC1_Pin,GPIO_PIN_RESET);
 800199a:	2200      	movs	r2, #0
 800199c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019a0:	4817      	ldr	r0, [pc, #92]	; (8001a00 <MUXCONTROL2+0xbc>)
 80019a2:	f001 fe5d 	bl	8003660 <HAL_GPIO_WritePin>

	if((pinValueT>>2)&1)
 80019a6:	7bfb      	ldrb	r3, [r7, #15]
 80019a8:	089b      	lsrs	r3, r3, #2
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	f003 0301 	and.w	r3, r3, #1
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d006      	beq.n	80019c2 <MUXCONTROL2+0x7e>
		HAL_GPIO_WritePin(GPIOB,CMDC2_Pin,GPIO_PIN_SET);
 80019b4:	2201      	movs	r2, #1
 80019b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019ba:	4811      	ldr	r0, [pc, #68]	; (8001a00 <MUXCONTROL2+0xbc>)
 80019bc:	f001 fe50 	bl	8003660 <HAL_GPIO_WritePin>
 80019c0:	e005      	b.n	80019ce <MUXCONTROL2+0x8a>
	else
		HAL_GPIO_WritePin(GPIOB,CMDC2_Pin,GPIO_PIN_RESET);
 80019c2:	2200      	movs	r2, #0
 80019c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019c8:	480d      	ldr	r0, [pc, #52]	; (8001a00 <MUXCONTROL2+0xbc>)
 80019ca:	f001 fe49 	bl	8003660 <HAL_GPIO_WritePin>

	if((pinValueT>>3)&1)
 80019ce:	7bfb      	ldrb	r3, [r7, #15]
 80019d0:	08db      	lsrs	r3, r3, #3
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	f003 0301 	and.w	r3, r3, #1
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d006      	beq.n	80019ea <MUXCONTROL2+0xa6>
		HAL_GPIO_WritePin(GPIOB,CMDC3_Pin,GPIO_PIN_SET);
 80019dc:	2201      	movs	r2, #1
 80019de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019e2:	4807      	ldr	r0, [pc, #28]	; (8001a00 <MUXCONTROL2+0xbc>)
 80019e4:	f001 fe3c 	bl	8003660 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(GPIOB,CMDC3_Pin,GPIO_PIN_RESET);
	}
 80019e8:	e005      	b.n	80019f6 <MUXCONTROL2+0xb2>
		HAL_GPIO_WritePin(GPIOB,CMDC3_Pin,GPIO_PIN_RESET);
 80019ea:	2200      	movs	r2, #0
 80019ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019f0:	4803      	ldr	r0, [pc, #12]	; (8001a00 <MUXCONTROL2+0xbc>)
 80019f2:	f001 fe35 	bl	8003660 <HAL_GPIO_WritePin>
	}
 80019f6:	bf00      	nop
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40010c00 	.word	0x40010c00

08001a04 <StrobeHigh>:
void StrobeHigh()
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,Strobe_Pin,GPIO_PIN_SET);
 8001a08:	2201      	movs	r2, #1
 8001a0a:	2110      	movs	r1, #16
 8001a0c:	4802      	ldr	r0, [pc, #8]	; (8001a18 <StrobeHigh+0x14>)
 8001a0e:	f001 fe27 	bl	8003660 <HAL_GPIO_WritePin>
}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40010800 	.word	0x40010800

08001a1c <StrobeLow>:
void StrobeLow()
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,Strobe_Pin,GPIO_PIN_RESET);
 8001a20:	2200      	movs	r2, #0
 8001a22:	2110      	movs	r1, #16
 8001a24:	4802      	ldr	r0, [pc, #8]	; (8001a30 <StrobeLow+0x14>)
 8001a26:	f001 fe1b 	bl	8003660 <HAL_GPIO_WritePin>
}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40010800 	.word	0x40010800

08001a34 <DECCONTROL>:
void DECCONTROL(uint8_t pinValue)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	71fb      	strb	r3, [r7, #7]
	uint8_t pinValueT;
	pinValueT=TransSoft2HardDec(pinValue);
 8001a3e:	79fb      	ldrb	r3, [r7, #7]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f000 f8e3 	bl	8001c0c <TransSoft2HardDec>
 8001a46:	4603      	mov	r3, r0
 8001a48:	73fb      	strb	r3, [r7, #15]
		if(pinValueT&1)
 8001a4a:	7bfb      	ldrb	r3, [r7, #15]
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d005      	beq.n	8001a60 <DECCONTROL+0x2c>
		{
			HAL_GPIO_WritePin(GPIOA,CMDDEC0_Pin,GPIO_PIN_SET);
 8001a54:	2201      	movs	r2, #1
 8001a56:	2120      	movs	r1, #32
 8001a58:	4823      	ldr	r0, [pc, #140]	; (8001ae8 <DECCONTROL+0xb4>)
 8001a5a:	f001 fe01 	bl	8003660 <HAL_GPIO_WritePin>
 8001a5e:	e004      	b.n	8001a6a <DECCONTROL+0x36>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA,CMDDEC0_Pin,GPIO_PIN_RESET);
 8001a60:	2200      	movs	r2, #0
 8001a62:	2120      	movs	r1, #32
 8001a64:	4820      	ldr	r0, [pc, #128]	; (8001ae8 <DECCONTROL+0xb4>)
 8001a66:	f001 fdfb 	bl	8003660 <HAL_GPIO_WritePin>
		}
		if((pinValueT>>1)&1)
 8001a6a:	7bfb      	ldrb	r3, [r7, #15]
 8001a6c:	085b      	lsrs	r3, r3, #1
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	f003 0301 	and.w	r3, r3, #1
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d005      	beq.n	8001a84 <DECCONTROL+0x50>
		{
			HAL_GPIO_WritePin(GPIOA,CMDDEC1_Pin,GPIO_PIN_SET);
 8001a78:	2201      	movs	r2, #1
 8001a7a:	2140      	movs	r1, #64	; 0x40
 8001a7c:	481a      	ldr	r0, [pc, #104]	; (8001ae8 <DECCONTROL+0xb4>)
 8001a7e:	f001 fdef 	bl	8003660 <HAL_GPIO_WritePin>
 8001a82:	e004      	b.n	8001a8e <DECCONTROL+0x5a>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA,CMDDEC1_Pin,GPIO_PIN_RESET);
 8001a84:	2200      	movs	r2, #0
 8001a86:	2140      	movs	r1, #64	; 0x40
 8001a88:	4817      	ldr	r0, [pc, #92]	; (8001ae8 <DECCONTROL+0xb4>)
 8001a8a:	f001 fde9 	bl	8003660 <HAL_GPIO_WritePin>
		}
		if((pinValueT>>2)&1)
 8001a8e:	7bfb      	ldrb	r3, [r7, #15]
 8001a90:	089b      	lsrs	r3, r3, #2
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	f003 0301 	and.w	r3, r3, #1
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d005      	beq.n	8001aa8 <DECCONTROL+0x74>
		{
			HAL_GPIO_WritePin(GPIOC,CMDDEC2_Pin,GPIO_PIN_SET);
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	2110      	movs	r1, #16
 8001aa0:	4812      	ldr	r0, [pc, #72]	; (8001aec <DECCONTROL+0xb8>)
 8001aa2:	f001 fddd 	bl	8003660 <HAL_GPIO_WritePin>
 8001aa6:	e004      	b.n	8001ab2 <DECCONTROL+0x7e>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOC,CMDDEC2_Pin,GPIO_PIN_RESET);
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	2110      	movs	r1, #16
 8001aac:	480f      	ldr	r0, [pc, #60]	; (8001aec <DECCONTROL+0xb8>)
 8001aae:	f001 fdd7 	bl	8003660 <HAL_GPIO_WritePin>
		}
		if((pinValueT>>3)&1)
 8001ab2:	7bfb      	ldrb	r3, [r7, #15]
 8001ab4:	08db      	lsrs	r3, r3, #3
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	f003 0301 	and.w	r3, r3, #1
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d005      	beq.n	8001acc <DECCONTROL+0x98>
		{
			HAL_GPIO_WritePin(GPIOA,CMDDEC3_Pin,GPIO_PIN_SET);
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	2180      	movs	r1, #128	; 0x80
 8001ac4:	4808      	ldr	r0, [pc, #32]	; (8001ae8 <DECCONTROL+0xb4>)
 8001ac6:	f001 fdcb 	bl	8003660 <HAL_GPIO_WritePin>
 8001aca:	e004      	b.n	8001ad6 <DECCONTROL+0xa2>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA,CMDDEC3_Pin,GPIO_PIN_RESET);
 8001acc:	2200      	movs	r2, #0
 8001ace:	2180      	movs	r1, #128	; 0x80
 8001ad0:	4805      	ldr	r0, [pc, #20]	; (8001ae8 <DECCONTROL+0xb4>)
 8001ad2:	f001 fdc5 	bl	8003660 <HAL_GPIO_WritePin>
		}
//	HAL_Delay(100);
	StrobeHigh();
 8001ad6:	f7ff ff95 	bl	8001a04 <StrobeHigh>
//	HAL_Delay(100);
	StrobeLow();
 8001ada:	f7ff ff9f 	bl	8001a1c <StrobeLow>
}
 8001ade:	bf00      	nop
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40010800 	.word	0x40010800
 8001aec:	40011000 	.word	0x40011000

08001af0 <TransSoft2HardMux1>:
uint8_t TransSoft2HardMux1(uint8_t pinValue)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	71fb      	strb	r3, [r7, #7]
	if(pinValue==0)
 8001afa:	79fb      	ldrb	r3, [r7, #7]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d101      	bne.n	8001b04 <TransSoft2HardMux1+0x14>
	{
		return 5;
 8001b00:	2305      	movs	r3, #5
 8001b02:	e037      	b.n	8001b74 <TransSoft2HardMux1+0x84>
	}
	if(pinValue==1)
 8001b04:	79fb      	ldrb	r3, [r7, #7]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d101      	bne.n	8001b0e <TransSoft2HardMux1+0x1e>
	{
		return 4;
 8001b0a:	2304      	movs	r3, #4
 8001b0c:	e032      	b.n	8001b74 <TransSoft2HardMux1+0x84>
	}
	if(pinValue==2)
 8001b0e:	79fb      	ldrb	r3, [r7, #7]
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d101      	bne.n	8001b18 <TransSoft2HardMux1+0x28>
	{
		return 3;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e02d      	b.n	8001b74 <TransSoft2HardMux1+0x84>
	}
	if(pinValue==3)
 8001b18:	79fb      	ldrb	r3, [r7, #7]
 8001b1a:	2b03      	cmp	r3, #3
 8001b1c:	d101      	bne.n	8001b22 <TransSoft2HardMux1+0x32>
	{
		return 2;
 8001b1e:	2302      	movs	r3, #2
 8001b20:	e028      	b.n	8001b74 <TransSoft2HardMux1+0x84>
	}
	if(pinValue==4)
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	2b04      	cmp	r3, #4
 8001b26:	d101      	bne.n	8001b2c <TransSoft2HardMux1+0x3c>
	{
		return 1;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e023      	b.n	8001b74 <TransSoft2HardMux1+0x84>
	}
	if(pinValue==5)
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
 8001b2e:	2b05      	cmp	r3, #5
 8001b30:	d101      	bne.n	8001b36 <TransSoft2HardMux1+0x46>
	{
		return 0;
 8001b32:	2300      	movs	r3, #0
 8001b34:	e01e      	b.n	8001b74 <TransSoft2HardMux1+0x84>
	}
	if(pinValue==6)
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	2b06      	cmp	r3, #6
 8001b3a:	d101      	bne.n	8001b40 <TransSoft2HardMux1+0x50>
	{
		return 15;
 8001b3c:	230f      	movs	r3, #15
 8001b3e:	e019      	b.n	8001b74 <TransSoft2HardMux1+0x84>
	}
	if(pinValue==7)
 8001b40:	79fb      	ldrb	r3, [r7, #7]
 8001b42:	2b07      	cmp	r3, #7
 8001b44:	d101      	bne.n	8001b4a <TransSoft2HardMux1+0x5a>
	{
		return 14;
 8001b46:	230e      	movs	r3, #14
 8001b48:	e014      	b.n	8001b74 <TransSoft2HardMux1+0x84>
	}
	if(pinValue==8)
 8001b4a:	79fb      	ldrb	r3, [r7, #7]
 8001b4c:	2b08      	cmp	r3, #8
 8001b4e:	d101      	bne.n	8001b54 <TransSoft2HardMux1+0x64>
	{
		return 13;
 8001b50:	230d      	movs	r3, #13
 8001b52:	e00f      	b.n	8001b74 <TransSoft2HardMux1+0x84>
	}
	if(pinValue==9)
 8001b54:	79fb      	ldrb	r3, [r7, #7]
 8001b56:	2b09      	cmp	r3, #9
 8001b58:	d101      	bne.n	8001b5e <TransSoft2HardMux1+0x6e>
	{
		return 12;
 8001b5a:	230c      	movs	r3, #12
 8001b5c:	e00a      	b.n	8001b74 <TransSoft2HardMux1+0x84>
	}
	if(pinValue==10)
 8001b5e:	79fb      	ldrb	r3, [r7, #7]
 8001b60:	2b0a      	cmp	r3, #10
 8001b62:	d101      	bne.n	8001b68 <TransSoft2HardMux1+0x78>
	{
		return 11;
 8001b64:	230b      	movs	r3, #11
 8001b66:	e005      	b.n	8001b74 <TransSoft2HardMux1+0x84>
	}
	if(pinValue==11)
 8001b68:	79fb      	ldrb	r3, [r7, #7]
 8001b6a:	2b0b      	cmp	r3, #11
 8001b6c:	d101      	bne.n	8001b72 <TransSoft2HardMux1+0x82>
	{
		return 10;
 8001b6e:	230a      	movs	r3, #10
 8001b70:	e000      	b.n	8001b74 <TransSoft2HardMux1+0x84>
	}
	return 16;
 8001b72:	2310      	movs	r3, #16
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bc80      	pop	{r7}
 8001b7c:	4770      	bx	lr

08001b7e <TransSoft2HardMux2>:
uint8_t TransSoft2HardMux2(uint8_t pinValue)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	b083      	sub	sp, #12
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	4603      	mov	r3, r0
 8001b86:	71fb      	strb	r3, [r7, #7]
	if(pinValue==0)
 8001b88:	79fb      	ldrb	r3, [r7, #7]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d101      	bne.n	8001b92 <TransSoft2HardMux2+0x14>
		{
			return 5;
 8001b8e:	2305      	movs	r3, #5
 8001b90:	e037      	b.n	8001c02 <TransSoft2HardMux2+0x84>
		}
		if(pinValue==1)
 8001b92:	79fb      	ldrb	r3, [r7, #7]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d101      	bne.n	8001b9c <TransSoft2HardMux2+0x1e>
		{
			return 4;
 8001b98:	2304      	movs	r3, #4
 8001b9a:	e032      	b.n	8001c02 <TransSoft2HardMux2+0x84>
		}
		if(pinValue==2)
 8001b9c:	79fb      	ldrb	r3, [r7, #7]
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d101      	bne.n	8001ba6 <TransSoft2HardMux2+0x28>
		{
			return 3;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e02d      	b.n	8001c02 <TransSoft2HardMux2+0x84>
		}
		if(pinValue==3)
 8001ba6:	79fb      	ldrb	r3, [r7, #7]
 8001ba8:	2b03      	cmp	r3, #3
 8001baa:	d101      	bne.n	8001bb0 <TransSoft2HardMux2+0x32>
		{
			return 2;
 8001bac:	2302      	movs	r3, #2
 8001bae:	e028      	b.n	8001c02 <TransSoft2HardMux2+0x84>
		}
		if(pinValue==4)
 8001bb0:	79fb      	ldrb	r3, [r7, #7]
 8001bb2:	2b04      	cmp	r3, #4
 8001bb4:	d101      	bne.n	8001bba <TransSoft2HardMux2+0x3c>
		{
			return 1;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e023      	b.n	8001c02 <TransSoft2HardMux2+0x84>
		}
		if(pinValue==5)
 8001bba:	79fb      	ldrb	r3, [r7, #7]
 8001bbc:	2b05      	cmp	r3, #5
 8001bbe:	d101      	bne.n	8001bc4 <TransSoft2HardMux2+0x46>
		{
			return 0;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	e01e      	b.n	8001c02 <TransSoft2HardMux2+0x84>
		}
		if(pinValue==6)
 8001bc4:	79fb      	ldrb	r3, [r7, #7]
 8001bc6:	2b06      	cmp	r3, #6
 8001bc8:	d101      	bne.n	8001bce <TransSoft2HardMux2+0x50>
		{
			return 15;
 8001bca:	230f      	movs	r3, #15
 8001bcc:	e019      	b.n	8001c02 <TransSoft2HardMux2+0x84>
		}
		if(pinValue==7)
 8001bce:	79fb      	ldrb	r3, [r7, #7]
 8001bd0:	2b07      	cmp	r3, #7
 8001bd2:	d101      	bne.n	8001bd8 <TransSoft2HardMux2+0x5a>
		{
			return 14;
 8001bd4:	230e      	movs	r3, #14
 8001bd6:	e014      	b.n	8001c02 <TransSoft2HardMux2+0x84>
		}
		if(pinValue==8)
 8001bd8:	79fb      	ldrb	r3, [r7, #7]
 8001bda:	2b08      	cmp	r3, #8
 8001bdc:	d101      	bne.n	8001be2 <TransSoft2HardMux2+0x64>
		{
			return 13;
 8001bde:	230d      	movs	r3, #13
 8001be0:	e00f      	b.n	8001c02 <TransSoft2HardMux2+0x84>
		}
		if(pinValue==9)
 8001be2:	79fb      	ldrb	r3, [r7, #7]
 8001be4:	2b09      	cmp	r3, #9
 8001be6:	d101      	bne.n	8001bec <TransSoft2HardMux2+0x6e>
		{
			return 12;
 8001be8:	230c      	movs	r3, #12
 8001bea:	e00a      	b.n	8001c02 <TransSoft2HardMux2+0x84>
		}
		if(pinValue==10)
 8001bec:	79fb      	ldrb	r3, [r7, #7]
 8001bee:	2b0a      	cmp	r3, #10
 8001bf0:	d101      	bne.n	8001bf6 <TransSoft2HardMux2+0x78>
		{
			return 11;
 8001bf2:	230b      	movs	r3, #11
 8001bf4:	e005      	b.n	8001c02 <TransSoft2HardMux2+0x84>
		}
		if(pinValue==11)
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
 8001bf8:	2b0b      	cmp	r3, #11
 8001bfa:	d101      	bne.n	8001c00 <TransSoft2HardMux2+0x82>
		{
			return 10;
 8001bfc:	230a      	movs	r3, #10
 8001bfe:	e000      	b.n	8001c02 <TransSoft2HardMux2+0x84>
		}
	return 16;
 8001c00:	2310      	movs	r3, #16
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bc80      	pop	{r7}
 8001c0a:	4770      	bx	lr

08001c0c <TransSoft2HardDec>:
uint8_t TransSoft2HardDec(uint8_t pinValue)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	71fb      	strb	r3, [r7, #7]
	if(pinValue==0)
 8001c16:	79fb      	ldrb	r3, [r7, #7]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d101      	bne.n	8001c20 <TransSoft2HardDec+0x14>
	{
		return 5;
 8001c1c:	2305      	movs	r3, #5
 8001c1e:	e032      	b.n	8001c86 <TransSoft2HardDec+0x7a>
	}
	if(pinValue==1)
 8001c20:	79fb      	ldrb	r3, [r7, #7]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d101      	bne.n	8001c2a <TransSoft2HardDec+0x1e>
	{
		return 4;
 8001c26:	2304      	movs	r3, #4
 8001c28:	e02d      	b.n	8001c86 <TransSoft2HardDec+0x7a>
	}
	if(pinValue==2)
 8001c2a:	79fb      	ldrb	r3, [r7, #7]
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d101      	bne.n	8001c34 <TransSoft2HardDec+0x28>
	{
		return 3;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e028      	b.n	8001c86 <TransSoft2HardDec+0x7a>
	}
	if(pinValue==3)
 8001c34:	79fb      	ldrb	r3, [r7, #7]
 8001c36:	2b03      	cmp	r3, #3
 8001c38:	d101      	bne.n	8001c3e <TransSoft2HardDec+0x32>
	{
		return 1;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e023      	b.n	8001c86 <TransSoft2HardDec+0x7a>
	}
	if(pinValue==4)
 8001c3e:	79fb      	ldrb	r3, [r7, #7]
 8001c40:	2b04      	cmp	r3, #4
 8001c42:	d101      	bne.n	8001c48 <TransSoft2HardDec+0x3c>
	{
		return 2;
 8001c44:	2302      	movs	r3, #2
 8001c46:	e01e      	b.n	8001c86 <TransSoft2HardDec+0x7a>
	}
	if(pinValue==5)
 8001c48:	79fb      	ldrb	r3, [r7, #7]
 8001c4a:	2b05      	cmp	r3, #5
 8001c4c:	d101      	bne.n	8001c52 <TransSoft2HardDec+0x46>
	{
		return 0;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	e019      	b.n	8001c86 <TransSoft2HardDec+0x7a>
	}
	if(pinValue==6)
 8001c52:	79fb      	ldrb	r3, [r7, #7]
 8001c54:	2b06      	cmp	r3, #6
 8001c56:	d101      	bne.n	8001c5c <TransSoft2HardDec+0x50>
	{
		return 13;
 8001c58:	230d      	movs	r3, #13
 8001c5a:	e014      	b.n	8001c86 <TransSoft2HardDec+0x7a>
	}
	if(pinValue==7)
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	2b07      	cmp	r3, #7
 8001c60:	d101      	bne.n	8001c66 <TransSoft2HardDec+0x5a>
	{
		return 12;
 8001c62:	230c      	movs	r3, #12
 8001c64:	e00f      	b.n	8001c86 <TransSoft2HardDec+0x7a>
	}
	if(pinValue==8)
 8001c66:	79fb      	ldrb	r3, [r7, #7]
 8001c68:	2b08      	cmp	r3, #8
 8001c6a:	d101      	bne.n	8001c70 <TransSoft2HardDec+0x64>
	{
		return 15;
 8001c6c:	230f      	movs	r3, #15
 8001c6e:	e00a      	b.n	8001c86 <TransSoft2HardDec+0x7a>
	}
	if(pinValue==9)
 8001c70:	79fb      	ldrb	r3, [r7, #7]
 8001c72:	2b09      	cmp	r3, #9
 8001c74:	d101      	bne.n	8001c7a <TransSoft2HardDec+0x6e>
	{
		return 14;
 8001c76:	230e      	movs	r3, #14
 8001c78:	e005      	b.n	8001c86 <TransSoft2HardDec+0x7a>
	}
	if(pinValue==10)
 8001c7a:	79fb      	ldrb	r3, [r7, #7]
 8001c7c:	2b0a      	cmp	r3, #10
 8001c7e:	d101      	bne.n	8001c84 <TransSoft2HardDec+0x78>
	{
		return 9;
 8001c80:	2309      	movs	r3, #9
 8001c82:	e000      	b.n	8001c86 <TransSoft2HardDec+0x7a>
	}
return 16;
 8001c84:	2310      	movs	r3, #16
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bc80      	pop	{r7}
 8001c8e:	4770      	bx	lr

08001c90 <MX_Mux_init>:
void MX_Mux_init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
	//Puts the mux on an initial state
	StrobeLow();
 8001c94:	f7ff fec2 	bl	8001a1c <StrobeLow>
	HAL_Delay(300);
 8001c98:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001c9c:	f000 fb3e 	bl	800231c <HAL_Delay>
	MUXCONTROL1(0);
 8001ca0:	2000      	movs	r0, #0
 8001ca2:	f7ff fdf7 	bl	8001894 <MUXCONTROL1>
	MUXCONTROL2(0);
 8001ca6:	2000      	movs	r0, #0
 8001ca8:	f7ff fe4c 	bl	8001944 <MUXCONTROL2>
	DECCONTROL(0);
 8001cac:	2000      	movs	r0, #0
 8001cae:	f7ff fec1 	bl	8001a34 <DECCONTROL>

	//Set the PB11 to high
	Set_Vref_High();
 8001cb2:	f000 f803 	bl	8001cbc <Set_Vref_High>
}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
	...

08001cbc <Set_Vref_High>:

void Set_Vref_High()
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,VREFMUX0,GPIO_PIN_SET);
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cc6:	4802      	ldr	r0, [pc, #8]	; (8001cd0 <Set_Vref_High+0x14>)
 8001cc8:	f001 fcca 	bl	8003660 <HAL_GPIO_WritePin>
}
 8001ccc:	bf00      	nop
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40010c00 	.word	0x40010c00

08001cd4 <MX_ADC_Init>:




void MX_ADC_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
	  /* USER CODE BEGIN ADC_Init 0 */

	  /* USER CODE END ADC_Init 0 */
	ADC_ChannelConfTypeDef sConfig = {0};
 8001cda:	1d3b      	adds	r3, r7, #4
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	609a      	str	r2, [r3, #8]

	  /* USER CODE END ADC_Init  */
	  /**
	   *
	  */
	  hadc1.Instance = ADC1;
 8001ce4:	4b13      	ldr	r3, [pc, #76]	; (8001d34 <MX_ADC_Init+0x60>)
 8001ce6:	4a14      	ldr	r2, [pc, #80]	; (8001d38 <MX_ADC_Init+0x64>)
 8001ce8:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001cea:	4b12      	ldr	r3, [pc, #72]	; (8001d34 <MX_ADC_Init+0x60>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	609a      	str	r2, [r3, #8]
	  hadc1.Init.ContinuousConvMode = DISABLE;
 8001cf0:	4b10      	ldr	r3, [pc, #64]	; (8001d34 <MX_ADC_Init+0x60>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	731a      	strb	r2, [r3, #12]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001cf6:	4b0f      	ldr	r3, [pc, #60]	; (8001d34 <MX_ADC_Init+0x60>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	751a      	strb	r2, [r3, #20]
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001cfc:	4b0d      	ldr	r3, [pc, #52]	; (8001d34 <MX_ADC_Init+0x60>)
 8001cfe:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001d02:	61da      	str	r2, [r3, #28]
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d04:	4b0b      	ldr	r3, [pc, #44]	; (8001d34 <MX_ADC_Init+0x60>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	605a      	str	r2, [r3, #4]
	  hadc1.Init.NbrOfConversion = 1;
 8001d0a:	4b0a      	ldr	r3, [pc, #40]	; (8001d34 <MX_ADC_Init+0x60>)
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	611a      	str	r2, [r3, #16]
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d10:	4808      	ldr	r0, [pc, #32]	; (8001d34 <MX_ADC_Init+0x60>)
 8001d12:	f000 fb25 	bl	8002360 <HAL_ADC_Init>
	   // Error_Handler();
	  }
	  /** Configure Regular Channel
	   *
	  */
	  sConfig.Channel = ADC_CHANNEL_15;
 8001d16:	230f      	movs	r3, #15
 8001d18:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d22:	1d3b      	adds	r3, r7, #4
 8001d24:	4619      	mov	r1, r3
 8001d26:	4803      	ldr	r0, [pc, #12]	; (8001d34 <MX_ADC_Init+0x60>)
 8001d28:	f000 fda6 	bl	8002878 <HAL_ADC_ConfigChannel>
	   // Error_Handler();
	  }
	  /* USER CODE BEGIN ADC_Init  */

	  /* USER CODE END ADC_Init  */
}
 8001d2c:	bf00      	nop
 8001d2e:	3710      	adds	r7, #16
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	200000c4 	.word	0x200000c4
 8001d38:	40012400 	.word	0x40012400

08001d3c <ChangeChannel>:
void ChangeChannel(ADC_HandleTypeDef *hadc1,uint8_t Channel)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	460b      	mov	r3, r1
 8001d46:	70fb      	strb	r3, [r7, #3]
	if(Channel==PTCCHANNEL||Channel==MATRIXCHANNEL)
 8001d48:	78fb      	ldrb	r3, [r7, #3]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d002      	beq.n	8001d54 <ChangeChannel+0x18>
 8001d4e:	78fb      	ldrb	r3, [r7, #3]
 8001d50:	2b0f      	cmp	r3, #15
 8001d52:	d117      	bne.n	8001d84 <ChangeChannel+0x48>
	{
	ADC_ChannelConfTypeDef sConfig = {0};
 8001d54:	f107 030c 	add.w	r3, r7, #12
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	609a      	str	r2, [r3, #8]
	if (Channel==0)
 8001d60:	78fb      	ldrb	r3, [r7, #3]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d102      	bne.n	8001d6c <ChangeChannel+0x30>
		  sConfig.Channel = ADC_CHANNEL_0;
 8001d66:	2300      	movs	r3, #0
 8001d68:	60fb      	str	r3, [r7, #12]
 8001d6a:	e001      	b.n	8001d70 <ChangeChannel+0x34>
	else
		  sConfig.Channel = ADC_CHANNEL_15;
 8001d6c:	230f      	movs	r3, #15
 8001d6e:	60fb      	str	r3, [r7, #12]

	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d70:	2301      	movs	r3, #1
 8001d72:	613b      	str	r3, [r7, #16]
	  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8001d74:	2303      	movs	r3, #3
 8001d76:	617b      	str	r3, [r7, #20]
	  if (HAL_ADC_ConfigChannel(hadc1, &sConfig) != HAL_OK)
 8001d78:	f107 030c 	add.w	r3, r7, #12
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 fd7a 	bl	8002878 <HAL_ADC_ConfigChannel>
	else
	{
		//Error_Handler(); //pas fait encore
	}

}
 8001d84:	bf00      	nop
 8001d86:	3718      	adds	r7, #24
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <MX_CAN_Init>:
 */
#include "can.h"

/* CAN init function */
void MX_CAN_Init(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b08a      	sub	sp, #40	; 0x28
 8001d90:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8001d92:	4b24      	ldr	r3, [pc, #144]	; (8001e24 <MX_CAN_Init+0x98>)
 8001d94:	4a24      	ldr	r2, [pc, #144]	; (8001e28 <MX_CAN_Init+0x9c>)
 8001d96:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8001d98:	4b22      	ldr	r3, [pc, #136]	; (8001e24 <MX_CAN_Init+0x98>)
 8001d9a:	2204      	movs	r2, #4
 8001d9c:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001d9e:	4b21      	ldr	r3, [pc, #132]	; (8001e24 <MX_CAN_Init+0x98>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001da4:	4b1f      	ldr	r3, [pc, #124]	; (8001e24 <MX_CAN_Init+0x98>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_11TQ;
 8001daa:	4b1e      	ldr	r3, [pc, #120]	; (8001e24 <MX_CAN_Init+0x98>)
 8001dac:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8001db0:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 8001db2:	4b1c      	ldr	r3, [pc, #112]	; (8001e24 <MX_CAN_Init+0x98>)
 8001db4:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8001db8:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001dba:	4b1a      	ldr	r3, [pc, #104]	; (8001e24 <MX_CAN_Init+0x98>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001dc0:	4b18      	ldr	r3, [pc, #96]	; (8001e24 <MX_CAN_Init+0x98>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001dc6:	4b17      	ldr	r3, [pc, #92]	; (8001e24 <MX_CAN_Init+0x98>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001dcc:	4b15      	ldr	r3, [pc, #84]	; (8001e24 <MX_CAN_Init+0x98>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001dd2:	4b14      	ldr	r3, [pc, #80]	; (8001e24 <MX_CAN_Init+0x98>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001dd8:	4b12      	ldr	r3, [pc, #72]	; (8001e24 <MX_CAN_Init+0x98>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001dde:	4811      	ldr	r0, [pc, #68]	; (8001e24 <MX_CAN_Init+0x98>)
 8001de0:	f000 fece 	bl	8002b80 <HAL_CAN_Init>
  {
  //  Error_Handler();
  }
  /* USER CODE BEGIN CAN_Init 2 */

  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001de4:	2300      	movs	r3, #0
 8001de6:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001de8:	2301      	movs	r3, #1
 8001dea:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x700<<5;// a verifier le range des adresses qu<on veut qu'il applique
 8001dec:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001df0:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0;
 8001df2:	2300      	movs	r3, #0
 8001df4:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0xfff<<5;
 8001df6:	4b0d      	ldr	r3, [pc, #52]	; (8001e2c <MX_CAN_Init+0xa0>)
 8001df8:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = 0;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8001e02:	2301      	movs	r3, #1
 8001e04:	623b      	str	r3, [r7, #32]
  sFilterConfig.FilterBank = 0;
 8001e06:	2300      	movs	r3, #0
 8001e08:	617b      	str	r3, [r7, #20]


  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 8001e0a:	463b      	mov	r3, r7
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4805      	ldr	r0, [pc, #20]	; (8001e24 <MX_CAN_Init+0x98>)
 8001e10:	f000 ffb1 	bl	8002d76 <HAL_CAN_ConfigFilter>
	  {
		//Error_Handler();// Aucun error handler de fait encore
	  }


  if ( HAL_CAN_Start(&hcan) != HAL_OK)
 8001e14:	4803      	ldr	r0, [pc, #12]	; (8001e24 <MX_CAN_Init+0x98>)
 8001e16:	f001 f877 	bl	8002f08 <HAL_CAN_Start>
   	  {
	   // Error_Handler();// Aucun error handler de fait encore
	  }

}
 8001e1a:	bf00      	nop
 8001e1c:	3728      	adds	r7, #40	; 0x28
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	2000009c 	.word	0x2000009c
 8001e28:	40006400 	.word	0x40006400
 8001e2c:	0001ffe0 	.word	0x0001ffe0

08001e30 <canTransmit>:

void canTransmit(uint16_t canId, uint8_t len, uint8_t* canMessage){
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	603a      	str	r2, [r7, #0]
 8001e3a:	80fb      	strh	r3, [r7, #6]
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	717b      	strb	r3, [r7, #5]
	TxMessage.StdId = canId;
 8001e40:	88fb      	ldrh	r3, [r7, #6]
 8001e42:	4a1d      	ldr	r2, [pc, #116]	; (8001eb8 <canTransmit+0x88>)
 8001e44:	6013      	str	r3, [r2, #0]
	TxMessage.DLC = len;
 8001e46:	797b      	ldrb	r3, [r7, #5]
 8001e48:	4a1b      	ldr	r2, [pc, #108]	; (8001eb8 <canTransmit+0x88>)
 8001e4a:	6113      	str	r3, [r2, #16]
	TxMessage.RTR = CAN_RTR_DATA;
 8001e4c:	4b1a      	ldr	r3, [pc, #104]	; (8001eb8 <canTransmit+0x88>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	60da      	str	r2, [r3, #12]
	TxMessage.IDE = CAN_ID_STD;
 8001e52:	4b19      	ldr	r3, [pc, #100]	; (8001eb8 <canTransmit+0x88>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	609a      	str	r2, [r3, #8]
	TxMessage.ExtId = 0x01;
 8001e58:	4b17      	ldr	r3, [pc, #92]	; (8001eb8 <canTransmit+0x88>)
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	605a      	str	r2, [r3, #4]
	TxMessage.TransmitGlobalTime = DISABLE;
 8001e5e:	4b16      	ldr	r3, [pc, #88]	; (8001eb8 <canTransmit+0x88>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	751a      	strb	r2, [r3, #20]
	uint8_t Data[8];
	uint32_t Tx_Mailbox=0;
 8001e64:	2300      	movs	r3, #0
 8001e66:	60bb      	str	r3, [r7, #8]

  for(uint8_t i=0; i<len; i++) {
 8001e68:	2300      	movs	r3, #0
 8001e6a:	75fb      	strb	r3, [r7, #23]
 8001e6c:	e00d      	b.n	8001e8a <canTransmit+0x5a>
	  Data[i] = *canMessage;
 8001e6e:	7dfb      	ldrb	r3, [r7, #23]
 8001e70:	683a      	ldr	r2, [r7, #0]
 8001e72:	7812      	ldrb	r2, [r2, #0]
 8001e74:	f107 0118 	add.w	r1, r7, #24
 8001e78:	440b      	add	r3, r1
 8001e7a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    canMessage++;
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	3301      	adds	r3, #1
 8001e82:	603b      	str	r3, [r7, #0]
  for(uint8_t i=0; i<len; i++) {
 8001e84:	7dfb      	ldrb	r3, [r7, #23]
 8001e86:	3301      	adds	r3, #1
 8001e88:	75fb      	strb	r3, [r7, #23]
 8001e8a:	7dfa      	ldrb	r2, [r7, #23]
 8001e8c:	797b      	ldrb	r3, [r7, #5]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d3ed      	bcc.n	8001e6e <canTransmit+0x3e>
  }

  if(HAL_CAN_GetTxMailboxesFreeLevel(&hcan)>0)
 8001e92:	480a      	ldr	r0, [pc, #40]	; (8001ebc <canTransmit+0x8c>)
 8001e94:	f001 f956 	bl	8003144 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d007      	beq.n	8001eae <canTransmit+0x7e>
	  {
	  if (HAL_CAN_AddTxMessage(&hcan,&TxMessage,Data,&Tx_Mailbox) != HAL_OK)
 8001e9e:	f107 0308 	add.w	r3, r7, #8
 8001ea2:	f107 020c 	add.w	r2, r7, #12
 8001ea6:	4904      	ldr	r1, [pc, #16]	; (8001eb8 <canTransmit+0x88>)
 8001ea8:	4804      	ldr	r0, [pc, #16]	; (8001ebc <canTransmit+0x8c>)
 8001eaa:	f001 f871 	bl	8002f90 <HAL_CAN_AddTxMessage>
		  {
		//	Error_Handler();// Aucun error handler de fait encore
		  }
	  }

}
 8001eae:	bf00      	nop
 8001eb0:	3718      	adds	r7, #24
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	200000f4 	.word	0x200000f4
 8001ebc:	2000009c 	.word	0x2000009c

08001ec0 <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ec4:	f000 f9c8 	bl	8002258 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ec8:	f000 f81e 	bl	8001f08 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_Delay(1000);
 8001ecc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ed0:	f000 fa24 	bl	800231c <HAL_Delay>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ed4:	f7ff fc4e 	bl	8001774 <MX_GPIO_Init>
  MX_ADC_Init();
 8001ed8:	f7ff fefc 	bl	8001cd4 <MX_ADC_Init>
  MX_CAN_Init();
 8001edc:	f7ff ff56 	bl	8001d8c <MX_CAN_Init>
//  MX_IWDG_Init();
  MX_Mux_init();
 8001ee0:	f7ff fed6 	bl	8001c90 <MX_Mux_init>
  FrameWorkInit();
 8001ee4:	f7ff fc30 	bl	8001748 <FrameWorkInit>
  /* USER CODE BEGIN 2 */
  BP_Initialisation();
 8001ee8:	f7ff f87a 	bl	8000fe0 <BP_Initialisation>
  /* USER CODE END 2 */
  HAL_Delay(1000);
 8001eec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ef0:	f000 fa14 	bl	800231c <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
     /*USER CODE BEGIN 3 */
	FrameWorkTask();
 8001ef4:	f7ff fc38 	bl	8001768 <FrameWorkTask>
	BP_ReadAll();
 8001ef8:	f7ff fad8 	bl	80014ac <BP_ReadAll>
	BP_canFormat();
 8001efc:	f7ff fade 	bl	80014bc <BP_canFormat>
	BP_Reset();
 8001f00:	f7ff f8aa 	bl	8001058 <BP_Reset>
	FrameWorkTask();
 8001f04:	e7f6      	b.n	8001ef4 <main+0x34>
	...

08001f08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b094      	sub	sp, #80	; 0x50
 8001f0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f12:	2228      	movs	r2, #40	; 0x28
 8001f14:	2100      	movs	r1, #0
 8001f16:	4618      	mov	r0, r3
 8001f18:	f002 f95e 	bl	80041d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f1c:	f107 0314 	add.w	r3, r7, #20
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	609a      	str	r2, [r3, #8]
 8001f28:	60da      	str	r2, [r3, #12]
 8001f2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f2c:	1d3b      	adds	r3, r7, #4
 8001f2e:	2200      	movs	r2, #0
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	605a      	str	r2, [r3, #4]
 8001f34:	609a      	str	r2, [r3, #8]
 8001f36:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f38:	2302      	movs	r3, #2
 8001f3a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f40:	2310      	movs	r3, #16
 8001f42:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_OFF;
 8001f44:	2301      	movs	r3, #1
 8001f46:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f001 fb9f 	bl	8003690 <HAL_RCC_OscConfig>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001f58:	f000 f83c 	bl	8001fd4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f5c:	230f      	movs	r3, #15
 8001f5e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001f60:	2300      	movs	r3, #0
 8001f62:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f64:	2300      	movs	r3, #0
 8001f66:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001f70:	f107 0314 	add.w	r3, r7, #20
 8001f74:	2100      	movs	r1, #0
 8001f76:	4618      	mov	r0, r3
 8001f78:	f001 fe0a 	bl	8003b90 <HAL_RCC_ClockConfig>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001f82:	f000 f827 	bl	8001fd4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001f86:	2302      	movs	r3, #2
 8001f88:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8001f8a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f8e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f90:	1d3b      	adds	r3, r7, #4
 8001f92:	4618      	mov	r0, r3
 8001f94:	f001 ff84 	bl	8003ea0 <HAL_RCCEx_PeriphCLKConfig>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001f9e:	f000 f819 	bl	8001fd4 <Error_Handler>
  }

    /**Configure the Systick interrupt time
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001fa2:	f001 ff41 	bl	8003e28 <HAL_RCC_GetHCLKFreq>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	4b09      	ldr	r3, [pc, #36]	; (8001fd0 <SystemClock_Config+0xc8>)
 8001faa:	fba3 2302 	umull	r2, r3, r3, r2
 8001fae:	099b      	lsrs	r3, r3, #6
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f001 f9d2 	bl	800335a <HAL_SYSTICK_Config>

    /**Configure the Systick
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001fb6:	2004      	movs	r0, #4
 8001fb8:	f001 f9dc 	bl	8003374 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc4:	f001 f9ad 	bl	8003322 <HAL_NVIC_SetPriority>
}
 8001fc8:	bf00      	nop
 8001fca:	3750      	adds	r7, #80	; 0x50
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	10624dd3 	.word	0x10624dd3

08001fd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001fd8:	bf00      	nop
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bc80      	pop	{r7}
 8001fde:	4770      	bx	lr

08001fe0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001fe6:	4b15      	ldr	r3, [pc, #84]	; (800203c <HAL_MspInit+0x5c>)
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	4a14      	ldr	r2, [pc, #80]	; (800203c <HAL_MspInit+0x5c>)
 8001fec:	f043 0301 	orr.w	r3, r3, #1
 8001ff0:	6193      	str	r3, [r2, #24]
 8001ff2:	4b12      	ldr	r3, [pc, #72]	; (800203c <HAL_MspInit+0x5c>)
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	60bb      	str	r3, [r7, #8]
 8001ffc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ffe:	4b0f      	ldr	r3, [pc, #60]	; (800203c <HAL_MspInit+0x5c>)
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	4a0e      	ldr	r2, [pc, #56]	; (800203c <HAL_MspInit+0x5c>)
 8002004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002008:	61d3      	str	r3, [r2, #28]
 800200a:	4b0c      	ldr	r3, [pc, #48]	; (800203c <HAL_MspInit+0x5c>)
 800200c:	69db      	ldr	r3, [r3, #28]
 800200e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002012:	607b      	str	r3, [r7, #4]
 8002014:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002016:	4b0a      	ldr	r3, [pc, #40]	; (8002040 <HAL_MspInit+0x60>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	4a04      	ldr	r2, [pc, #16]	; (8002040 <HAL_MspInit+0x60>)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002032:	bf00      	nop
 8002034:	3714      	adds	r7, #20
 8002036:	46bd      	mov	sp, r7
 8002038:	bc80      	pop	{r7}
 800203a:	4770      	bx	lr
 800203c:	40021000 	.word	0x40021000
 8002040:	40010000 	.word	0x40010000

08002044 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b08a      	sub	sp, #40	; 0x28
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800204c:	f107 0318 	add.w	r3, r7, #24
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	605a      	str	r2, [r3, #4]
 8002056:	609a      	str	r2, [r3, #8]
 8002058:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a1f      	ldr	r2, [pc, #124]	; (80020dc <HAL_ADC_MspInit+0x98>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d137      	bne.n	80020d4 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002064:	4b1e      	ldr	r3, [pc, #120]	; (80020e0 <HAL_ADC_MspInit+0x9c>)
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	4a1d      	ldr	r2, [pc, #116]	; (80020e0 <HAL_ADC_MspInit+0x9c>)
 800206a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800206e:	6193      	str	r3, [r2, #24]
 8002070:	4b1b      	ldr	r3, [pc, #108]	; (80020e0 <HAL_ADC_MspInit+0x9c>)
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002078:	617b      	str	r3, [r7, #20]
 800207a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800207c:	4b18      	ldr	r3, [pc, #96]	; (80020e0 <HAL_ADC_MspInit+0x9c>)
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	4a17      	ldr	r2, [pc, #92]	; (80020e0 <HAL_ADC_MspInit+0x9c>)
 8002082:	f043 0304 	orr.w	r3, r3, #4
 8002086:	6193      	str	r3, [r2, #24]
 8002088:	4b15      	ldr	r3, [pc, #84]	; (80020e0 <HAL_ADC_MspInit+0x9c>)
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	f003 0304 	and.w	r3, r3, #4
 8002090:	613b      	str	r3, [r7, #16]
 8002092:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002094:	4b12      	ldr	r3, [pc, #72]	; (80020e0 <HAL_ADC_MspInit+0x9c>)
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	4a11      	ldr	r2, [pc, #68]	; (80020e0 <HAL_ADC_MspInit+0x9c>)
 800209a:	f043 0310 	orr.w	r3, r3, #16
 800209e:	6193      	str	r3, [r2, #24]
 80020a0:	4b0f      	ldr	r3, [pc, #60]	; (80020e0 <HAL_ADC_MspInit+0x9c>)
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	f003 0310 	and.w	r3, r3, #16
 80020a8:	60fb      	str	r3, [r7, #12]
 80020aa:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80020ac:	2301      	movs	r3, #1
 80020ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020b0:	2303      	movs	r3, #3
 80020b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020b4:	f107 0318 	add.w	r3, r7, #24
 80020b8:	4619      	mov	r1, r3
 80020ba:	480a      	ldr	r0, [pc, #40]	; (80020e4 <HAL_ADC_MspInit+0xa0>)
 80020bc:	f001 f976 	bl	80033ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80020c0:	2320      	movs	r3, #32
 80020c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020c4:	2303      	movs	r3, #3
 80020c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020c8:	f107 0318 	add.w	r3, r7, #24
 80020cc:	4619      	mov	r1, r3
 80020ce:	4806      	ldr	r0, [pc, #24]	; (80020e8 <HAL_ADC_MspInit+0xa4>)
 80020d0:	f001 f96c 	bl	80033ac <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80020d4:	bf00      	nop
 80020d6:	3728      	adds	r7, #40	; 0x28
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40012400 	.word	0x40012400
 80020e0:	40021000 	.word	0x40021000
 80020e4:	40010800 	.word	0x40010800
 80020e8:	40011000 	.word	0x40011000

080020ec <HAL_CAN_MspInit>:
  }

}

void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b08a      	sub	sp, #40	; 0x28
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f4:	f107 0314 	add.w	r3, r7, #20
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	605a      	str	r2, [r3, #4]
 80020fe:	609a      	str	r2, [r3, #8]
 8002100:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a25      	ldr	r2, [pc, #148]	; (800219c <HAL_CAN_MspInit+0xb0>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d143      	bne.n	8002194 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800210c:	4b24      	ldr	r3, [pc, #144]	; (80021a0 <HAL_CAN_MspInit+0xb4>)
 800210e:	69db      	ldr	r3, [r3, #28]
 8002110:	4a23      	ldr	r2, [pc, #140]	; (80021a0 <HAL_CAN_MspInit+0xb4>)
 8002112:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002116:	61d3      	str	r3, [r2, #28]
 8002118:	4b21      	ldr	r3, [pc, #132]	; (80021a0 <HAL_CAN_MspInit+0xb4>)
 800211a:	69db      	ldr	r3, [r3, #28]
 800211c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002120:	613b      	str	r3, [r7, #16]
 8002122:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002124:	4b1e      	ldr	r3, [pc, #120]	; (80021a0 <HAL_CAN_MspInit+0xb4>)
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	4a1d      	ldr	r2, [pc, #116]	; (80021a0 <HAL_CAN_MspInit+0xb4>)
 800212a:	f043 0308 	orr.w	r3, r3, #8
 800212e:	6193      	str	r3, [r2, #24]
 8002130:	4b1b      	ldr	r3, [pc, #108]	; (80021a0 <HAL_CAN_MspInit+0xb4>)
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	f003 0308 	and.w	r3, r3, #8
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800213c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002140:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002142:	2300      	movs	r3, #0
 8002144:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002146:	2300      	movs	r3, #0
 8002148:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800214a:	f107 0314 	add.w	r3, r7, #20
 800214e:	4619      	mov	r1, r3
 8002150:	4814      	ldr	r0, [pc, #80]	; (80021a4 <HAL_CAN_MspInit+0xb8>)
 8002152:	f001 f92b 	bl	80033ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002156:	f44f 7300 	mov.w	r3, #512	; 0x200
 800215a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800215c:	2302      	movs	r3, #2
 800215e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002160:	2303      	movs	r3, #3
 8002162:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002164:	f107 0314 	add.w	r3, r7, #20
 8002168:	4619      	mov	r1, r3
 800216a:	480e      	ldr	r0, [pc, #56]	; (80021a4 <HAL_CAN_MspInit+0xb8>)
 800216c:	f001 f91e 	bl	80033ac <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8002170:	4b0d      	ldr	r3, [pc, #52]	; (80021a8 <HAL_CAN_MspInit+0xbc>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	627b      	str	r3, [r7, #36]	; 0x24
 8002176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002178:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800217c:	627b      	str	r3, [r7, #36]	; 0x24
 800217e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002180:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002184:	627b      	str	r3, [r7, #36]	; 0x24
 8002186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002188:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800218c:	627b      	str	r3, [r7, #36]	; 0x24
 800218e:	4a06      	ldr	r2, [pc, #24]	; (80021a8 <HAL_CAN_MspInit+0xbc>)
 8002190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002192:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002194:	bf00      	nop
 8002196:	3728      	adds	r7, #40	; 0x28
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40006400 	.word	0x40006400
 80021a0:	40021000 	.word	0x40021000
 80021a4:	40010c00 	.word	0x40010c00
 80021a8:	40010000 	.word	0x40010000

080021ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80021b0:	bf00      	nop
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bc80      	pop	{r7}
 80021b6:	4770      	bx	lr

080021b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021bc:	e7fe      	b.n	80021bc <HardFault_Handler+0x4>

080021be <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021be:	b480      	push	{r7}
 80021c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021c2:	e7fe      	b.n	80021c2 <MemManage_Handler+0x4>

080021c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021c8:	e7fe      	b.n	80021c8 <BusFault_Handler+0x4>

080021ca <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021ca:	b480      	push	{r7}
 80021cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021ce:	e7fe      	b.n	80021ce <UsageFault_Handler+0x4>

080021d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021d4:	bf00      	nop
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bc80      	pop	{r7}
 80021da:	4770      	bx	lr

080021dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021e0:	bf00      	nop
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bc80      	pop	{r7}
 80021e6:	4770      	bx	lr

080021e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021ec:	bf00      	nop
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bc80      	pop	{r7}
 80021f2:	4770      	bx	lr

080021f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021f8:	f000 f874 	bl	80022e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021fc:	bf00      	nop
 80021fe:	bd80      	pop	{r7, pc}

08002200 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002204:	bf00      	nop
 8002206:	46bd      	mov	sp, r7
 8002208:	bc80      	pop	{r7}
 800220a:	4770      	bx	lr

0800220c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800220c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800220e:	e003      	b.n	8002218 <LoopCopyDataInit>

08002210 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002210:	4b0b      	ldr	r3, [pc, #44]	; (8002240 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002212:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002214:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002216:	3104      	adds	r1, #4

08002218 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002218:	480a      	ldr	r0, [pc, #40]	; (8002244 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800221a:	4b0b      	ldr	r3, [pc, #44]	; (8002248 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800221c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800221e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002220:	d3f6      	bcc.n	8002210 <CopyDataInit>
  ldr r2, =_sbss
 8002222:	4a0a      	ldr	r2, [pc, #40]	; (800224c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002224:	e002      	b.n	800222c <LoopFillZerobss>

08002226 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002226:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002228:	f842 3b04 	str.w	r3, [r2], #4

0800222c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800222c:	4b08      	ldr	r3, [pc, #32]	; (8002250 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800222e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002230:	d3f9      	bcc.n	8002226 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002232:	f7ff ffe5 	bl	8002200 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002236:	f001 ffab 	bl	8004190 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800223a:	f7ff fe41 	bl	8001ec0 <main>
  bx lr
 800223e:	4770      	bx	lr
  ldr r3, =_sidata
 8002240:	0800458c 	.word	0x0800458c
  ldr r0, =_sdata
 8002244:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002248:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 800224c:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8002250:	20000260 	.word	0x20000260

08002254 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002254:	e7fe      	b.n	8002254 <ADC1_2_IRQHandler>
	...

08002258 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800225c:	4b08      	ldr	r3, [pc, #32]	; (8002280 <HAL_Init+0x28>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a07      	ldr	r2, [pc, #28]	; (8002280 <HAL_Init+0x28>)
 8002262:	f043 0310 	orr.w	r3, r3, #16
 8002266:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002268:	2003      	movs	r0, #3
 800226a:	f001 f84f 	bl	800330c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800226e:	2000      	movs	r0, #0
 8002270:	f000 f808 	bl	8002284 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002274:	f7ff feb4 	bl	8001fe0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	40022000 	.word	0x40022000

08002284 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800228c:	4b12      	ldr	r3, [pc, #72]	; (80022d8 <HAL_InitTick+0x54>)
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	4b12      	ldr	r3, [pc, #72]	; (80022dc <HAL_InitTick+0x58>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	4619      	mov	r1, r3
 8002296:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800229a:	fbb3 f3f1 	udiv	r3, r3, r1
 800229e:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a2:	4618      	mov	r0, r3
 80022a4:	f001 f859 	bl	800335a <HAL_SYSTICK_Config>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e00e      	b.n	80022d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2b0f      	cmp	r3, #15
 80022b6:	d80a      	bhi.n	80022ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022b8:	2200      	movs	r2, #0
 80022ba:	6879      	ldr	r1, [r7, #4]
 80022bc:	f04f 30ff 	mov.w	r0, #4294967295
 80022c0:	f001 f82f 	bl	8003322 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022c4:	4a06      	ldr	r2, [pc, #24]	; (80022e0 <HAL_InitTick+0x5c>)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022ca:	2300      	movs	r3, #0
 80022cc:	e000      	b.n	80022d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	20000000 	.word	0x20000000
 80022dc:	20000008 	.word	0x20000008
 80022e0:	20000004 	.word	0x20000004

080022e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022e8:	4b05      	ldr	r3, [pc, #20]	; (8002300 <HAL_IncTick+0x1c>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	461a      	mov	r2, r3
 80022ee:	4b05      	ldr	r3, [pc, #20]	; (8002304 <HAL_IncTick+0x20>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4413      	add	r3, r2
 80022f4:	4a03      	ldr	r2, [pc, #12]	; (8002304 <HAL_IncTick+0x20>)
 80022f6:	6013      	str	r3, [r2, #0]
}
 80022f8:	bf00      	nop
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bc80      	pop	{r7}
 80022fe:	4770      	bx	lr
 8002300:	20000008 	.word	0x20000008
 8002304:	2000025c 	.word	0x2000025c

08002308 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  return uwTick;
 800230c:	4b02      	ldr	r3, [pc, #8]	; (8002318 <HAL_GetTick+0x10>)
 800230e:	681b      	ldr	r3, [r3, #0]
}
 8002310:	4618      	mov	r0, r3
 8002312:	46bd      	mov	sp, r7
 8002314:	bc80      	pop	{r7}
 8002316:	4770      	bx	lr
 8002318:	2000025c 	.word	0x2000025c

0800231c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002324:	f7ff fff0 	bl	8002308 <HAL_GetTick>
 8002328:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002334:	d005      	beq.n	8002342 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002336:	4b09      	ldr	r3, [pc, #36]	; (800235c <HAL_Delay+0x40>)
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	461a      	mov	r2, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	4413      	add	r3, r2
 8002340:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002342:	bf00      	nop
 8002344:	f7ff ffe0 	bl	8002308 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	429a      	cmp	r2, r3
 8002352:	d8f7      	bhi.n	8002344 <HAL_Delay+0x28>
  {
  }
}
 8002354:	bf00      	nop
 8002356:	3710      	adds	r7, #16
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	20000008 	.word	0x20000008

08002360 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002368:	2300      	movs	r3, #0
 800236a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800236c:	2300      	movs	r3, #0
 800236e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002370:	2300      	movs	r3, #0
 8002372:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002374:	2300      	movs	r3, #0
 8002376:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d101      	bne.n	8002382 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e0be      	b.n	8002500 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238c:	2b00      	cmp	r3, #0
 800238e:	d109      	bne.n	80023a4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f7ff fe50 	bl	8002044 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f000 fbb1 	bl	8002b0c <ADC_ConversionStop_Disable>
 80023aa:	4603      	mov	r3, r0
 80023ac:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b2:	f003 0310 	and.w	r3, r3, #16
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	f040 8099 	bne.w	80024ee <HAL_ADC_Init+0x18e>
 80023bc:	7dfb      	ldrb	r3, [r7, #23]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	f040 8095 	bne.w	80024ee <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80023cc:	f023 0302 	bic.w	r3, r3, #2
 80023d0:	f043 0202 	orr.w	r2, r3, #2
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80023e0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	7b1b      	ldrb	r3, [r3, #12]
 80023e6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80023e8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023f8:	d003      	beq.n	8002402 <HAL_ADC_Init+0xa2>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d102      	bne.n	8002408 <HAL_ADC_Init+0xa8>
 8002402:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002406:	e000      	b.n	800240a <HAL_ADC_Init+0xaa>
 8002408:	2300      	movs	r3, #0
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	4313      	orrs	r3, r2
 800240e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	7d1b      	ldrb	r3, [r3, #20]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d119      	bne.n	800244c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	7b1b      	ldrb	r3, [r3, #12]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d109      	bne.n	8002434 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	3b01      	subs	r3, #1
 8002426:	035a      	lsls	r2, r3, #13
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	4313      	orrs	r3, r2
 800242c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002430:	613b      	str	r3, [r7, #16]
 8002432:	e00b      	b.n	800244c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002438:	f043 0220 	orr.w	r2, r3, #32
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002444:	f043 0201 	orr.w	r2, r3, #1
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	430a      	orrs	r2, r1
 800245e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689a      	ldr	r2, [r3, #8]
 8002466:	4b28      	ldr	r3, [pc, #160]	; (8002508 <HAL_ADC_Init+0x1a8>)
 8002468:	4013      	ands	r3, r2
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	6812      	ldr	r2, [r2, #0]
 800246e:	68b9      	ldr	r1, [r7, #8]
 8002470:	430b      	orrs	r3, r1
 8002472:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800247c:	d003      	beq.n	8002486 <HAL_ADC_Init+0x126>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d104      	bne.n	8002490 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	3b01      	subs	r3, #1
 800248c:	051b      	lsls	r3, r3, #20
 800248e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002496:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	430a      	orrs	r2, r1
 80024a2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	689a      	ldr	r2, [r3, #8]
 80024aa:	4b18      	ldr	r3, [pc, #96]	; (800250c <HAL_ADC_Init+0x1ac>)
 80024ac:	4013      	ands	r3, r2
 80024ae:	68ba      	ldr	r2, [r7, #8]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d10b      	bne.n	80024cc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024be:	f023 0303 	bic.w	r3, r3, #3
 80024c2:	f043 0201 	orr.w	r2, r3, #1
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80024ca:	e018      	b.n	80024fe <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d0:	f023 0312 	bic.w	r3, r3, #18
 80024d4:	f043 0210 	orr.w	r2, r3, #16
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e0:	f043 0201 	orr.w	r2, r3, #1
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80024ec:	e007      	b.n	80024fe <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f2:	f043 0210 	orr.w	r2, r3, #16
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80024fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002500:	4618      	mov	r0, r3
 8002502:	3718      	adds	r7, #24
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	ffe1f7fd 	.word	0xffe1f7fd
 800250c:	ff1f0efe 	.word	0xff1f0efe

08002510 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002518:	2300      	movs	r3, #0
 800251a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002522:	2b01      	cmp	r3, #1
 8002524:	d101      	bne.n	800252a <HAL_ADC_Start+0x1a>
 8002526:	2302      	movs	r3, #2
 8002528:	e098      	b.n	800265c <HAL_ADC_Start+0x14c>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2201      	movs	r2, #1
 800252e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 fa98 	bl	8002a68 <ADC_Enable>
 8002538:	4603      	mov	r3, r0
 800253a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800253c:	7bfb      	ldrb	r3, [r7, #15]
 800253e:	2b00      	cmp	r3, #0
 8002540:	f040 8087 	bne.w	8002652 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002548:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800254c:	f023 0301 	bic.w	r3, r3, #1
 8002550:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a41      	ldr	r2, [pc, #260]	; (8002664 <HAL_ADC_Start+0x154>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d105      	bne.n	800256e <HAL_ADC_Start+0x5e>
 8002562:	4b41      	ldr	r3, [pc, #260]	; (8002668 <HAL_ADC_Start+0x158>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d115      	bne.n	800259a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002572:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002584:	2b00      	cmp	r3, #0
 8002586:	d026      	beq.n	80025d6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002590:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002598:	e01d      	b.n	80025d6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a2f      	ldr	r2, [pc, #188]	; (8002668 <HAL_ADC_Start+0x158>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d004      	beq.n	80025ba <HAL_ADC_Start+0xaa>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a2b      	ldr	r2, [pc, #172]	; (8002664 <HAL_ADC_Start+0x154>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d10d      	bne.n	80025d6 <HAL_ADC_Start+0xc6>
 80025ba:	4b2b      	ldr	r3, [pc, #172]	; (8002668 <HAL_ADC_Start+0x158>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d007      	beq.n	80025d6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025ce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d006      	beq.n	80025f0 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e6:	f023 0206 	bic.w	r2, r3, #6
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80025ee:	e002      	b.n	80025f6 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f06f 0202 	mvn.w	r2, #2
 8002606:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002612:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002616:	d113      	bne.n	8002640 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800261c:	4a11      	ldr	r2, [pc, #68]	; (8002664 <HAL_ADC_Start+0x154>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d105      	bne.n	800262e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002622:	4b11      	ldr	r3, [pc, #68]	; (8002668 <HAL_ADC_Start+0x158>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800262a:	2b00      	cmp	r3, #0
 800262c:	d108      	bne.n	8002640 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	689a      	ldr	r2, [r3, #8]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800263c:	609a      	str	r2, [r3, #8]
 800263e:	e00c      	b.n	800265a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	689a      	ldr	r2, [r3, #8]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800264e:	609a      	str	r2, [r3, #8]
 8002650:	e003      	b.n	800265a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800265a:	7bfb      	ldrb	r3, [r7, #15]
}
 800265c:	4618      	mov	r0, r3
 800265e:	3710      	adds	r7, #16
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	40012800 	.word	0x40012800
 8002668:	40012400 	.word	0x40012400

0800266c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800266c:	b590      	push	{r4, r7, lr}
 800266e:	b087      	sub	sp, #28
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002676:	2300      	movs	r3, #0
 8002678:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800267a:	2300      	movs	r3, #0
 800267c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800267e:	2300      	movs	r3, #0
 8002680:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002682:	f7ff fe41 	bl	8002308 <HAL_GetTick>
 8002686:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00b      	beq.n	80026ae <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269a:	f043 0220 	orr.w	r2, r3, #32
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e0c8      	b.n	8002840 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d12a      	bne.n	8002712 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d123      	bne.n	8002712 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80026ca:	e01a      	b.n	8002702 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d2:	d016      	beq.n	8002702 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d007      	beq.n	80026ea <HAL_ADC_PollForConversion+0x7e>
 80026da:	f7ff fe15 	bl	8002308 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d20b      	bcs.n	8002702 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ee:	f043 0204 	orr.w	r2, r3, #4
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e09e      	b.n	8002840 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d0dd      	beq.n	80026cc <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002710:	e06c      	b.n	80027ec <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002712:	4b4d      	ldr	r3, [pc, #308]	; (8002848 <HAL_ADC_PollForConversion+0x1dc>)
 8002714:	681c      	ldr	r4, [r3, #0]
 8002716:	2002      	movs	r0, #2
 8002718:	f001 fc78 	bl	800400c <HAL_RCCEx_GetPeriphCLKFreq>
 800271c:	4603      	mov	r3, r0
 800271e:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	6919      	ldr	r1, [r3, #16]
 8002728:	4b48      	ldr	r3, [pc, #288]	; (800284c <HAL_ADC_PollForConversion+0x1e0>)
 800272a:	400b      	ands	r3, r1
 800272c:	2b00      	cmp	r3, #0
 800272e:	d118      	bne.n	8002762 <HAL_ADC_PollForConversion+0xf6>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68d9      	ldr	r1, [r3, #12]
 8002736:	4b46      	ldr	r3, [pc, #280]	; (8002850 <HAL_ADC_PollForConversion+0x1e4>)
 8002738:	400b      	ands	r3, r1
 800273a:	2b00      	cmp	r3, #0
 800273c:	d111      	bne.n	8002762 <HAL_ADC_PollForConversion+0xf6>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	6919      	ldr	r1, [r3, #16]
 8002744:	4b43      	ldr	r3, [pc, #268]	; (8002854 <HAL_ADC_PollForConversion+0x1e8>)
 8002746:	400b      	ands	r3, r1
 8002748:	2b00      	cmp	r3, #0
 800274a:	d108      	bne.n	800275e <HAL_ADC_PollForConversion+0xf2>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	68d9      	ldr	r1, [r3, #12]
 8002752:	4b41      	ldr	r3, [pc, #260]	; (8002858 <HAL_ADC_PollForConversion+0x1ec>)
 8002754:	400b      	ands	r3, r1
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <HAL_ADC_PollForConversion+0xf2>
 800275a:	2314      	movs	r3, #20
 800275c:	e020      	b.n	80027a0 <HAL_ADC_PollForConversion+0x134>
 800275e:	2329      	movs	r3, #41	; 0x29
 8002760:	e01e      	b.n	80027a0 <HAL_ADC_PollForConversion+0x134>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	6919      	ldr	r1, [r3, #16]
 8002768:	4b3a      	ldr	r3, [pc, #232]	; (8002854 <HAL_ADC_PollForConversion+0x1e8>)
 800276a:	400b      	ands	r3, r1
 800276c:	2b00      	cmp	r3, #0
 800276e:	d106      	bne.n	800277e <HAL_ADC_PollForConversion+0x112>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68d9      	ldr	r1, [r3, #12]
 8002776:	4b38      	ldr	r3, [pc, #224]	; (8002858 <HAL_ADC_PollForConversion+0x1ec>)
 8002778:	400b      	ands	r3, r1
 800277a:	2b00      	cmp	r3, #0
 800277c:	d00d      	beq.n	800279a <HAL_ADC_PollForConversion+0x12e>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	6919      	ldr	r1, [r3, #16]
 8002784:	4b35      	ldr	r3, [pc, #212]	; (800285c <HAL_ADC_PollForConversion+0x1f0>)
 8002786:	400b      	ands	r3, r1
 8002788:	2b00      	cmp	r3, #0
 800278a:	d108      	bne.n	800279e <HAL_ADC_PollForConversion+0x132>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68d9      	ldr	r1, [r3, #12]
 8002792:	4b32      	ldr	r3, [pc, #200]	; (800285c <HAL_ADC_PollForConversion+0x1f0>)
 8002794:	400b      	ands	r3, r1
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <HAL_ADC_PollForConversion+0x132>
 800279a:	2354      	movs	r3, #84	; 0x54
 800279c:	e000      	b.n	80027a0 <HAL_ADC_PollForConversion+0x134>
 800279e:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80027a0:	fb02 f303 	mul.w	r3, r2, r3
 80027a4:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80027a6:	e01d      	b.n	80027e4 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ae:	d016      	beq.n	80027de <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d007      	beq.n	80027c6 <HAL_ADC_PollForConversion+0x15a>
 80027b6:	f7ff fda7 	bl	8002308 <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	683a      	ldr	r2, [r7, #0]
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d20b      	bcs.n	80027de <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ca:	f043 0204 	orr.w	r2, r3, #4
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e030      	b.n	8002840 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	3301      	adds	r3, #1
 80027e2:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d8dd      	bhi.n	80027a8 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f06f 0212 	mvn.w	r2, #18
 80027f4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027fa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800280c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002810:	d115      	bne.n	800283e <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002816:	2b00      	cmp	r3, #0
 8002818:	d111      	bne.n	800283e <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d105      	bne.n	800283e <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002836:	f043 0201 	orr.w	r2, r3, #1
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	371c      	adds	r7, #28
 8002844:	46bd      	mov	sp, r7
 8002846:	bd90      	pop	{r4, r7, pc}
 8002848:	20000000 	.word	0x20000000
 800284c:	24924924 	.word	0x24924924
 8002850:	00924924 	.word	0x00924924
 8002854:	12492492 	.word	0x12492492
 8002858:	00492492 	.word	0x00492492
 800285c:	00249249 	.word	0x00249249

08002860 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800286e:	4618      	mov	r0, r3
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	bc80      	pop	{r7}
 8002876:	4770      	bx	lr

08002878 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002882:	2300      	movs	r3, #0
 8002884:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002886:	2300      	movs	r3, #0
 8002888:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002890:	2b01      	cmp	r3, #1
 8002892:	d101      	bne.n	8002898 <HAL_ADC_ConfigChannel+0x20>
 8002894:	2302      	movs	r3, #2
 8002896:	e0dc      	b.n	8002a52 <HAL_ADC_ConfigChannel+0x1da>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	2b06      	cmp	r3, #6
 80028a6:	d81c      	bhi.n	80028e2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	4613      	mov	r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	4413      	add	r3, r2
 80028b8:	3b05      	subs	r3, #5
 80028ba:	221f      	movs	r2, #31
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	43db      	mvns	r3, r3
 80028c2:	4019      	ands	r1, r3
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	6818      	ldr	r0, [r3, #0]
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685a      	ldr	r2, [r3, #4]
 80028cc:	4613      	mov	r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	4413      	add	r3, r2
 80028d2:	3b05      	subs	r3, #5
 80028d4:	fa00 f203 	lsl.w	r2, r0, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	430a      	orrs	r2, r1
 80028de:	635a      	str	r2, [r3, #52]	; 0x34
 80028e0:	e03c      	b.n	800295c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	2b0c      	cmp	r3, #12
 80028e8:	d81c      	bhi.n	8002924 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685a      	ldr	r2, [r3, #4]
 80028f4:	4613      	mov	r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	4413      	add	r3, r2
 80028fa:	3b23      	subs	r3, #35	; 0x23
 80028fc:	221f      	movs	r2, #31
 80028fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002902:	43db      	mvns	r3, r3
 8002904:	4019      	ands	r1, r3
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	6818      	ldr	r0, [r3, #0]
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685a      	ldr	r2, [r3, #4]
 800290e:	4613      	mov	r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	4413      	add	r3, r2
 8002914:	3b23      	subs	r3, #35	; 0x23
 8002916:	fa00 f203 	lsl.w	r2, r0, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	430a      	orrs	r2, r1
 8002920:	631a      	str	r2, [r3, #48]	; 0x30
 8002922:	e01b      	b.n	800295c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	4613      	mov	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	4413      	add	r3, r2
 8002934:	3b41      	subs	r3, #65	; 0x41
 8002936:	221f      	movs	r2, #31
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	43db      	mvns	r3, r3
 800293e:	4019      	ands	r1, r3
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	6818      	ldr	r0, [r3, #0]
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685a      	ldr	r2, [r3, #4]
 8002948:	4613      	mov	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	4413      	add	r3, r2
 800294e:	3b41      	subs	r3, #65	; 0x41
 8002950:	fa00 f203 	lsl.w	r2, r0, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	430a      	orrs	r2, r1
 800295a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2b09      	cmp	r3, #9
 8002962:	d91c      	bls.n	800299e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68d9      	ldr	r1, [r3, #12]
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	4613      	mov	r3, r2
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	4413      	add	r3, r2
 8002974:	3b1e      	subs	r3, #30
 8002976:	2207      	movs	r2, #7
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	43db      	mvns	r3, r3
 800297e:	4019      	ands	r1, r3
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	6898      	ldr	r0, [r3, #8]
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	4613      	mov	r3, r2
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	4413      	add	r3, r2
 800298e:	3b1e      	subs	r3, #30
 8002990:	fa00 f203 	lsl.w	r2, r0, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	430a      	orrs	r2, r1
 800299a:	60da      	str	r2, [r3, #12]
 800299c:	e019      	b.n	80029d2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	6919      	ldr	r1, [r3, #16]
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	4613      	mov	r3, r2
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	4413      	add	r3, r2
 80029ae:	2207      	movs	r2, #7
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	43db      	mvns	r3, r3
 80029b6:	4019      	ands	r1, r3
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	6898      	ldr	r0, [r3, #8]
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	4613      	mov	r3, r2
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	4413      	add	r3, r2
 80029c6:	fa00 f203 	lsl.w	r2, r0, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	430a      	orrs	r2, r1
 80029d0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2b10      	cmp	r3, #16
 80029d8:	d003      	beq.n	80029e2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80029de:	2b11      	cmp	r3, #17
 80029e0:	d132      	bne.n	8002a48 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a1d      	ldr	r2, [pc, #116]	; (8002a5c <HAL_ADC_ConfigChannel+0x1e4>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d125      	bne.n	8002a38 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d126      	bne.n	8002a48 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	689a      	ldr	r2, [r3, #8]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002a08:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2b10      	cmp	r3, #16
 8002a10:	d11a      	bne.n	8002a48 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a12:	4b13      	ldr	r3, [pc, #76]	; (8002a60 <HAL_ADC_ConfigChannel+0x1e8>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a13      	ldr	r2, [pc, #76]	; (8002a64 <HAL_ADC_ConfigChannel+0x1ec>)
 8002a18:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1c:	0c9a      	lsrs	r2, r3, #18
 8002a1e:	4613      	mov	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4413      	add	r3, r2
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a28:	e002      	b.n	8002a30 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d1f9      	bne.n	8002a2a <HAL_ADC_ConfigChannel+0x1b2>
 8002a36:	e007      	b.n	8002a48 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3c:	f043 0220 	orr.w	r2, r3, #32
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3714      	adds	r7, #20
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bc80      	pop	{r7}
 8002a5a:	4770      	bx	lr
 8002a5c:	40012400 	.word	0x40012400
 8002a60:	20000000 	.word	0x20000000
 8002a64:	431bde83 	.word	0x431bde83

08002a68 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a70:	2300      	movs	r3, #0
 8002a72:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002a74:	2300      	movs	r3, #0
 8002a76:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d039      	beq.n	8002afa <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f042 0201 	orr.w	r2, r2, #1
 8002a94:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002a96:	4b1b      	ldr	r3, [pc, #108]	; (8002b04 <ADC_Enable+0x9c>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a1b      	ldr	r2, [pc, #108]	; (8002b08 <ADC_Enable+0xa0>)
 8002a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa0:	0c9b      	lsrs	r3, r3, #18
 8002aa2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002aa4:	e002      	b.n	8002aac <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1f9      	bne.n	8002aa6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002ab2:	f7ff fc29 	bl	8002308 <HAL_GetTick>
 8002ab6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002ab8:	e018      	b.n	8002aec <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002aba:	f7ff fc25 	bl	8002308 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d911      	bls.n	8002aec <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002acc:	f043 0210 	orr.w	r2, r3, #16
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad8:	f043 0201 	orr.w	r2, r3, #1
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e007      	b.n	8002afc <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d1df      	bne.n	8002aba <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3710      	adds	r7, #16
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	20000000 	.word	0x20000000
 8002b08:	431bde83 	.word	0x431bde83

08002b0c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b14:	2300      	movs	r3, #0
 8002b16:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d127      	bne.n	8002b76 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	689a      	ldr	r2, [r3, #8]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f022 0201 	bic.w	r2, r2, #1
 8002b34:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b36:	f7ff fbe7 	bl	8002308 <HAL_GetTick>
 8002b3a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002b3c:	e014      	b.n	8002b68 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b3e:	f7ff fbe3 	bl	8002308 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d90d      	bls.n	8002b68 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b50:	f043 0210 	orr.w	r2, r3, #16
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5c:	f043 0201 	orr.w	r2, r3, #1
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e007      	b.n	8002b78 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d0e3      	beq.n	8002b3e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3710      	adds	r7, #16
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e0ed      	b.n	8002d6e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d102      	bne.n	8002ba4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f7ff faa4 	bl	80020ec <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f022 0202 	bic.w	r2, r2, #2
 8002bb2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bb4:	f7ff fba8 	bl	8002308 <HAL_GetTick>
 8002bb8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002bba:	e012      	b.n	8002be2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002bbc:	f7ff fba4 	bl	8002308 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b0a      	cmp	r3, #10
 8002bc8:	d90b      	bls.n	8002be2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2205      	movs	r2, #5
 8002bda:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e0c5      	b.n	8002d6e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f003 0302 	and.w	r3, r3, #2
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1e5      	bne.n	8002bbc <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f042 0201 	orr.w	r2, r2, #1
 8002bfe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c00:	f7ff fb82 	bl	8002308 <HAL_GetTick>
 8002c04:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c06:	e012      	b.n	8002c2e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c08:	f7ff fb7e 	bl	8002308 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b0a      	cmp	r3, #10
 8002c14:	d90b      	bls.n	8002c2e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2205      	movs	r2, #5
 8002c26:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e09f      	b.n	8002d6e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d0e5      	beq.n	8002c08 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	7e1b      	ldrb	r3, [r3, #24]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d108      	bne.n	8002c56 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c52:	601a      	str	r2, [r3, #0]
 8002c54:	e007      	b.n	8002c66 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c64:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	7e5b      	ldrb	r3, [r3, #25]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d108      	bne.n	8002c80 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c7c:	601a      	str	r2, [r3, #0]
 8002c7e:	e007      	b.n	8002c90 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c8e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	7e9b      	ldrb	r3, [r3, #26]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d108      	bne.n	8002caa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f042 0220 	orr.w	r2, r2, #32
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	e007      	b.n	8002cba <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 0220 	bic.w	r2, r2, #32
 8002cb8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	7edb      	ldrb	r3, [r3, #27]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d108      	bne.n	8002cd4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f022 0210 	bic.w	r2, r2, #16
 8002cd0:	601a      	str	r2, [r3, #0]
 8002cd2:	e007      	b.n	8002ce4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f042 0210 	orr.w	r2, r2, #16
 8002ce2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	7f1b      	ldrb	r3, [r3, #28]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d108      	bne.n	8002cfe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f042 0208 	orr.w	r2, r2, #8
 8002cfa:	601a      	str	r2, [r3, #0]
 8002cfc:	e007      	b.n	8002d0e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f022 0208 	bic.w	r2, r2, #8
 8002d0c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	7f5b      	ldrb	r3, [r3, #29]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d108      	bne.n	8002d28 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f042 0204 	orr.w	r2, r2, #4
 8002d24:	601a      	str	r2, [r3, #0]
 8002d26:	e007      	b.n	8002d38 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f022 0204 	bic.w	r2, r2, #4
 8002d36:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689a      	ldr	r2, [r3, #8]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	431a      	orrs	r2, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	431a      	orrs	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	695b      	ldr	r3, [r3, #20]
 8002d4c:	ea42 0103 	orr.w	r1, r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	1e5a      	subs	r2, r3, #1
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b087      	sub	sp, #28
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
 8002d7e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d8c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002d8e:	7cfb      	ldrb	r3, [r7, #19]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d003      	beq.n	8002d9c <HAL_CAN_ConfigFilter+0x26>
 8002d94:	7cfb      	ldrb	r3, [r7, #19]
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	f040 80aa 	bne.w	8002ef0 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002da2:	f043 0201 	orr.w	r2, r3, #1
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	695b      	ldr	r3, [r3, #20]
 8002db0:	f003 031f 	and.w	r3, r3, #31
 8002db4:	2201      	movs	r2, #1
 8002db6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dba:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	401a      	ands	r2, r3
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	69db      	ldr	r3, [r3, #28]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d123      	bne.n	8002e1e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	43db      	mvns	r3, r3
 8002de0:	401a      	ands	r2, r3
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002df8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	3248      	adds	r2, #72	; 0x48
 8002dfe:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e12:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e14:	6979      	ldr	r1, [r7, #20]
 8002e16:	3348      	adds	r3, #72	; 0x48
 8002e18:	00db      	lsls	r3, r3, #3
 8002e1a:	440b      	add	r3, r1
 8002e1c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	69db      	ldr	r3, [r3, #28]
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d122      	bne.n	8002e6c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e42:	683a      	ldr	r2, [r7, #0]
 8002e44:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002e46:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	3248      	adds	r2, #72	; 0x48
 8002e4c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e60:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e62:	6979      	ldr	r1, [r7, #20]
 8002e64:	3348      	adds	r3, #72	; 0x48
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	440b      	add	r3, r1
 8002e6a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d109      	bne.n	8002e88 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	43db      	mvns	r3, r3
 8002e7e:	401a      	ands	r2, r3
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002e86:	e007      	b.n	8002e98 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	431a      	orrs	r2, r3
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d109      	bne.n	8002eb4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	401a      	ands	r2, r3
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002eb2:	e007      	b.n	8002ec4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	431a      	orrs	r2, r3
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	6a1b      	ldr	r3, [r3, #32]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d107      	bne.n	8002edc <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	431a      	orrs	r2, r3
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002ee2:	f023 0201 	bic.w	r2, r3, #1
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002eec:	2300      	movs	r3, #0
 8002eee:	e006      	b.n	8002efe <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
  }
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	371c      	adds	r7, #28
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bc80      	pop	{r7}
 8002f06:	4770      	bx	lr

08002f08 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d12e      	bne.n	8002f7a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2202      	movs	r2, #2
 8002f20:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f022 0201 	bic.w	r2, r2, #1
 8002f32:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002f34:	f7ff f9e8 	bl	8002308 <HAL_GetTick>
 8002f38:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002f3a:	e012      	b.n	8002f62 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f3c:	f7ff f9e4 	bl	8002308 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b0a      	cmp	r3, #10
 8002f48:	d90b      	bls.n	8002f62 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2205      	movs	r2, #5
 8002f5a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e012      	b.n	8002f88 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f003 0301 	and.w	r3, r3, #1
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1e5      	bne.n	8002f3c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002f76:	2300      	movs	r3, #0
 8002f78:	e006      	b.n	8002f88 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
  }
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b089      	sub	sp, #36	; 0x24
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	607a      	str	r2, [r7, #4]
 8002f9c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fa4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002fae:	7ffb      	ldrb	r3, [r7, #31]
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d003      	beq.n	8002fbc <HAL_CAN_AddTxMessage+0x2c>
 8002fb4:	7ffb      	ldrb	r3, [r7, #31]
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	f040 80b8 	bne.w	800312c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d10a      	bne.n	8002fdc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d105      	bne.n	8002fdc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	f000 80a0 	beq.w	800311c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	0e1b      	lsrs	r3, r3, #24
 8002fe0:	f003 0303 	and.w	r3, r3, #3
 8002fe4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d907      	bls.n	8002ffc <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e09e      	b.n	800313a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	409a      	lsls	r2, r3
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d10d      	bne.n	800302a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003018:	68f9      	ldr	r1, [r7, #12]
 800301a:	6809      	ldr	r1, [r1, #0]
 800301c:	431a      	orrs	r2, r3
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	3318      	adds	r3, #24
 8003022:	011b      	lsls	r3, r3, #4
 8003024:	440b      	add	r3, r1
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	e00f      	b.n	800304a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003034:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800303a:	68f9      	ldr	r1, [r7, #12]
 800303c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800303e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	3318      	adds	r3, #24
 8003044:	011b      	lsls	r3, r3, #4
 8003046:	440b      	add	r3, r1
 8003048:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6819      	ldr	r1, [r3, #0]
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	691a      	ldr	r2, [r3, #16]
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	3318      	adds	r3, #24
 8003056:	011b      	lsls	r3, r3, #4
 8003058:	440b      	add	r3, r1
 800305a:	3304      	adds	r3, #4
 800305c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	7d1b      	ldrb	r3, [r3, #20]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d111      	bne.n	800308a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	3318      	adds	r3, #24
 800306e:	011b      	lsls	r3, r3, #4
 8003070:	4413      	add	r3, r2
 8003072:	3304      	adds	r3, #4
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	6811      	ldr	r1, [r2, #0]
 800307a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	3318      	adds	r3, #24
 8003082:	011b      	lsls	r3, r3, #4
 8003084:	440b      	add	r3, r1
 8003086:	3304      	adds	r3, #4
 8003088:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	3307      	adds	r3, #7
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	061a      	lsls	r2, r3, #24
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	3306      	adds	r3, #6
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	041b      	lsls	r3, r3, #16
 800309a:	431a      	orrs	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	3305      	adds	r3, #5
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	021b      	lsls	r3, r3, #8
 80030a4:	4313      	orrs	r3, r2
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	3204      	adds	r2, #4
 80030aa:	7812      	ldrb	r2, [r2, #0]
 80030ac:	4610      	mov	r0, r2
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	6811      	ldr	r1, [r2, #0]
 80030b2:	ea43 0200 	orr.w	r2, r3, r0
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	011b      	lsls	r3, r3, #4
 80030ba:	440b      	add	r3, r1
 80030bc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80030c0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	3303      	adds	r3, #3
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	061a      	lsls	r2, r3, #24
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	3302      	adds	r3, #2
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	041b      	lsls	r3, r3, #16
 80030d2:	431a      	orrs	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	3301      	adds	r3, #1
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	021b      	lsls	r3, r3, #8
 80030dc:	4313      	orrs	r3, r2
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	7812      	ldrb	r2, [r2, #0]
 80030e2:	4610      	mov	r0, r2
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	6811      	ldr	r1, [r2, #0]
 80030e8:	ea43 0200 	orr.w	r2, r3, r0
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	011b      	lsls	r3, r3, #4
 80030f0:	440b      	add	r3, r1
 80030f2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80030f6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	3318      	adds	r3, #24
 8003100:	011b      	lsls	r3, r3, #4
 8003102:	4413      	add	r3, r2
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	6811      	ldr	r1, [r2, #0]
 800310a:	f043 0201 	orr.w	r2, r3, #1
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	3318      	adds	r3, #24
 8003112:	011b      	lsls	r3, r3, #4
 8003114:	440b      	add	r3, r1
 8003116:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003118:	2300      	movs	r3, #0
 800311a:	e00e      	b.n	800313a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003120:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e006      	b.n	800313a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003130:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
  }
}
 800313a:	4618      	mov	r0, r3
 800313c:	3724      	adds	r7, #36	; 0x24
 800313e:	46bd      	mov	sp, r7
 8003140:	bc80      	pop	{r7}
 8003142:	4770      	bx	lr

08003144 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800314c:	2300      	movs	r3, #0
 800314e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003156:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8003158:	7afb      	ldrb	r3, [r7, #11]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d002      	beq.n	8003164 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800315e:	7afb      	ldrb	r3, [r7, #11]
 8003160:	2b02      	cmp	r3, #2
 8003162:	d11d      	bne.n	80031a0 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d002      	beq.n	8003178 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	3301      	adds	r3, #1
 8003176:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d002      	beq.n	800318c <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	3301      	adds	r3, #1
 800318a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d002      	beq.n	80031a0 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	3301      	adds	r3, #1
 800319e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80031a0:	68fb      	ldr	r3, [r7, #12]
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3714      	adds	r7, #20
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bc80      	pop	{r7}
 80031aa:	4770      	bx	lr

080031ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f003 0307 	and.w	r3, r3, #7
 80031ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031bc:	4b0c      	ldr	r3, [pc, #48]	; (80031f0 <__NVIC_SetPriorityGrouping+0x44>)
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031c2:	68ba      	ldr	r2, [r7, #8]
 80031c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031c8:	4013      	ands	r3, r2
 80031ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031de:	4a04      	ldr	r2, [pc, #16]	; (80031f0 <__NVIC_SetPriorityGrouping+0x44>)
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	60d3      	str	r3, [r2, #12]
}
 80031e4:	bf00      	nop
 80031e6:	3714      	adds	r7, #20
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bc80      	pop	{r7}
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	e000ed00 	.word	0xe000ed00

080031f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031f8:	4b04      	ldr	r3, [pc, #16]	; (800320c <__NVIC_GetPriorityGrouping+0x18>)
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	0a1b      	lsrs	r3, r3, #8
 80031fe:	f003 0307 	and.w	r3, r3, #7
}
 8003202:	4618      	mov	r0, r3
 8003204:	46bd      	mov	sp, r7
 8003206:	bc80      	pop	{r7}
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	e000ed00 	.word	0xe000ed00

08003210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	4603      	mov	r3, r0
 8003218:	6039      	str	r1, [r7, #0]
 800321a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800321c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003220:	2b00      	cmp	r3, #0
 8003222:	db0a      	blt.n	800323a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	b2da      	uxtb	r2, r3
 8003228:	490c      	ldr	r1, [pc, #48]	; (800325c <__NVIC_SetPriority+0x4c>)
 800322a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800322e:	0112      	lsls	r2, r2, #4
 8003230:	b2d2      	uxtb	r2, r2
 8003232:	440b      	add	r3, r1
 8003234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003238:	e00a      	b.n	8003250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	b2da      	uxtb	r2, r3
 800323e:	4908      	ldr	r1, [pc, #32]	; (8003260 <__NVIC_SetPriority+0x50>)
 8003240:	79fb      	ldrb	r3, [r7, #7]
 8003242:	f003 030f 	and.w	r3, r3, #15
 8003246:	3b04      	subs	r3, #4
 8003248:	0112      	lsls	r2, r2, #4
 800324a:	b2d2      	uxtb	r2, r2
 800324c:	440b      	add	r3, r1
 800324e:	761a      	strb	r2, [r3, #24]
}
 8003250:	bf00      	nop
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	bc80      	pop	{r7}
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	e000e100 	.word	0xe000e100
 8003260:	e000ed00 	.word	0xe000ed00

08003264 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003264:	b480      	push	{r7}
 8003266:	b089      	sub	sp, #36	; 0x24
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f003 0307 	and.w	r3, r3, #7
 8003276:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	f1c3 0307 	rsb	r3, r3, #7
 800327e:	2b04      	cmp	r3, #4
 8003280:	bf28      	it	cs
 8003282:	2304      	movcs	r3, #4
 8003284:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	3304      	adds	r3, #4
 800328a:	2b06      	cmp	r3, #6
 800328c:	d902      	bls.n	8003294 <NVIC_EncodePriority+0x30>
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	3b03      	subs	r3, #3
 8003292:	e000      	b.n	8003296 <NVIC_EncodePriority+0x32>
 8003294:	2300      	movs	r3, #0
 8003296:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003298:	f04f 32ff 	mov.w	r2, #4294967295
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	fa02 f303 	lsl.w	r3, r2, r3
 80032a2:	43da      	mvns	r2, r3
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	401a      	ands	r2, r3
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032ac:	f04f 31ff 	mov.w	r1, #4294967295
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	fa01 f303 	lsl.w	r3, r1, r3
 80032b6:	43d9      	mvns	r1, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032bc:	4313      	orrs	r3, r2
         );
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3724      	adds	r7, #36	; 0x24
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bc80      	pop	{r7}
 80032c6:	4770      	bx	lr

080032c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	3b01      	subs	r3, #1
 80032d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032d8:	d301      	bcc.n	80032de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032da:	2301      	movs	r3, #1
 80032dc:	e00f      	b.n	80032fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032de:	4a0a      	ldr	r2, [pc, #40]	; (8003308 <SysTick_Config+0x40>)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	3b01      	subs	r3, #1
 80032e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032e6:	210f      	movs	r1, #15
 80032e8:	f04f 30ff 	mov.w	r0, #4294967295
 80032ec:	f7ff ff90 	bl	8003210 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032f0:	4b05      	ldr	r3, [pc, #20]	; (8003308 <SysTick_Config+0x40>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032f6:	4b04      	ldr	r3, [pc, #16]	; (8003308 <SysTick_Config+0x40>)
 80032f8:	2207      	movs	r2, #7
 80032fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	e000e010 	.word	0xe000e010

0800330c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f7ff ff49 	bl	80031ac <__NVIC_SetPriorityGrouping>
}
 800331a:	bf00      	nop
 800331c:	3708      	adds	r7, #8
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003322:	b580      	push	{r7, lr}
 8003324:	b086      	sub	sp, #24
 8003326:	af00      	add	r7, sp, #0
 8003328:	4603      	mov	r3, r0
 800332a:	60b9      	str	r1, [r7, #8]
 800332c:	607a      	str	r2, [r7, #4]
 800332e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003330:	2300      	movs	r3, #0
 8003332:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003334:	f7ff ff5e 	bl	80031f4 <__NVIC_GetPriorityGrouping>
 8003338:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	68b9      	ldr	r1, [r7, #8]
 800333e:	6978      	ldr	r0, [r7, #20]
 8003340:	f7ff ff90 	bl	8003264 <NVIC_EncodePriority>
 8003344:	4602      	mov	r2, r0
 8003346:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800334a:	4611      	mov	r1, r2
 800334c:	4618      	mov	r0, r3
 800334e:	f7ff ff5f 	bl	8003210 <__NVIC_SetPriority>
}
 8003352:	bf00      	nop
 8003354:	3718      	adds	r7, #24
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b082      	sub	sp, #8
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f7ff ffb0 	bl	80032c8 <SysTick_Config>
 8003368:	4603      	mov	r3, r0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3708      	adds	r7, #8
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
	...

08003374 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b04      	cmp	r3, #4
 8003380:	d106      	bne.n	8003390 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8003382:	4b09      	ldr	r3, [pc, #36]	; (80033a8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a08      	ldr	r2, [pc, #32]	; (80033a8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003388:	f043 0304 	orr.w	r3, r3, #4
 800338c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800338e:	e005      	b.n	800339c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8003390:	4b05      	ldr	r3, [pc, #20]	; (80033a8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a04      	ldr	r2, [pc, #16]	; (80033a8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003396:	f023 0304 	bic.w	r3, r3, #4
 800339a:	6013      	str	r3, [r2, #0]
}
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bc80      	pop	{r7}
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	e000e010 	.word	0xe000e010

080033ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b08b      	sub	sp, #44	; 0x2c
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033b6:	2300      	movs	r3, #0
 80033b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80033ba:	2300      	movs	r3, #0
 80033bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033be:	e127      	b.n	8003610 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80033c0:	2201      	movs	r2, #1
 80033c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	69fa      	ldr	r2, [r7, #28]
 80033d0:	4013      	ands	r3, r2
 80033d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80033d4:	69ba      	ldr	r2, [r7, #24]
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	429a      	cmp	r2, r3
 80033da:	f040 8116 	bne.w	800360a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	2b12      	cmp	r3, #18
 80033e4:	d034      	beq.n	8003450 <HAL_GPIO_Init+0xa4>
 80033e6:	2b12      	cmp	r3, #18
 80033e8:	d80d      	bhi.n	8003406 <HAL_GPIO_Init+0x5a>
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d02b      	beq.n	8003446 <HAL_GPIO_Init+0x9a>
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d804      	bhi.n	80033fc <HAL_GPIO_Init+0x50>
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d031      	beq.n	800345a <HAL_GPIO_Init+0xae>
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d01c      	beq.n	8003434 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80033fa:	e048      	b.n	800348e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80033fc:	2b03      	cmp	r3, #3
 80033fe:	d043      	beq.n	8003488 <HAL_GPIO_Init+0xdc>
 8003400:	2b11      	cmp	r3, #17
 8003402:	d01b      	beq.n	800343c <HAL_GPIO_Init+0x90>
          break;
 8003404:	e043      	b.n	800348e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003406:	4a89      	ldr	r2, [pc, #548]	; (800362c <HAL_GPIO_Init+0x280>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d026      	beq.n	800345a <HAL_GPIO_Init+0xae>
 800340c:	4a87      	ldr	r2, [pc, #540]	; (800362c <HAL_GPIO_Init+0x280>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d806      	bhi.n	8003420 <HAL_GPIO_Init+0x74>
 8003412:	4a87      	ldr	r2, [pc, #540]	; (8003630 <HAL_GPIO_Init+0x284>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d020      	beq.n	800345a <HAL_GPIO_Init+0xae>
 8003418:	4a86      	ldr	r2, [pc, #536]	; (8003634 <HAL_GPIO_Init+0x288>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d01d      	beq.n	800345a <HAL_GPIO_Init+0xae>
          break;
 800341e:	e036      	b.n	800348e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003420:	4a85      	ldr	r2, [pc, #532]	; (8003638 <HAL_GPIO_Init+0x28c>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d019      	beq.n	800345a <HAL_GPIO_Init+0xae>
 8003426:	4a85      	ldr	r2, [pc, #532]	; (800363c <HAL_GPIO_Init+0x290>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d016      	beq.n	800345a <HAL_GPIO_Init+0xae>
 800342c:	4a84      	ldr	r2, [pc, #528]	; (8003640 <HAL_GPIO_Init+0x294>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d013      	beq.n	800345a <HAL_GPIO_Init+0xae>
          break;
 8003432:	e02c      	b.n	800348e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	623b      	str	r3, [r7, #32]
          break;
 800343a:	e028      	b.n	800348e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	3304      	adds	r3, #4
 8003442:	623b      	str	r3, [r7, #32]
          break;
 8003444:	e023      	b.n	800348e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	3308      	adds	r3, #8
 800344c:	623b      	str	r3, [r7, #32]
          break;
 800344e:	e01e      	b.n	800348e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	330c      	adds	r3, #12
 8003456:	623b      	str	r3, [r7, #32]
          break;
 8003458:	e019      	b.n	800348e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d102      	bne.n	8003468 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003462:	2304      	movs	r3, #4
 8003464:	623b      	str	r3, [r7, #32]
          break;
 8003466:	e012      	b.n	800348e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d105      	bne.n	800347c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003470:	2308      	movs	r3, #8
 8003472:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	69fa      	ldr	r2, [r7, #28]
 8003478:	611a      	str	r2, [r3, #16]
          break;
 800347a:	e008      	b.n	800348e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800347c:	2308      	movs	r3, #8
 800347e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	69fa      	ldr	r2, [r7, #28]
 8003484:	615a      	str	r2, [r3, #20]
          break;
 8003486:	e002      	b.n	800348e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003488:	2300      	movs	r3, #0
 800348a:	623b      	str	r3, [r7, #32]
          break;
 800348c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	2bff      	cmp	r3, #255	; 0xff
 8003492:	d801      	bhi.n	8003498 <HAL_GPIO_Init+0xec>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	e001      	b.n	800349c <HAL_GPIO_Init+0xf0>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	3304      	adds	r3, #4
 800349c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	2bff      	cmp	r3, #255	; 0xff
 80034a2:	d802      	bhi.n	80034aa <HAL_GPIO_Init+0xfe>
 80034a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	e002      	b.n	80034b0 <HAL_GPIO_Init+0x104>
 80034aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ac:	3b08      	subs	r3, #8
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	210f      	movs	r1, #15
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	fa01 f303 	lsl.w	r3, r1, r3
 80034be:	43db      	mvns	r3, r3
 80034c0:	401a      	ands	r2, r3
 80034c2:	6a39      	ldr	r1, [r7, #32]
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	fa01 f303 	lsl.w	r3, r1, r3
 80034ca:	431a      	orrs	r2, r3
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f000 8096 	beq.w	800360a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80034de:	4b59      	ldr	r3, [pc, #356]	; (8003644 <HAL_GPIO_Init+0x298>)
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	4a58      	ldr	r2, [pc, #352]	; (8003644 <HAL_GPIO_Init+0x298>)
 80034e4:	f043 0301 	orr.w	r3, r3, #1
 80034e8:	6193      	str	r3, [r2, #24]
 80034ea:	4b56      	ldr	r3, [pc, #344]	; (8003644 <HAL_GPIO_Init+0x298>)
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	60bb      	str	r3, [r7, #8]
 80034f4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80034f6:	4a54      	ldr	r2, [pc, #336]	; (8003648 <HAL_GPIO_Init+0x29c>)
 80034f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fa:	089b      	lsrs	r3, r3, #2
 80034fc:	3302      	adds	r3, #2
 80034fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003502:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003506:	f003 0303 	and.w	r3, r3, #3
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	220f      	movs	r2, #15
 800350e:	fa02 f303 	lsl.w	r3, r2, r3
 8003512:	43db      	mvns	r3, r3
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	4013      	ands	r3, r2
 8003518:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a4b      	ldr	r2, [pc, #300]	; (800364c <HAL_GPIO_Init+0x2a0>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d013      	beq.n	800354a <HAL_GPIO_Init+0x19e>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a4a      	ldr	r2, [pc, #296]	; (8003650 <HAL_GPIO_Init+0x2a4>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d00d      	beq.n	8003546 <HAL_GPIO_Init+0x19a>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a49      	ldr	r2, [pc, #292]	; (8003654 <HAL_GPIO_Init+0x2a8>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d007      	beq.n	8003542 <HAL_GPIO_Init+0x196>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a48      	ldr	r2, [pc, #288]	; (8003658 <HAL_GPIO_Init+0x2ac>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d101      	bne.n	800353e <HAL_GPIO_Init+0x192>
 800353a:	2303      	movs	r3, #3
 800353c:	e006      	b.n	800354c <HAL_GPIO_Init+0x1a0>
 800353e:	2304      	movs	r3, #4
 8003540:	e004      	b.n	800354c <HAL_GPIO_Init+0x1a0>
 8003542:	2302      	movs	r3, #2
 8003544:	e002      	b.n	800354c <HAL_GPIO_Init+0x1a0>
 8003546:	2301      	movs	r3, #1
 8003548:	e000      	b.n	800354c <HAL_GPIO_Init+0x1a0>
 800354a:	2300      	movs	r3, #0
 800354c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800354e:	f002 0203 	and.w	r2, r2, #3
 8003552:	0092      	lsls	r2, r2, #2
 8003554:	4093      	lsls	r3, r2
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	4313      	orrs	r3, r2
 800355a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800355c:	493a      	ldr	r1, [pc, #232]	; (8003648 <HAL_GPIO_Init+0x29c>)
 800355e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003560:	089b      	lsrs	r3, r3, #2
 8003562:	3302      	adds	r3, #2
 8003564:	68fa      	ldr	r2, [r7, #12]
 8003566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d006      	beq.n	8003584 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003576:	4b39      	ldr	r3, [pc, #228]	; (800365c <HAL_GPIO_Init+0x2b0>)
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	4938      	ldr	r1, [pc, #224]	; (800365c <HAL_GPIO_Init+0x2b0>)
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	4313      	orrs	r3, r2
 8003580:	600b      	str	r3, [r1, #0]
 8003582:	e006      	b.n	8003592 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003584:	4b35      	ldr	r3, [pc, #212]	; (800365c <HAL_GPIO_Init+0x2b0>)
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	43db      	mvns	r3, r3
 800358c:	4933      	ldr	r1, [pc, #204]	; (800365c <HAL_GPIO_Init+0x2b0>)
 800358e:	4013      	ands	r3, r2
 8003590:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d006      	beq.n	80035ac <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800359e:	4b2f      	ldr	r3, [pc, #188]	; (800365c <HAL_GPIO_Init+0x2b0>)
 80035a0:	685a      	ldr	r2, [r3, #4]
 80035a2:	492e      	ldr	r1, [pc, #184]	; (800365c <HAL_GPIO_Init+0x2b0>)
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	604b      	str	r3, [r1, #4]
 80035aa:	e006      	b.n	80035ba <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80035ac:	4b2b      	ldr	r3, [pc, #172]	; (800365c <HAL_GPIO_Init+0x2b0>)
 80035ae:	685a      	ldr	r2, [r3, #4]
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	43db      	mvns	r3, r3
 80035b4:	4929      	ldr	r1, [pc, #164]	; (800365c <HAL_GPIO_Init+0x2b0>)
 80035b6:	4013      	ands	r3, r2
 80035b8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d006      	beq.n	80035d4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80035c6:	4b25      	ldr	r3, [pc, #148]	; (800365c <HAL_GPIO_Init+0x2b0>)
 80035c8:	689a      	ldr	r2, [r3, #8]
 80035ca:	4924      	ldr	r1, [pc, #144]	; (800365c <HAL_GPIO_Init+0x2b0>)
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	608b      	str	r3, [r1, #8]
 80035d2:	e006      	b.n	80035e2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80035d4:	4b21      	ldr	r3, [pc, #132]	; (800365c <HAL_GPIO_Init+0x2b0>)
 80035d6:	689a      	ldr	r2, [r3, #8]
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	43db      	mvns	r3, r3
 80035dc:	491f      	ldr	r1, [pc, #124]	; (800365c <HAL_GPIO_Init+0x2b0>)
 80035de:	4013      	ands	r3, r2
 80035e0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d006      	beq.n	80035fc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80035ee:	4b1b      	ldr	r3, [pc, #108]	; (800365c <HAL_GPIO_Init+0x2b0>)
 80035f0:	68da      	ldr	r2, [r3, #12]
 80035f2:	491a      	ldr	r1, [pc, #104]	; (800365c <HAL_GPIO_Init+0x2b0>)
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	60cb      	str	r3, [r1, #12]
 80035fa:	e006      	b.n	800360a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80035fc:	4b17      	ldr	r3, [pc, #92]	; (800365c <HAL_GPIO_Init+0x2b0>)
 80035fe:	68da      	ldr	r2, [r3, #12]
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	43db      	mvns	r3, r3
 8003604:	4915      	ldr	r1, [pc, #84]	; (800365c <HAL_GPIO_Init+0x2b0>)
 8003606:	4013      	ands	r3, r2
 8003608:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800360a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360c:	3301      	adds	r3, #1
 800360e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003616:	fa22 f303 	lsr.w	r3, r2, r3
 800361a:	2b00      	cmp	r3, #0
 800361c:	f47f aed0 	bne.w	80033c0 <HAL_GPIO_Init+0x14>
  }
}
 8003620:	bf00      	nop
 8003622:	372c      	adds	r7, #44	; 0x2c
 8003624:	46bd      	mov	sp, r7
 8003626:	bc80      	pop	{r7}
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	10210000 	.word	0x10210000
 8003630:	10110000 	.word	0x10110000
 8003634:	10120000 	.word	0x10120000
 8003638:	10310000 	.word	0x10310000
 800363c:	10320000 	.word	0x10320000
 8003640:	10220000 	.word	0x10220000
 8003644:	40021000 	.word	0x40021000
 8003648:	40010000 	.word	0x40010000
 800364c:	40010800 	.word	0x40010800
 8003650:	40010c00 	.word	0x40010c00
 8003654:	40011000 	.word	0x40011000
 8003658:	40011400 	.word	0x40011400
 800365c:	40010400 	.word	0x40010400

08003660 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	460b      	mov	r3, r1
 800366a:	807b      	strh	r3, [r7, #2]
 800366c:	4613      	mov	r3, r2
 800366e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003670:	787b      	ldrb	r3, [r7, #1]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d003      	beq.n	800367e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003676:	887a      	ldrh	r2, [r7, #2]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800367c:	e003      	b.n	8003686 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800367e:	887b      	ldrh	r3, [r7, #2]
 8003680:	041a      	lsls	r2, r3, #16
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	611a      	str	r2, [r3, #16]
}
 8003686:	bf00      	nop
 8003688:	370c      	adds	r7, #12
 800368a:	46bd      	mov	sp, r7
 800368c:	bc80      	pop	{r7}
 800368e:	4770      	bx	lr

08003690 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d101      	bne.n	80036a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e26c      	b.n	8003b7c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	f000 8087 	beq.w	80037be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036b0:	4b92      	ldr	r3, [pc, #584]	; (80038fc <HAL_RCC_OscConfig+0x26c>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f003 030c 	and.w	r3, r3, #12
 80036b8:	2b04      	cmp	r3, #4
 80036ba:	d00c      	beq.n	80036d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80036bc:	4b8f      	ldr	r3, [pc, #572]	; (80038fc <HAL_RCC_OscConfig+0x26c>)
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f003 030c 	and.w	r3, r3, #12
 80036c4:	2b08      	cmp	r3, #8
 80036c6:	d112      	bne.n	80036ee <HAL_RCC_OscConfig+0x5e>
 80036c8:	4b8c      	ldr	r3, [pc, #560]	; (80038fc <HAL_RCC_OscConfig+0x26c>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036d4:	d10b      	bne.n	80036ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036d6:	4b89      	ldr	r3, [pc, #548]	; (80038fc <HAL_RCC_OscConfig+0x26c>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d06c      	beq.n	80037bc <HAL_RCC_OscConfig+0x12c>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d168      	bne.n	80037bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e246      	b.n	8003b7c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036f6:	d106      	bne.n	8003706 <HAL_RCC_OscConfig+0x76>
 80036f8:	4b80      	ldr	r3, [pc, #512]	; (80038fc <HAL_RCC_OscConfig+0x26c>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a7f      	ldr	r2, [pc, #508]	; (80038fc <HAL_RCC_OscConfig+0x26c>)
 80036fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003702:	6013      	str	r3, [r2, #0]
 8003704:	e02e      	b.n	8003764 <HAL_RCC_OscConfig+0xd4>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10c      	bne.n	8003728 <HAL_RCC_OscConfig+0x98>
 800370e:	4b7b      	ldr	r3, [pc, #492]	; (80038fc <HAL_RCC_OscConfig+0x26c>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a7a      	ldr	r2, [pc, #488]	; (80038fc <HAL_RCC_OscConfig+0x26c>)
 8003714:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003718:	6013      	str	r3, [r2, #0]
 800371a:	4b78      	ldr	r3, [pc, #480]	; (80038fc <HAL_RCC_OscConfig+0x26c>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a77      	ldr	r2, [pc, #476]	; (80038fc <HAL_RCC_OscConfig+0x26c>)
 8003720:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003724:	6013      	str	r3, [r2, #0]
 8003726:	e01d      	b.n	8003764 <HAL_RCC_OscConfig+0xd4>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003730:	d10c      	bne.n	800374c <HAL_RCC_OscConfig+0xbc>
 8003732:	4b72      	ldr	r3, [pc, #456]	; (80038fc <HAL_RCC_OscConfig+0x26c>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a71      	ldr	r2, [pc, #452]	; (80038fc <HAL_RCC_OscConfig+0x26c>)
 8003738:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800373c:	6013      	str	r3, [r2, #0]
 800373e:	4b6f      	ldr	r3, [pc, #444]	; (80038fc <HAL_RCC_OscConfig+0x26c>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a6e      	ldr	r2, [pc, #440]	; (80038fc <HAL_RCC_OscConfig+0x26c>)
 8003744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003748:	6013      	str	r3, [r2, #0]
 800374a:	e00b      	b.n	8003764 <HAL_RCC_OscConfig+0xd4>
 800374c:	4b6b      	ldr	r3, [pc, #428]	; (80038fc <HAL_RCC_OscConfig+0x26c>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a6a      	ldr	r2, [pc, #424]	; (80038fc <HAL_RCC_OscConfig+0x26c>)
 8003752:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003756:	6013      	str	r3, [r2, #0]
 8003758:	4b68      	ldr	r3, [pc, #416]	; (80038fc <HAL_RCC_OscConfig+0x26c>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a67      	ldr	r2, [pc, #412]	; (80038fc <HAL_RCC_OscConfig+0x26c>)
 800375e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003762:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d013      	beq.n	8003794 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800376c:	f7fe fdcc 	bl	8002308 <HAL_GetTick>
 8003770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003772:	e008      	b.n	8003786 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003774:	f7fe fdc8 	bl	8002308 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b64      	cmp	r3, #100	; 0x64
 8003780:	d901      	bls.n	8003786 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e1fa      	b.n	8003b7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003786:	4b5d      	ldr	r3, [pc, #372]	; (80038fc <HAL_RCC_OscConfig+0x26c>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d0f0      	beq.n	8003774 <HAL_RCC_OscConfig+0xe4>
 8003792:	e014      	b.n	80037be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003794:	f7fe fdb8 	bl	8002308 <HAL_GetTick>
 8003798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800379a:	e008      	b.n	80037ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800379c:	f7fe fdb4 	bl	8002308 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	2b64      	cmp	r3, #100	; 0x64
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e1e6      	b.n	8003b7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ae:	4b53      	ldr	r3, [pc, #332]	; (80038fc <HAL_RCC_OscConfig+0x26c>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d1f0      	bne.n	800379c <HAL_RCC_OscConfig+0x10c>
 80037ba:	e000      	b.n	80037be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d063      	beq.n	8003892 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037ca:	4b4c      	ldr	r3, [pc, #304]	; (80038fc <HAL_RCC_OscConfig+0x26c>)
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f003 030c 	and.w	r3, r3, #12
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00b      	beq.n	80037ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80037d6:	4b49      	ldr	r3, [pc, #292]	; (80038fc <HAL_RCC_OscConfig+0x26c>)
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f003 030c 	and.w	r3, r3, #12
 80037de:	2b08      	cmp	r3, #8
 80037e0:	d11c      	bne.n	800381c <HAL_RCC_OscConfig+0x18c>
 80037e2:	4b46      	ldr	r3, [pc, #280]	; (80038fc <HAL_RCC_OscConfig+0x26c>)
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d116      	bne.n	800381c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ee:	4b43      	ldr	r3, [pc, #268]	; (80038fc <HAL_RCC_OscConfig+0x26c>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d005      	beq.n	8003806 <HAL_RCC_OscConfig+0x176>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d001      	beq.n	8003806 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e1ba      	b.n	8003b7c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003806:	4b3d      	ldr	r3, [pc, #244]	; (80038fc <HAL_RCC_OscConfig+0x26c>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	00db      	lsls	r3, r3, #3
 8003814:	4939      	ldr	r1, [pc, #228]	; (80038fc <HAL_RCC_OscConfig+0x26c>)
 8003816:	4313      	orrs	r3, r2
 8003818:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800381a:	e03a      	b.n	8003892 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d020      	beq.n	8003866 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003824:	4b36      	ldr	r3, [pc, #216]	; (8003900 <HAL_RCC_OscConfig+0x270>)
 8003826:	2201      	movs	r2, #1
 8003828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800382a:	f7fe fd6d 	bl	8002308 <HAL_GetTick>
 800382e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003830:	e008      	b.n	8003844 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003832:	f7fe fd69 	bl	8002308 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	2b02      	cmp	r3, #2
 800383e:	d901      	bls.n	8003844 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e19b      	b.n	8003b7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003844:	4b2d      	ldr	r3, [pc, #180]	; (80038fc <HAL_RCC_OscConfig+0x26c>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0302 	and.w	r3, r3, #2
 800384c:	2b00      	cmp	r3, #0
 800384e:	d0f0      	beq.n	8003832 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003850:	4b2a      	ldr	r3, [pc, #168]	; (80038fc <HAL_RCC_OscConfig+0x26c>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	00db      	lsls	r3, r3, #3
 800385e:	4927      	ldr	r1, [pc, #156]	; (80038fc <HAL_RCC_OscConfig+0x26c>)
 8003860:	4313      	orrs	r3, r2
 8003862:	600b      	str	r3, [r1, #0]
 8003864:	e015      	b.n	8003892 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003866:	4b26      	ldr	r3, [pc, #152]	; (8003900 <HAL_RCC_OscConfig+0x270>)
 8003868:	2200      	movs	r2, #0
 800386a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800386c:	f7fe fd4c 	bl	8002308 <HAL_GetTick>
 8003870:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003872:	e008      	b.n	8003886 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003874:	f7fe fd48 	bl	8002308 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	2b02      	cmp	r3, #2
 8003880:	d901      	bls.n	8003886 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e17a      	b.n	8003b7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003886:	4b1d      	ldr	r3, [pc, #116]	; (80038fc <HAL_RCC_OscConfig+0x26c>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1f0      	bne.n	8003874 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0308 	and.w	r3, r3, #8
 800389a:	2b00      	cmp	r3, #0
 800389c:	d03a      	beq.n	8003914 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d019      	beq.n	80038da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038a6:	4b17      	ldr	r3, [pc, #92]	; (8003904 <HAL_RCC_OscConfig+0x274>)
 80038a8:	2201      	movs	r2, #1
 80038aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ac:	f7fe fd2c 	bl	8002308 <HAL_GetTick>
 80038b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038b2:	e008      	b.n	80038c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038b4:	f7fe fd28 	bl	8002308 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d901      	bls.n	80038c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e15a      	b.n	8003b7c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038c6:	4b0d      	ldr	r3, [pc, #52]	; (80038fc <HAL_RCC_OscConfig+0x26c>)
 80038c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d0f0      	beq.n	80038b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80038d2:	2001      	movs	r0, #1
 80038d4:	f000 fac6 	bl	8003e64 <RCC_Delay>
 80038d8:	e01c      	b.n	8003914 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038da:	4b0a      	ldr	r3, [pc, #40]	; (8003904 <HAL_RCC_OscConfig+0x274>)
 80038dc:	2200      	movs	r2, #0
 80038de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038e0:	f7fe fd12 	bl	8002308 <HAL_GetTick>
 80038e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038e6:	e00f      	b.n	8003908 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038e8:	f7fe fd0e 	bl	8002308 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d908      	bls.n	8003908 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e140      	b.n	8003b7c <HAL_RCC_OscConfig+0x4ec>
 80038fa:	bf00      	nop
 80038fc:	40021000 	.word	0x40021000
 8003900:	42420000 	.word	0x42420000
 8003904:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003908:	4b9e      	ldr	r3, [pc, #632]	; (8003b84 <HAL_RCC_OscConfig+0x4f4>)
 800390a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390c:	f003 0302 	and.w	r3, r3, #2
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1e9      	bne.n	80038e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0304 	and.w	r3, r3, #4
 800391c:	2b00      	cmp	r3, #0
 800391e:	f000 80a6 	beq.w	8003a6e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003922:	2300      	movs	r3, #0
 8003924:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003926:	4b97      	ldr	r3, [pc, #604]	; (8003b84 <HAL_RCC_OscConfig+0x4f4>)
 8003928:	69db      	ldr	r3, [r3, #28]
 800392a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10d      	bne.n	800394e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003932:	4b94      	ldr	r3, [pc, #592]	; (8003b84 <HAL_RCC_OscConfig+0x4f4>)
 8003934:	69db      	ldr	r3, [r3, #28]
 8003936:	4a93      	ldr	r2, [pc, #588]	; (8003b84 <HAL_RCC_OscConfig+0x4f4>)
 8003938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800393c:	61d3      	str	r3, [r2, #28]
 800393e:	4b91      	ldr	r3, [pc, #580]	; (8003b84 <HAL_RCC_OscConfig+0x4f4>)
 8003940:	69db      	ldr	r3, [r3, #28]
 8003942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003946:	60bb      	str	r3, [r7, #8]
 8003948:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800394a:	2301      	movs	r3, #1
 800394c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800394e:	4b8e      	ldr	r3, [pc, #568]	; (8003b88 <HAL_RCC_OscConfig+0x4f8>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003956:	2b00      	cmp	r3, #0
 8003958:	d118      	bne.n	800398c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800395a:	4b8b      	ldr	r3, [pc, #556]	; (8003b88 <HAL_RCC_OscConfig+0x4f8>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a8a      	ldr	r2, [pc, #552]	; (8003b88 <HAL_RCC_OscConfig+0x4f8>)
 8003960:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003964:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003966:	f7fe fccf 	bl	8002308 <HAL_GetTick>
 800396a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800396c:	e008      	b.n	8003980 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800396e:	f7fe fccb 	bl	8002308 <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	2b64      	cmp	r3, #100	; 0x64
 800397a:	d901      	bls.n	8003980 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e0fd      	b.n	8003b7c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003980:	4b81      	ldr	r3, [pc, #516]	; (8003b88 <HAL_RCC_OscConfig+0x4f8>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003988:	2b00      	cmp	r3, #0
 800398a:	d0f0      	beq.n	800396e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	2b01      	cmp	r3, #1
 8003992:	d106      	bne.n	80039a2 <HAL_RCC_OscConfig+0x312>
 8003994:	4b7b      	ldr	r3, [pc, #492]	; (8003b84 <HAL_RCC_OscConfig+0x4f4>)
 8003996:	6a1b      	ldr	r3, [r3, #32]
 8003998:	4a7a      	ldr	r2, [pc, #488]	; (8003b84 <HAL_RCC_OscConfig+0x4f4>)
 800399a:	f043 0301 	orr.w	r3, r3, #1
 800399e:	6213      	str	r3, [r2, #32]
 80039a0:	e02d      	b.n	80039fe <HAL_RCC_OscConfig+0x36e>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d10c      	bne.n	80039c4 <HAL_RCC_OscConfig+0x334>
 80039aa:	4b76      	ldr	r3, [pc, #472]	; (8003b84 <HAL_RCC_OscConfig+0x4f4>)
 80039ac:	6a1b      	ldr	r3, [r3, #32]
 80039ae:	4a75      	ldr	r2, [pc, #468]	; (8003b84 <HAL_RCC_OscConfig+0x4f4>)
 80039b0:	f023 0301 	bic.w	r3, r3, #1
 80039b4:	6213      	str	r3, [r2, #32]
 80039b6:	4b73      	ldr	r3, [pc, #460]	; (8003b84 <HAL_RCC_OscConfig+0x4f4>)
 80039b8:	6a1b      	ldr	r3, [r3, #32]
 80039ba:	4a72      	ldr	r2, [pc, #456]	; (8003b84 <HAL_RCC_OscConfig+0x4f4>)
 80039bc:	f023 0304 	bic.w	r3, r3, #4
 80039c0:	6213      	str	r3, [r2, #32]
 80039c2:	e01c      	b.n	80039fe <HAL_RCC_OscConfig+0x36e>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	2b05      	cmp	r3, #5
 80039ca:	d10c      	bne.n	80039e6 <HAL_RCC_OscConfig+0x356>
 80039cc:	4b6d      	ldr	r3, [pc, #436]	; (8003b84 <HAL_RCC_OscConfig+0x4f4>)
 80039ce:	6a1b      	ldr	r3, [r3, #32]
 80039d0:	4a6c      	ldr	r2, [pc, #432]	; (8003b84 <HAL_RCC_OscConfig+0x4f4>)
 80039d2:	f043 0304 	orr.w	r3, r3, #4
 80039d6:	6213      	str	r3, [r2, #32]
 80039d8:	4b6a      	ldr	r3, [pc, #424]	; (8003b84 <HAL_RCC_OscConfig+0x4f4>)
 80039da:	6a1b      	ldr	r3, [r3, #32]
 80039dc:	4a69      	ldr	r2, [pc, #420]	; (8003b84 <HAL_RCC_OscConfig+0x4f4>)
 80039de:	f043 0301 	orr.w	r3, r3, #1
 80039e2:	6213      	str	r3, [r2, #32]
 80039e4:	e00b      	b.n	80039fe <HAL_RCC_OscConfig+0x36e>
 80039e6:	4b67      	ldr	r3, [pc, #412]	; (8003b84 <HAL_RCC_OscConfig+0x4f4>)
 80039e8:	6a1b      	ldr	r3, [r3, #32]
 80039ea:	4a66      	ldr	r2, [pc, #408]	; (8003b84 <HAL_RCC_OscConfig+0x4f4>)
 80039ec:	f023 0301 	bic.w	r3, r3, #1
 80039f0:	6213      	str	r3, [r2, #32]
 80039f2:	4b64      	ldr	r3, [pc, #400]	; (8003b84 <HAL_RCC_OscConfig+0x4f4>)
 80039f4:	6a1b      	ldr	r3, [r3, #32]
 80039f6:	4a63      	ldr	r2, [pc, #396]	; (8003b84 <HAL_RCC_OscConfig+0x4f4>)
 80039f8:	f023 0304 	bic.w	r3, r3, #4
 80039fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d015      	beq.n	8003a32 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a06:	f7fe fc7f 	bl	8002308 <HAL_GetTick>
 8003a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a0c:	e00a      	b.n	8003a24 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a0e:	f7fe fc7b 	bl	8002308 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d901      	bls.n	8003a24 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e0ab      	b.n	8003b7c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a24:	4b57      	ldr	r3, [pc, #348]	; (8003b84 <HAL_RCC_OscConfig+0x4f4>)
 8003a26:	6a1b      	ldr	r3, [r3, #32]
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d0ee      	beq.n	8003a0e <HAL_RCC_OscConfig+0x37e>
 8003a30:	e014      	b.n	8003a5c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a32:	f7fe fc69 	bl	8002308 <HAL_GetTick>
 8003a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a38:	e00a      	b.n	8003a50 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a3a:	f7fe fc65 	bl	8002308 <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d901      	bls.n	8003a50 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e095      	b.n	8003b7c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a50:	4b4c      	ldr	r3, [pc, #304]	; (8003b84 <HAL_RCC_OscConfig+0x4f4>)
 8003a52:	6a1b      	ldr	r3, [r3, #32]
 8003a54:	f003 0302 	and.w	r3, r3, #2
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1ee      	bne.n	8003a3a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a5c:	7dfb      	ldrb	r3, [r7, #23]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d105      	bne.n	8003a6e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a62:	4b48      	ldr	r3, [pc, #288]	; (8003b84 <HAL_RCC_OscConfig+0x4f4>)
 8003a64:	69db      	ldr	r3, [r3, #28]
 8003a66:	4a47      	ldr	r2, [pc, #284]	; (8003b84 <HAL_RCC_OscConfig+0x4f4>)
 8003a68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a6c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	69db      	ldr	r3, [r3, #28]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f000 8081 	beq.w	8003b7a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a78:	4b42      	ldr	r3, [pc, #264]	; (8003b84 <HAL_RCC_OscConfig+0x4f4>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f003 030c 	and.w	r3, r3, #12
 8003a80:	2b08      	cmp	r3, #8
 8003a82:	d061      	beq.n	8003b48 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	69db      	ldr	r3, [r3, #28]
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d146      	bne.n	8003b1a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a8c:	4b3f      	ldr	r3, [pc, #252]	; (8003b8c <HAL_RCC_OscConfig+0x4fc>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a92:	f7fe fc39 	bl	8002308 <HAL_GetTick>
 8003a96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a98:	e008      	b.n	8003aac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a9a:	f7fe fc35 	bl	8002308 <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d901      	bls.n	8003aac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e067      	b.n	8003b7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003aac:	4b35      	ldr	r3, [pc, #212]	; (8003b84 <HAL_RCC_OscConfig+0x4f4>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d1f0      	bne.n	8003a9a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a1b      	ldr	r3, [r3, #32]
 8003abc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ac0:	d108      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003ac2:	4b30      	ldr	r3, [pc, #192]	; (8003b84 <HAL_RCC_OscConfig+0x4f4>)
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	492d      	ldr	r1, [pc, #180]	; (8003b84 <HAL_RCC_OscConfig+0x4f4>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ad4:	4b2b      	ldr	r3, [pc, #172]	; (8003b84 <HAL_RCC_OscConfig+0x4f4>)
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a19      	ldr	r1, [r3, #32]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae4:	430b      	orrs	r3, r1
 8003ae6:	4927      	ldr	r1, [pc, #156]	; (8003b84 <HAL_RCC_OscConfig+0x4f4>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003aec:	4b27      	ldr	r3, [pc, #156]	; (8003b8c <HAL_RCC_OscConfig+0x4fc>)
 8003aee:	2201      	movs	r2, #1
 8003af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af2:	f7fe fc09 	bl	8002308 <HAL_GetTick>
 8003af6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003af8:	e008      	b.n	8003b0c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003afa:	f7fe fc05 	bl	8002308 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d901      	bls.n	8003b0c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e037      	b.n	8003b7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b0c:	4b1d      	ldr	r3, [pc, #116]	; (8003b84 <HAL_RCC_OscConfig+0x4f4>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d0f0      	beq.n	8003afa <HAL_RCC_OscConfig+0x46a>
 8003b18:	e02f      	b.n	8003b7a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b1a:	4b1c      	ldr	r3, [pc, #112]	; (8003b8c <HAL_RCC_OscConfig+0x4fc>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b20:	f7fe fbf2 	bl	8002308 <HAL_GetTick>
 8003b24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b26:	e008      	b.n	8003b3a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b28:	f7fe fbee 	bl	8002308 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e020      	b.n	8003b7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b3a:	4b12      	ldr	r3, [pc, #72]	; (8003b84 <HAL_RCC_OscConfig+0x4f4>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1f0      	bne.n	8003b28 <HAL_RCC_OscConfig+0x498>
 8003b46:	e018      	b.n	8003b7a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	69db      	ldr	r3, [r3, #28]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d101      	bne.n	8003b54 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e013      	b.n	8003b7c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b54:	4b0b      	ldr	r3, [pc, #44]	; (8003b84 <HAL_RCC_OscConfig+0x4f4>)
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a1b      	ldr	r3, [r3, #32]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d106      	bne.n	8003b76 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d001      	beq.n	8003b7a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e000      	b.n	8003b7c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003b7a:	2300      	movs	r3, #0
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3718      	adds	r7, #24
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	40021000 	.word	0x40021000
 8003b88:	40007000 	.word	0x40007000
 8003b8c:	42420060 	.word	0x42420060

08003b90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d101      	bne.n	8003ba4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e0d0      	b.n	8003d46 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ba4:	4b6a      	ldr	r3, [pc, #424]	; (8003d50 <HAL_RCC_ClockConfig+0x1c0>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0307 	and.w	r3, r3, #7
 8003bac:	683a      	ldr	r2, [r7, #0]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d910      	bls.n	8003bd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bb2:	4b67      	ldr	r3, [pc, #412]	; (8003d50 <HAL_RCC_ClockConfig+0x1c0>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f023 0207 	bic.w	r2, r3, #7
 8003bba:	4965      	ldr	r1, [pc, #404]	; (8003d50 <HAL_RCC_ClockConfig+0x1c0>)
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bc2:	4b63      	ldr	r3, [pc, #396]	; (8003d50 <HAL_RCC_ClockConfig+0x1c0>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0307 	and.w	r3, r3, #7
 8003bca:	683a      	ldr	r2, [r7, #0]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d001      	beq.n	8003bd4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e0b8      	b.n	8003d46 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0302 	and.w	r3, r3, #2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d020      	beq.n	8003c22 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0304 	and.w	r3, r3, #4
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d005      	beq.n	8003bf8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bec:	4b59      	ldr	r3, [pc, #356]	; (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	4a58      	ldr	r2, [pc, #352]	; (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003bf2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003bf6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0308 	and.w	r3, r3, #8
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d005      	beq.n	8003c10 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c04:	4b53      	ldr	r3, [pc, #332]	; (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	4a52      	ldr	r2, [pc, #328]	; (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003c0a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003c0e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c10:	4b50      	ldr	r3, [pc, #320]	; (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	494d      	ldr	r1, [pc, #308]	; (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d040      	beq.n	8003cb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d107      	bne.n	8003c46 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c36:	4b47      	ldr	r3, [pc, #284]	; (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d115      	bne.n	8003c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e07f      	b.n	8003d46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d107      	bne.n	8003c5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c4e:	4b41      	ldr	r3, [pc, #260]	; (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d109      	bne.n	8003c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e073      	b.n	8003d46 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c5e:	4b3d      	ldr	r3, [pc, #244]	; (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0302 	and.w	r3, r3, #2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d101      	bne.n	8003c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e06b      	b.n	8003d46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c6e:	4b39      	ldr	r3, [pc, #228]	; (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f023 0203 	bic.w	r2, r3, #3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	4936      	ldr	r1, [pc, #216]	; (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c80:	f7fe fb42 	bl	8002308 <HAL_GetTick>
 8003c84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c86:	e00a      	b.n	8003c9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c88:	f7fe fb3e 	bl	8002308 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e053      	b.n	8003d46 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c9e:	4b2d      	ldr	r3, [pc, #180]	; (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f003 020c 	and.w	r2, r3, #12
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d1eb      	bne.n	8003c88 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cb0:	4b27      	ldr	r3, [pc, #156]	; (8003d50 <HAL_RCC_ClockConfig+0x1c0>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0307 	and.w	r3, r3, #7
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d210      	bcs.n	8003ce0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cbe:	4b24      	ldr	r3, [pc, #144]	; (8003d50 <HAL_RCC_ClockConfig+0x1c0>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f023 0207 	bic.w	r2, r3, #7
 8003cc6:	4922      	ldr	r1, [pc, #136]	; (8003d50 <HAL_RCC_ClockConfig+0x1c0>)
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cce:	4b20      	ldr	r3, [pc, #128]	; (8003d50 <HAL_RCC_ClockConfig+0x1c0>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0307 	and.w	r3, r3, #7
 8003cd6:	683a      	ldr	r2, [r7, #0]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d001      	beq.n	8003ce0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e032      	b.n	8003d46 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0304 	and.w	r3, r3, #4
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d008      	beq.n	8003cfe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cec:	4b19      	ldr	r3, [pc, #100]	; (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	4916      	ldr	r1, [pc, #88]	; (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0308 	and.w	r3, r3, #8
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d009      	beq.n	8003d1e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d0a:	4b12      	ldr	r3, [pc, #72]	; (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	00db      	lsls	r3, r3, #3
 8003d18:	490e      	ldr	r1, [pc, #56]	; (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d1e:	f000 f821 	bl	8003d64 <HAL_RCC_GetSysClockFreq>
 8003d22:	4601      	mov	r1, r0
 8003d24:	4b0b      	ldr	r3, [pc, #44]	; (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	091b      	lsrs	r3, r3, #4
 8003d2a:	f003 030f 	and.w	r3, r3, #15
 8003d2e:	4a0a      	ldr	r2, [pc, #40]	; (8003d58 <HAL_RCC_ClockConfig+0x1c8>)
 8003d30:	5cd3      	ldrb	r3, [r2, r3]
 8003d32:	fa21 f303 	lsr.w	r3, r1, r3
 8003d36:	4a09      	ldr	r2, [pc, #36]	; (8003d5c <HAL_RCC_ClockConfig+0x1cc>)
 8003d38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d3a:	4b09      	ldr	r3, [pc, #36]	; (8003d60 <HAL_RCC_ClockConfig+0x1d0>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7fe faa0 	bl	8002284 <HAL_InitTick>

  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3710      	adds	r7, #16
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	40022000 	.word	0x40022000
 8003d54:	40021000 	.word	0x40021000
 8003d58:	08004564 	.word	0x08004564
 8003d5c:	20000000 	.word	0x20000000
 8003d60:	20000004 	.word	0x20000004

08003d64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d64:	b490      	push	{r4, r7}
 8003d66:	b08a      	sub	sp, #40	; 0x28
 8003d68:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003d6a:	4b2a      	ldr	r3, [pc, #168]	; (8003e14 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003d6c:	1d3c      	adds	r4, r7, #4
 8003d6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003d74:	4b28      	ldr	r3, [pc, #160]	; (8003e18 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003d76:	881b      	ldrh	r3, [r3, #0]
 8003d78:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	61fb      	str	r3, [r7, #28]
 8003d7e:	2300      	movs	r3, #0
 8003d80:	61bb      	str	r3, [r7, #24]
 8003d82:	2300      	movs	r3, #0
 8003d84:	627b      	str	r3, [r7, #36]	; 0x24
 8003d86:	2300      	movs	r3, #0
 8003d88:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003d8e:	4b23      	ldr	r3, [pc, #140]	; (8003e1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	f003 030c 	and.w	r3, r3, #12
 8003d9a:	2b04      	cmp	r3, #4
 8003d9c:	d002      	beq.n	8003da4 <HAL_RCC_GetSysClockFreq+0x40>
 8003d9e:	2b08      	cmp	r3, #8
 8003da0:	d003      	beq.n	8003daa <HAL_RCC_GetSysClockFreq+0x46>
 8003da2:	e02d      	b.n	8003e00 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003da4:	4b1e      	ldr	r3, [pc, #120]	; (8003e20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003da6:	623b      	str	r3, [r7, #32]
      break;
 8003da8:	e02d      	b.n	8003e06 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	0c9b      	lsrs	r3, r3, #18
 8003dae:	f003 030f 	and.w	r3, r3, #15
 8003db2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003db6:	4413      	add	r3, r2
 8003db8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003dbc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d013      	beq.n	8003df0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003dc8:	4b14      	ldr	r3, [pc, #80]	; (8003e1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	0c5b      	lsrs	r3, r3, #17
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003dd6:	4413      	add	r3, r2
 8003dd8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003ddc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	4a0f      	ldr	r2, [pc, #60]	; (8003e20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003de2:	fb02 f203 	mul.w	r2, r2, r3
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dec:	627b      	str	r3, [r7, #36]	; 0x24
 8003dee:	e004      	b.n	8003dfa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	4a0c      	ldr	r2, [pc, #48]	; (8003e24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003df4:	fb02 f303 	mul.w	r3, r2, r3
 8003df8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfc:	623b      	str	r3, [r7, #32]
      break;
 8003dfe:	e002      	b.n	8003e06 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e00:	4b07      	ldr	r3, [pc, #28]	; (8003e20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e02:	623b      	str	r3, [r7, #32]
      break;
 8003e04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e06:	6a3b      	ldr	r3, [r7, #32]
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3728      	adds	r7, #40	; 0x28
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bc90      	pop	{r4, r7}
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop
 8003e14:	0800453c 	.word	0x0800453c
 8003e18:	0800454c 	.word	0x0800454c
 8003e1c:	40021000 	.word	0x40021000
 8003e20:	007a1200 	.word	0x007a1200
 8003e24:	003d0900 	.word	0x003d0900

08003e28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e2c:	4b02      	ldr	r3, [pc, #8]	; (8003e38 <HAL_RCC_GetHCLKFreq+0x10>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bc80      	pop	{r7}
 8003e36:	4770      	bx	lr
 8003e38:	20000000 	.word	0x20000000

08003e3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e40:	f7ff fff2 	bl	8003e28 <HAL_RCC_GetHCLKFreq>
 8003e44:	4601      	mov	r1, r0
 8003e46:	4b05      	ldr	r3, [pc, #20]	; (8003e5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	0adb      	lsrs	r3, r3, #11
 8003e4c:	f003 0307 	and.w	r3, r3, #7
 8003e50:	4a03      	ldr	r2, [pc, #12]	; (8003e60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e52:	5cd3      	ldrb	r3, [r2, r3]
 8003e54:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	40021000 	.word	0x40021000
 8003e60:	08004574 	.word	0x08004574

08003e64 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003e6c:	4b0a      	ldr	r3, [pc, #40]	; (8003e98 <RCC_Delay+0x34>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a0a      	ldr	r2, [pc, #40]	; (8003e9c <RCC_Delay+0x38>)
 8003e72:	fba2 2303 	umull	r2, r3, r2, r3
 8003e76:	0a5b      	lsrs	r3, r3, #9
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	fb02 f303 	mul.w	r3, r2, r3
 8003e7e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003e80:	bf00      	nop
  }
  while (Delay --);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	1e5a      	subs	r2, r3, #1
 8003e86:	60fa      	str	r2, [r7, #12]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1f9      	bne.n	8003e80 <RCC_Delay+0x1c>
}
 8003e8c:	bf00      	nop
 8003e8e:	3714      	adds	r7, #20
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bc80      	pop	{r7}
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	20000000 	.word	0x20000000
 8003e9c:	10624dd3 	.word	0x10624dd3

08003ea0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b086      	sub	sp, #24
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	613b      	str	r3, [r7, #16]
 8003eac:	2300      	movs	r3, #0
 8003eae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0301 	and.w	r3, r3, #1
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d07d      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ec0:	4b4f      	ldr	r3, [pc, #316]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ec2:	69db      	ldr	r3, [r3, #28]
 8003ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d10d      	bne.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ecc:	4b4c      	ldr	r3, [pc, #304]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ece:	69db      	ldr	r3, [r3, #28]
 8003ed0:	4a4b      	ldr	r2, [pc, #300]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ed2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ed6:	61d3      	str	r3, [r2, #28]
 8003ed8:	4b49      	ldr	r3, [pc, #292]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eda:	69db      	ldr	r3, [r3, #28]
 8003edc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ee0:	60bb      	str	r3, [r7, #8]
 8003ee2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ee8:	4b46      	ldr	r3, [pc, #280]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d118      	bne.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ef4:	4b43      	ldr	r3, [pc, #268]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a42      	ldr	r2, [pc, #264]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003efa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003efe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f00:	f7fe fa02 	bl	8002308 <HAL_GetTick>
 8003f04:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f06:	e008      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f08:	f7fe f9fe 	bl	8002308 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b64      	cmp	r3, #100	; 0x64
 8003f14:	d901      	bls.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e06d      	b.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f1a:	4b3a      	ldr	r3, [pc, #232]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d0f0      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f26:	4b36      	ldr	r3, [pc, #216]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f2e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d02e      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d027      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f44:	4b2e      	ldr	r3, [pc, #184]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f46:	6a1b      	ldr	r3, [r3, #32]
 8003f48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f4c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f4e:	4b2e      	ldr	r3, [pc, #184]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003f50:	2201      	movs	r2, #1
 8003f52:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f54:	4b2c      	ldr	r3, [pc, #176]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003f5a:	4a29      	ldr	r2, [pc, #164]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d014      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f6a:	f7fe f9cd 	bl	8002308 <HAL_GetTick>
 8003f6e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f70:	e00a      	b.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f72:	f7fe f9c9 	bl	8002308 <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d901      	bls.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e036      	b.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f88:	4b1d      	ldr	r3, [pc, #116]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f8a:	6a1b      	ldr	r3, [r3, #32]
 8003f8c:	f003 0302 	and.w	r3, r3, #2
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d0ee      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f94:	4b1a      	ldr	r3, [pc, #104]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f96:	6a1b      	ldr	r3, [r3, #32]
 8003f98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	4917      	ldr	r1, [pc, #92]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003fa6:	7dfb      	ldrb	r3, [r7, #23]
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d105      	bne.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fac:	4b14      	ldr	r3, [pc, #80]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fae:	69db      	ldr	r3, [r3, #28]
 8003fb0:	4a13      	ldr	r2, [pc, #76]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fb6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0302 	and.w	r3, r3, #2
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d008      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003fc4:	4b0e      	ldr	r3, [pc, #56]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	490b      	ldr	r1, [pc, #44]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0310 	and.w	r3, r3, #16
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d008      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003fe2:	4b07      	ldr	r3, [pc, #28]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	4904      	ldr	r1, [pc, #16]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3718      	adds	r7, #24
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	40021000 	.word	0x40021000
 8004004:	40007000 	.word	0x40007000
 8004008:	42420440 	.word	0x42420440

0800400c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800400c:	b590      	push	{r4, r7, lr}
 800400e:	b08d      	sub	sp, #52	; 0x34
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004014:	4b55      	ldr	r3, [pc, #340]	; (800416c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004016:	f107 040c 	add.w	r4, r7, #12
 800401a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800401c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004020:	4b53      	ldr	r3, [pc, #332]	; (8004170 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004022:	881b      	ldrh	r3, [r3, #0]
 8004024:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004026:	2300      	movs	r3, #0
 8004028:	627b      	str	r3, [r7, #36]	; 0x24
 800402a:	2300      	movs	r3, #0
 800402c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800402e:	2300      	movs	r3, #0
 8004030:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004032:	2300      	movs	r3, #0
 8004034:	61fb      	str	r3, [r7, #28]
 8004036:	2300      	movs	r3, #0
 8004038:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2b02      	cmp	r3, #2
 800403e:	d07f      	beq.n	8004140 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8004040:	2b10      	cmp	r3, #16
 8004042:	d002      	beq.n	800404a <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8004044:	2b01      	cmp	r3, #1
 8004046:	d048      	beq.n	80040da <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004048:	e08b      	b.n	8004162 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 800404a:	4b4a      	ldr	r3, [pc, #296]	; (8004174 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004050:	4b48      	ldr	r3, [pc, #288]	; (8004174 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d07f      	beq.n	800415c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	0c9b      	lsrs	r3, r3, #18
 8004060:	f003 030f 	and.w	r3, r3, #15
 8004064:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004068:	4413      	add	r3, r2
 800406a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800406e:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d018      	beq.n	80040ac <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800407a:	4b3e      	ldr	r3, [pc, #248]	; (8004174 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	0c5b      	lsrs	r3, r3, #17
 8004080:	f003 0301 	and.w	r3, r3, #1
 8004084:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004088:	4413      	add	r3, r2
 800408a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800408e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00d      	beq.n	80040b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800409a:	4a37      	ldr	r2, [pc, #220]	; (8004178 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 800409c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409e:	fbb2 f2f3 	udiv	r2, r2, r3
 80040a2:	6a3b      	ldr	r3, [r7, #32]
 80040a4:	fb02 f303 	mul.w	r3, r2, r3
 80040a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040aa:	e004      	b.n	80040b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80040ac:	6a3b      	ldr	r3, [r7, #32]
 80040ae:	4a33      	ldr	r2, [pc, #204]	; (800417c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80040b0:	fb02 f303 	mul.w	r3, r2, r3
 80040b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80040b6:	4b2f      	ldr	r3, [pc, #188]	; (8004174 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040c2:	d102      	bne.n	80040ca <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 80040c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040c6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80040c8:	e048      	b.n	800415c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 80040ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040cc:	005b      	lsls	r3, r3, #1
 80040ce:	4a2c      	ldr	r2, [pc, #176]	; (8004180 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80040d0:	fba2 2303 	umull	r2, r3, r2, r3
 80040d4:	085b      	lsrs	r3, r3, #1
 80040d6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80040d8:	e040      	b.n	800415c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 80040da:	4b26      	ldr	r3, [pc, #152]	; (8004174 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040ea:	d108      	bne.n	80040fe <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	f003 0302 	and.w	r3, r3, #2
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d003      	beq.n	80040fe <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 80040f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80040fc:	e01f      	b.n	800413e <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004104:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004108:	d109      	bne.n	800411e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800410a:	4b1a      	ldr	r3, [pc, #104]	; (8004174 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800410c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b00      	cmp	r3, #0
 8004114:	d003      	beq.n	800411e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8004116:	f649 4340 	movw	r3, #40000	; 0x9c40
 800411a:	62bb      	str	r3, [r7, #40]	; 0x28
 800411c:	e00f      	b.n	800413e <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004124:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004128:	d11a      	bne.n	8004160 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800412a:	4b12      	ldr	r3, [pc, #72]	; (8004174 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d014      	beq.n	8004160 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8004136:	f24f 4324 	movw	r3, #62500	; 0xf424
 800413a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800413c:	e010      	b.n	8004160 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800413e:	e00f      	b.n	8004160 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004140:	f7ff fe7c 	bl	8003e3c <HAL_RCC_GetPCLK2Freq>
 8004144:	4602      	mov	r2, r0
 8004146:	4b0b      	ldr	r3, [pc, #44]	; (8004174 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	0b9b      	lsrs	r3, r3, #14
 800414c:	f003 0303 	and.w	r3, r3, #3
 8004150:	3301      	adds	r3, #1
 8004152:	005b      	lsls	r3, r3, #1
 8004154:	fbb2 f3f3 	udiv	r3, r2, r3
 8004158:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800415a:	e002      	b.n	8004162 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 800415c:	bf00      	nop
 800415e:	e000      	b.n	8004162 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8004160:	bf00      	nop
    }
  }
  return (frequency);
 8004162:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004164:	4618      	mov	r0, r3
 8004166:	3734      	adds	r7, #52	; 0x34
 8004168:	46bd      	mov	sp, r7
 800416a:	bd90      	pop	{r4, r7, pc}
 800416c:	08004550 	.word	0x08004550
 8004170:	08004560 	.word	0x08004560
 8004174:	40021000 	.word	0x40021000
 8004178:	007a1200 	.word	0x007a1200
 800417c:	003d0900 	.word	0x003d0900
 8004180:	aaaaaaab 	.word	0xaaaaaaab

08004184 <__errno>:
 8004184:	4b01      	ldr	r3, [pc, #4]	; (800418c <__errno+0x8>)
 8004186:	6818      	ldr	r0, [r3, #0]
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	2000000c 	.word	0x2000000c

08004190 <__libc_init_array>:
 8004190:	b570      	push	{r4, r5, r6, lr}
 8004192:	2500      	movs	r5, #0
 8004194:	4e0c      	ldr	r6, [pc, #48]	; (80041c8 <__libc_init_array+0x38>)
 8004196:	4c0d      	ldr	r4, [pc, #52]	; (80041cc <__libc_init_array+0x3c>)
 8004198:	1ba4      	subs	r4, r4, r6
 800419a:	10a4      	asrs	r4, r4, #2
 800419c:	42a5      	cmp	r5, r4
 800419e:	d109      	bne.n	80041b4 <__libc_init_array+0x24>
 80041a0:	f000 f9c0 	bl	8004524 <_init>
 80041a4:	2500      	movs	r5, #0
 80041a6:	4e0a      	ldr	r6, [pc, #40]	; (80041d0 <__libc_init_array+0x40>)
 80041a8:	4c0a      	ldr	r4, [pc, #40]	; (80041d4 <__libc_init_array+0x44>)
 80041aa:	1ba4      	subs	r4, r4, r6
 80041ac:	10a4      	asrs	r4, r4, #2
 80041ae:	42a5      	cmp	r5, r4
 80041b0:	d105      	bne.n	80041be <__libc_init_array+0x2e>
 80041b2:	bd70      	pop	{r4, r5, r6, pc}
 80041b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80041b8:	4798      	blx	r3
 80041ba:	3501      	adds	r5, #1
 80041bc:	e7ee      	b.n	800419c <__libc_init_array+0xc>
 80041be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80041c2:	4798      	blx	r3
 80041c4:	3501      	adds	r5, #1
 80041c6:	e7f2      	b.n	80041ae <__libc_init_array+0x1e>
 80041c8:	08004584 	.word	0x08004584
 80041cc:	08004584 	.word	0x08004584
 80041d0:	08004584 	.word	0x08004584
 80041d4:	08004588 	.word	0x08004588

080041d8 <memset>:
 80041d8:	4603      	mov	r3, r0
 80041da:	4402      	add	r2, r0
 80041dc:	4293      	cmp	r3, r2
 80041de:	d100      	bne.n	80041e2 <memset+0xa>
 80041e0:	4770      	bx	lr
 80041e2:	f803 1b01 	strb.w	r1, [r3], #1
 80041e6:	e7f9      	b.n	80041dc <memset+0x4>

080041e8 <logf>:
 80041e8:	b570      	push	{r4, r5, r6, lr}
 80041ea:	b08a      	sub	sp, #40	; 0x28
 80041ec:	4604      	mov	r4, r0
 80041ee:	f000 f86d 	bl	80042cc <__ieee754_logf>
 80041f2:	4b31      	ldr	r3, [pc, #196]	; (80042b8 <logf+0xd0>)
 80041f4:	4606      	mov	r6, r0
 80041f6:	f993 5000 	ldrsb.w	r5, [r3]
 80041fa:	1c6b      	adds	r3, r5, #1
 80041fc:	d059      	beq.n	80042b2 <logf+0xca>
 80041fe:	4621      	mov	r1, r4
 8004200:	4620      	mov	r0, r4
 8004202:	f7fc feb7 	bl	8000f74 <__aeabi_fcmpun>
 8004206:	2800      	cmp	r0, #0
 8004208:	d153      	bne.n	80042b2 <logf+0xca>
 800420a:	2100      	movs	r1, #0
 800420c:	4620      	mov	r0, r4
 800420e:	f7fc fea7 	bl	8000f60 <__aeabi_fcmpgt>
 8004212:	2800      	cmp	r0, #0
 8004214:	d14d      	bne.n	80042b2 <logf+0xca>
 8004216:	4b29      	ldr	r3, [pc, #164]	; (80042bc <logf+0xd4>)
 8004218:	9008      	str	r0, [sp, #32]
 800421a:	4620      	mov	r0, r4
 800421c:	9301      	str	r3, [sp, #4]
 800421e:	f7fc f8fb 	bl	8000418 <__aeabi_f2d>
 8004222:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004226:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800422a:	b995      	cbnz	r5, 8004252 <logf+0x6a>
 800422c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8004230:	4b23      	ldr	r3, [pc, #140]	; (80042c0 <logf+0xd8>)
 8004232:	2100      	movs	r1, #0
 8004234:	4620      	mov	r0, r4
 8004236:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800423a:	f7fc fe69 	bl	8000f10 <__aeabi_fcmpeq>
 800423e:	bb30      	cbnz	r0, 800428e <logf+0xa6>
 8004240:	2301      	movs	r3, #1
 8004242:	2d02      	cmp	r5, #2
 8004244:	9300      	str	r3, [sp, #0]
 8004246:	d117      	bne.n	8004278 <logf+0x90>
 8004248:	f7ff ff9c 	bl	8004184 <__errno>
 800424c:	2321      	movs	r3, #33	; 0x21
 800424e:	6003      	str	r3, [r0, #0]
 8004250:	e017      	b.n	8004282 <logf+0x9a>
 8004252:	2200      	movs	r2, #0
 8004254:	4b1b      	ldr	r3, [pc, #108]	; (80042c4 <logf+0xdc>)
 8004256:	2100      	movs	r1, #0
 8004258:	4620      	mov	r0, r4
 800425a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800425e:	f7fc fe57 	bl	8000f10 <__aeabi_fcmpeq>
 8004262:	2800      	cmp	r0, #0
 8004264:	d0ec      	beq.n	8004240 <logf+0x58>
 8004266:	2302      	movs	r3, #2
 8004268:	429d      	cmp	r5, r3
 800426a:	9300      	str	r3, [sp, #0]
 800426c:	d111      	bne.n	8004292 <logf+0xaa>
 800426e:	f7ff ff89 	bl	8004184 <__errno>
 8004272:	2322      	movs	r3, #34	; 0x22
 8004274:	6003      	str	r3, [r0, #0]
 8004276:	e011      	b.n	800429c <logf+0xb4>
 8004278:	4668      	mov	r0, sp
 800427a:	f000 f94b 	bl	8004514 <matherr>
 800427e:	2800      	cmp	r0, #0
 8004280:	d0e2      	beq.n	8004248 <logf+0x60>
 8004282:	4811      	ldr	r0, [pc, #68]	; (80042c8 <logf+0xe0>)
 8004284:	f000 f948 	bl	8004518 <nan>
 8004288:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800428c:	e006      	b.n	800429c <logf+0xb4>
 800428e:	2302      	movs	r3, #2
 8004290:	9300      	str	r3, [sp, #0]
 8004292:	4668      	mov	r0, sp
 8004294:	f000 f93e 	bl	8004514 <matherr>
 8004298:	2800      	cmp	r0, #0
 800429a:	d0e8      	beq.n	800426e <logf+0x86>
 800429c:	9b08      	ldr	r3, [sp, #32]
 800429e:	b11b      	cbz	r3, 80042a8 <logf+0xc0>
 80042a0:	f7ff ff70 	bl	8004184 <__errno>
 80042a4:	9b08      	ldr	r3, [sp, #32]
 80042a6:	6003      	str	r3, [r0, #0]
 80042a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80042ac:	f7fc fb3e 	bl	800092c <__aeabi_d2f>
 80042b0:	4606      	mov	r6, r0
 80042b2:	4630      	mov	r0, r6
 80042b4:	b00a      	add	sp, #40	; 0x28
 80042b6:	bd70      	pop	{r4, r5, r6, pc}
 80042b8:	20000070 	.word	0x20000070
 80042bc:	0800457c 	.word	0x0800457c
 80042c0:	c7efffff 	.word	0xc7efffff
 80042c4:	fff00000 	.word	0xfff00000
 80042c8:	08004580 	.word	0x08004580

080042cc <__ieee754_logf>:
 80042cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042d0:	f030 4300 	bics.w	r3, r0, #2147483648	; 0x80000000
 80042d4:	4601      	mov	r1, r0
 80042d6:	4604      	mov	r4, r0
 80042d8:	d106      	bne.n	80042e8 <__ieee754_logf+0x1c>
 80042da:	2100      	movs	r1, #0
 80042dc:	f04f 404c 	mov.w	r0, #3422552064	; 0xcc000000
 80042e0:	f7fc fd36 	bl	8000d50 <__aeabi_fdiv>
 80042e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042e8:	2800      	cmp	r0, #0
 80042ea:	da03      	bge.n	80042f4 <__ieee754_logf+0x28>
 80042ec:	f7fc fb72 	bl	80009d4 <__aeabi_fsub>
 80042f0:	2100      	movs	r1, #0
 80042f2:	e7f5      	b.n	80042e0 <__ieee754_logf+0x14>
 80042f4:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80042f8:	db02      	blt.n	8004300 <__ieee754_logf+0x34>
 80042fa:	f7fc fb6d 	bl	80009d8 <__addsf3>
 80042fe:	e7f1      	b.n	80042e4 <__ieee754_logf+0x18>
 8004300:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8004304:	da36      	bge.n	8004374 <__ieee754_logf+0xa8>
 8004306:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800430a:	f7fc fc6d 	bl	8000be8 <__aeabi_fmul>
 800430e:	f06f 0218 	mvn.w	r2, #24
 8004312:	4604      	mov	r4, r0
 8004314:	4b73      	ldr	r3, [pc, #460]	; (80044e4 <__ieee754_logf+0x218>)
 8004316:	15e6      	asrs	r6, r4, #23
 8004318:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800431c:	3e7f      	subs	r6, #127	; 0x7f
 800431e:	4423      	add	r3, r4
 8004320:	4416      	add	r6, r2
 8004322:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004326:	eb06 56d3 	add.w	r6, r6, r3, lsr #23
 800432a:	f083 537e 	eor.w	r3, r3, #1065353216	; 0x3f800000
 800432e:	ea43 0004 	orr.w	r0, r3, r4
 8004332:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004336:	f7fc fb4d 	bl	80009d4 <__aeabi_fsub>
 800433a:	f104 030f 	add.w	r3, r4, #15
 800433e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004342:	2b0f      	cmp	r3, #15
 8004344:	4605      	mov	r5, r0
 8004346:	dc3a      	bgt.n	80043be <__ieee754_logf+0xf2>
 8004348:	2100      	movs	r1, #0
 800434a:	f7fc fde1 	bl	8000f10 <__aeabi_fcmpeq>
 800434e:	b198      	cbz	r0, 8004378 <__ieee754_logf+0xac>
 8004350:	2e00      	cmp	r6, #0
 8004352:	f000 80c4 	beq.w	80044de <__ieee754_logf+0x212>
 8004356:	4630      	mov	r0, r6
 8004358:	f7fc fbf2 	bl	8000b40 <__aeabi_i2f>
 800435c:	4962      	ldr	r1, [pc, #392]	; (80044e8 <__ieee754_logf+0x21c>)
 800435e:	4605      	mov	r5, r0
 8004360:	f7fc fc42 	bl	8000be8 <__aeabi_fmul>
 8004364:	4961      	ldr	r1, [pc, #388]	; (80044ec <__ieee754_logf+0x220>)
 8004366:	4604      	mov	r4, r0
 8004368:	4628      	mov	r0, r5
 800436a:	f7fc fc3d 	bl	8000be8 <__aeabi_fmul>
 800436e:	4601      	mov	r1, r0
 8004370:	4620      	mov	r0, r4
 8004372:	e7c2      	b.n	80042fa <__ieee754_logf+0x2e>
 8004374:	2200      	movs	r2, #0
 8004376:	e7cd      	b.n	8004314 <__ieee754_logf+0x48>
 8004378:	495d      	ldr	r1, [pc, #372]	; (80044f0 <__ieee754_logf+0x224>)
 800437a:	4628      	mov	r0, r5
 800437c:	f7fc fc34 	bl	8000be8 <__aeabi_fmul>
 8004380:	4601      	mov	r1, r0
 8004382:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8004386:	f7fc fb25 	bl	80009d4 <__aeabi_fsub>
 800438a:	4629      	mov	r1, r5
 800438c:	4604      	mov	r4, r0
 800438e:	4628      	mov	r0, r5
 8004390:	f7fc fc2a 	bl	8000be8 <__aeabi_fmul>
 8004394:	4601      	mov	r1, r0
 8004396:	4620      	mov	r0, r4
 8004398:	f7fc fc26 	bl	8000be8 <__aeabi_fmul>
 800439c:	4604      	mov	r4, r0
 800439e:	b90e      	cbnz	r6, 80043a4 <__ieee754_logf+0xd8>
 80043a0:	4621      	mov	r1, r4
 80043a2:	e06f      	b.n	8004484 <__ieee754_logf+0x1b8>
 80043a4:	4630      	mov	r0, r6
 80043a6:	f7fc fbcb 	bl	8000b40 <__aeabi_i2f>
 80043aa:	494f      	ldr	r1, [pc, #316]	; (80044e8 <__ieee754_logf+0x21c>)
 80043ac:	4607      	mov	r7, r0
 80043ae:	f7fc fc1b 	bl	8000be8 <__aeabi_fmul>
 80043b2:	4606      	mov	r6, r0
 80043b4:	4638      	mov	r0, r7
 80043b6:	494d      	ldr	r1, [pc, #308]	; (80044ec <__ieee754_logf+0x220>)
 80043b8:	f7fc fc16 	bl	8000be8 <__aeabi_fmul>
 80043bc:	e072      	b.n	80044a4 <__ieee754_logf+0x1d8>
 80043be:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80043c2:	f7fc fb09 	bl	80009d8 <__addsf3>
 80043c6:	4601      	mov	r1, r0
 80043c8:	4628      	mov	r0, r5
 80043ca:	f7fc fcc1 	bl	8000d50 <__aeabi_fdiv>
 80043ce:	4681      	mov	r9, r0
 80043d0:	4630      	mov	r0, r6
 80043d2:	f7fc fbb5 	bl	8000b40 <__aeabi_i2f>
 80043d6:	4649      	mov	r1, r9
 80043d8:	4680      	mov	r8, r0
 80043da:	4648      	mov	r0, r9
 80043dc:	f7fc fc04 	bl	8000be8 <__aeabi_fmul>
 80043e0:	4601      	mov	r1, r0
 80043e2:	4683      	mov	fp, r0
 80043e4:	f7fc fc00 	bl	8000be8 <__aeabi_fmul>
 80043e8:	4607      	mov	r7, r0
 80043ea:	4942      	ldr	r1, [pc, #264]	; (80044f4 <__ieee754_logf+0x228>)
 80043ec:	f7fc fbfc 	bl	8000be8 <__aeabi_fmul>
 80043f0:	4941      	ldr	r1, [pc, #260]	; (80044f8 <__ieee754_logf+0x22c>)
 80043f2:	f7fc faf1 	bl	80009d8 <__addsf3>
 80043f6:	4639      	mov	r1, r7
 80043f8:	f7fc fbf6 	bl	8000be8 <__aeabi_fmul>
 80043fc:	493f      	ldr	r1, [pc, #252]	; (80044fc <__ieee754_logf+0x230>)
 80043fe:	f7fc faeb 	bl	80009d8 <__addsf3>
 8004402:	4639      	mov	r1, r7
 8004404:	f7fc fbf0 	bl	8000be8 <__aeabi_fmul>
 8004408:	493d      	ldr	r1, [pc, #244]	; (8004500 <__ieee754_logf+0x234>)
 800440a:	f7fc fae5 	bl	80009d8 <__addsf3>
 800440e:	4659      	mov	r1, fp
 8004410:	f7fc fbea 	bl	8000be8 <__aeabi_fmul>
 8004414:	493b      	ldr	r1, [pc, #236]	; (8004504 <__ieee754_logf+0x238>)
 8004416:	4683      	mov	fp, r0
 8004418:	4638      	mov	r0, r7
 800441a:	f7fc fbe5 	bl	8000be8 <__aeabi_fmul>
 800441e:	493a      	ldr	r1, [pc, #232]	; (8004508 <__ieee754_logf+0x23c>)
 8004420:	f7fc fada 	bl	80009d8 <__addsf3>
 8004424:	4639      	mov	r1, r7
 8004426:	f7fc fbdf 	bl	8000be8 <__aeabi_fmul>
 800442a:	4938      	ldr	r1, [pc, #224]	; (800450c <__ieee754_logf+0x240>)
 800442c:	f7fc fad4 	bl	80009d8 <__addsf3>
 8004430:	4639      	mov	r1, r7
 8004432:	f7fc fbd9 	bl	8000be8 <__aeabi_fmul>
 8004436:	4601      	mov	r1, r0
 8004438:	4658      	mov	r0, fp
 800443a:	f7fc facd 	bl	80009d8 <__addsf3>
 800443e:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 8004510 <__ieee754_logf+0x244>
 8004442:	4607      	mov	r7, r0
 8004444:	f5c4 1057 	rsb	r0, r4, #3522560	; 0x35c000
 8004448:	44a2      	add	sl, r4
 800444a:	f500 7022 	add.w	r0, r0, #648	; 0x288
 800444e:	ea40 000a 	orr.w	r0, r0, sl
 8004452:	2800      	cmp	r0, #0
 8004454:	dd30      	ble.n	80044b8 <__ieee754_logf+0x1ec>
 8004456:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800445a:	4628      	mov	r0, r5
 800445c:	f7fc fbc4 	bl	8000be8 <__aeabi_fmul>
 8004460:	4629      	mov	r1, r5
 8004462:	f7fc fbc1 	bl	8000be8 <__aeabi_fmul>
 8004466:	4601      	mov	r1, r0
 8004468:	4604      	mov	r4, r0
 800446a:	4638      	mov	r0, r7
 800446c:	f7fc fab4 	bl	80009d8 <__addsf3>
 8004470:	4649      	mov	r1, r9
 8004472:	f7fc fbb9 	bl	8000be8 <__aeabi_fmul>
 8004476:	4607      	mov	r7, r0
 8004478:	b946      	cbnz	r6, 800448c <__ieee754_logf+0x1c0>
 800447a:	4601      	mov	r1, r0
 800447c:	4620      	mov	r0, r4
 800447e:	f7fc faa9 	bl	80009d4 <__aeabi_fsub>
 8004482:	4601      	mov	r1, r0
 8004484:	4628      	mov	r0, r5
 8004486:	f7fc faa5 	bl	80009d4 <__aeabi_fsub>
 800448a:	e72b      	b.n	80042e4 <__ieee754_logf+0x18>
 800448c:	4916      	ldr	r1, [pc, #88]	; (80044e8 <__ieee754_logf+0x21c>)
 800448e:	4640      	mov	r0, r8
 8004490:	f7fc fbaa 	bl	8000be8 <__aeabi_fmul>
 8004494:	4915      	ldr	r1, [pc, #84]	; (80044ec <__ieee754_logf+0x220>)
 8004496:	4606      	mov	r6, r0
 8004498:	4640      	mov	r0, r8
 800449a:	f7fc fba5 	bl	8000be8 <__aeabi_fmul>
 800449e:	4639      	mov	r1, r7
 80044a0:	f7fc fa9a 	bl	80009d8 <__addsf3>
 80044a4:	4601      	mov	r1, r0
 80044a6:	4620      	mov	r0, r4
 80044a8:	f7fc fa94 	bl	80009d4 <__aeabi_fsub>
 80044ac:	4629      	mov	r1, r5
 80044ae:	f7fc fa91 	bl	80009d4 <__aeabi_fsub>
 80044b2:	4601      	mov	r1, r0
 80044b4:	4630      	mov	r0, r6
 80044b6:	e7e6      	b.n	8004486 <__ieee754_logf+0x1ba>
 80044b8:	4639      	mov	r1, r7
 80044ba:	4628      	mov	r0, r5
 80044bc:	f7fc fa8a 	bl	80009d4 <__aeabi_fsub>
 80044c0:	4649      	mov	r1, r9
 80044c2:	f7fc fb91 	bl	8000be8 <__aeabi_fmul>
 80044c6:	4604      	mov	r4, r0
 80044c8:	2e00      	cmp	r6, #0
 80044ca:	f43f af69 	beq.w	80043a0 <__ieee754_logf+0xd4>
 80044ce:	4906      	ldr	r1, [pc, #24]	; (80044e8 <__ieee754_logf+0x21c>)
 80044d0:	4640      	mov	r0, r8
 80044d2:	f7fc fb89 	bl	8000be8 <__aeabi_fmul>
 80044d6:	4905      	ldr	r1, [pc, #20]	; (80044ec <__ieee754_logf+0x220>)
 80044d8:	4606      	mov	r6, r0
 80044da:	4640      	mov	r0, r8
 80044dc:	e76c      	b.n	80043b8 <__ieee754_logf+0xec>
 80044de:	2000      	movs	r0, #0
 80044e0:	e700      	b.n	80042e4 <__ieee754_logf+0x18>
 80044e2:	bf00      	nop
 80044e4:	004afb20 	.word	0x004afb20
 80044e8:	3f317180 	.word	0x3f317180
 80044ec:	3717f7d1 	.word	0x3717f7d1
 80044f0:	3eaaaaab 	.word	0x3eaaaaab
 80044f4:	3e178897 	.word	0x3e178897
 80044f8:	3e3a3325 	.word	0x3e3a3325
 80044fc:	3e924925 	.word	0x3e924925
 8004500:	3f2aaaab 	.word	0x3f2aaaab
 8004504:	3e1cd04f 	.word	0x3e1cd04f
 8004508:	3e638e29 	.word	0x3e638e29
 800450c:	3ecccccd 	.word	0x3ecccccd
 8004510:	ffcf5c30 	.word	0xffcf5c30

08004514 <matherr>:
 8004514:	2000      	movs	r0, #0
 8004516:	4770      	bx	lr

08004518 <nan>:
 8004518:	2000      	movs	r0, #0
 800451a:	4901      	ldr	r1, [pc, #4]	; (8004520 <nan+0x8>)
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	7ff80000 	.word	0x7ff80000

08004524 <_init>:
 8004524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004526:	bf00      	nop
 8004528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800452a:	bc08      	pop	{r3}
 800452c:	469e      	mov	lr, r3
 800452e:	4770      	bx	lr

08004530 <_fini>:
 8004530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004532:	bf00      	nop
 8004534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004536:	bc08      	pop	{r3}
 8004538:	469e      	mov	lr, r3
 800453a:	4770      	bx	lr
